{"version":3,"sources":["webpack://Xethya/webpack/bootstrap","webpack://Xethya/./node_modules/eventemitter3/index.js","webpack://Xethya/./src/base/eventable.ts","webpack://Xethya/./src/base/object.ts","webpack://Xethya/./src/combat/abstract-combat-simulation.ts","webpack://Xethya/./src/combat/combat-round.ts","webpack://Xethya/./src/combat/combat-simulation.ts","webpack://Xethya/./src/combat/combat-turn.ts","webpack://Xethya/./src/dice/dice.ts","webpack://Xethya/./src/dice/presets/coin-flip.ts","webpack://Xethya/./src/dice/throws/chance-throw-result.ts","webpack://Xethya/./src/dice/throws/chance-throw.ts","webpack://Xethya/./src/dice/throws/dice-throw-result.ts","webpack://Xethya/./src/dice/throws/dice-throw.ts","webpack://Xethya/./src/dice/throws/skill-throw-result.ts","webpack://Xethya/./src/dice/throws/skill-throw.ts","webpack://Xethya/./src/entity/able-entity.ts","webpack://Xethya/./src/entity/abstract-entity.ts","webpack://Xethya/./src/entity/attributes/attribute-collection.ts","webpack://Xethya/./src/entity/attributes/attribute.ts","webpack://Xethya/./src/entity/entity.ts","webpack://Xethya/./src/entity/living-entity.ts","webpack://Xethya/./src/entity/modifiers/base-modifier-calculator.ts","webpack://Xethya/./src/entity/modifiers/base-modifier.ts","webpack://Xethya/./src/entity/modifiers/modifier-collection.ts","webpack://Xethya/./src/entity/modifiers/modifier.ts","webpack://Xethya/./src/entity/race/race.ts","webpack://Xethya/./src/entity/skills/skill-collection.ts","webpack://Xethya/./src/entity/skills/skill.ts","webpack://Xethya/./src/entity/stats/stat-collection.ts","webpack://Xethya/./src/entity/stats/stat.ts","webpack://Xethya/./src/interaction/abstract-round.ts","webpack://Xethya/./src/interaction/abstract-turn.ts","webpack://Xethya/./src/interaction/round.ts","webpack://Xethya/./src/interaction/turn-resolver.ts","webpack://Xethya/./src/interaction/turn.ts","webpack://Xethya/./src/random/blum-blum-shub.ts","webpack://Xethya/./src/random/mersenne-twister.ts","webpack://Xethya/./src/random/randomizer.ts","webpack://Xethya/./src/relationships/abstract-faction.ts","webpack://Xethya/./src/relationships/faction.ts","webpack://Xethya/./src/utils/assert/assert.ts","webpack://Xethya/./src/utils/assert/assertion-error.ts","webpack://Xethya/./src/utils/collection/abstract-collection.ts","webpack://Xethya/./src/utils/collection/collection.ts","webpack://Xethya/./src/utils/group-by/group-by.ts","webpack://Xethya/./src/utils/range/range.ts","webpack://Xethya/./src/xethya.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","has","prefix","Events","addListener","emitter","event","fn","context","once","TypeError","listener","this","evt","_events","push","_eventsCount","clearEvent","EventEmitter","create","__proto__","eventNames","events","names","slice","getOwnPropertySymbols","concat","listeners","handlers","length","ee","Array","listenerCount","emit","a1","a2","a3","a4","a5","args","len","arguments","removeListener","undefined","apply","j","on","removeAllListeners","off","prefixed","eventemitter3_1","default","[object Object]","super","eventable_1","__importDefault","object_1","combat_turn_1","combat_round_1","entities","roundRequestValidator","turnResolver","challengeResolver","_ended","_entities","_rounds","_turnResolver","_challengeResolver","_roundRequestValidator","rounds","ended","currentRound","_currentRound","challenge","beginRound","end","avoided","round","roundNumber","turnType","onBeforeRoundBegin","bind","onRoundBegin","onRoundComplete","onRoundTurn","applyRoundResults","turn","canCombat","createRound","begin","results","calculateResults","round_1","group_by_1","_turnType","_turns","_entitiesByFaction","group","entity","faction","id","turns","currentTurn","_currentTurn","turnNumber","buildTurnFor","validFoes","getValidFoesFor","foes","enemies","getEnemyFactions","neutrals","getNeutralFactions","forEach","abstract_combat_simulation_1","turn_1","settings","_validFoes","newValue","randomizer_1","blum_blum_shub_1","assert_1","Dice","faces","randomStrategy","BlumBlumShubAlgorithm","randomStrategySettings","_faces","setRandomStrategy","_mustPreservePrng","recommendsToReinstantiate","_initializeRandomizer","_randomizer","random","generateRandom","result","Math","ceil","_regenerateRandomStrategyIfNeeded","_randomStrategy","_randomStrategySettings","roll","dice_1","CoinFlip","dice_throw_result_1","throwResult","rolls","throwType","_throwType","range_1","dice_throw_1","chance_throw_result_1","ChanceThrow","DiceThrow","numberOfDices","maxNumber","seedNumber","Number","toString","replace","defaults","rollScores","failure","success","criticalSuccess","assign","key","rollSum","keys","_range","includes","diceThrow","ctr","getRollSum","_calculateThrowType","reduce","dices","dtr","map","SkillThrowResult","skillValue","skillAttributesModifierValue","_skillValue","_skillAttributeModifiersValue","skillAttributeModifiersValue","totalRollValue","failureRoll","_failureRoll","chance_throw_1","skill_throw_result_1","skill","_skill","modifiers","getSum","entity_1","skill_collection_1","AbleEntity","_skills","fromArray","skills","attribute_collection_1","modifier_collection_1","AbstractEntity","volatile","attributes","_id","_name","_volatile","_attributes","_modifiers","newName","collection_1","AttributeCollection","_bindAttributeEvents","add","_unbindAttributeEvents","remove","getAll","attribute","contains","rawValue","count","leftSum","rightSum","collection","base_modifier_1","Attribute","initialValue","valueRange","_rawValue","_valueRange","_updateBaseModifierValue","setValue","newId","range","previousValue","baseModifierValue","modifierSum","sign","abstract_entity_1","able_entity_1","modifier_1","stat_collection_1","LivingEntity","_race","race","_age","age","_weight","weight","_height","height","_faction","_stats","stats","_applyRacialTraits","_applyRaceAttributes","_applyRaceStats","_applyRaceSkills","raceTrait","stat","BaseModifierCalculator","floor","base_modifier_calculator_1","calculationMethod","_calculateValue","ModifierCollection","_bindModifierEvents","_unbindModifierEvents","modifier","active","where","leftValue","rightValue","source","_value","_active","_source","newSource","Race","lifeExpectancy","defaultAlignment","heightRange","heritageAttributes","heritageSkills","heritageStats","SkillCollection","_bindSkillEvents","_unbindSkillEvents","use","skill_throw_1","Skill","owner","primaryAttribute","_setPrimaryAttribute","attributeID","_primaryAttribute","newPrimaryAttribute","StatCollection","_bindStatEvents","_unbindStatEvents","attribute_1","statCalculator","_lastCalculatedValue","_calculateStat","_valueChanged","turn_resolver_1","_roundNumber","index","onTurnBegin","onTurnEnd","updateTurn","buildTurns","announceTurn","nextTurn","find","isResolved","previousTurnIndex","action","checkIfRoundIsComplete","every","_turnNumber","_owner","_action","newAction","abstract_round_1","constructorFunction","turnSettings","abstract_turn_1","P","Q","DefaultSeeds","q","abs","randomIndex","M","N","MATRIX_A","UPPER_MASK","LOWER_MASK","INIT_BY_ARRAY_SEED","MersenneTwisterAlgorithm","seed","Date","getTime","split","sort","join","MT","MTI","initializeRandomGenerator","initKeyArray","keyLength","initKey","v","k","y","mag01","kk","generateRandomInteger","randomizerSettings","_allRelationships","_relationshipsByStatus","allRelationships","groupRelationshipsByStatus","relationshipsByStatus","groupAndMap","relation","relationshipStatus","status","relationship","addRelationship","abstract_faction_1","assertion_error_1","condition","message","Error","indexName","_list","filter","items","item","abstract_collection_1","Collection","array","criteria","grouping","transform","Range","lowerBound","upperBound","min","max","values","notedRange","errorMessage","allowedDelimiters","some","delimiter","delimiterFound","shift","data","trim","Eventable","XethyaObject","assert","AbstractCollection","BlumBlumShub","__importStar","MersenneTwister","Randomizer","ChanceThrowResult","SkillThrow","coin_flip_1","Entity","living_entity_1","race_1","Modifier","BaseModifier","stat_1","Stat","skill_1","AbstractFaction","faction_1","Faction","TurnResolver","AbstractTurn","Turn","AbstractRound","Round","CombatTurn","CombatRound","AbstractCombatSimulation","combat_simulation_1","CombatSimulation"],"mappings":"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","file":"xethya.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/xethya.ts\");\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import { EventEmitter } from 'eventemitter3';\n\nexport default class Eventable extends EventEmitter {\n  constructor() {\n    super();\n  }\n}","import Eventable from './eventable';\n\nclass XethyaObject extends Eventable {\n  constructor() {\n    super();\n  }\n}\n\nexport default XethyaObject;","import XethyaObject from '../base/object';\nimport ICombatSimulation from './combat-simulation.i';\nimport IFactionMemberEntity from '../entity/faction-member-entity.i';\nimport ICombatSimulationSettings from './combat-simulation-settings.i';\nimport ICombatValidator from './combat-validator.i';\nimport ICombatTurn from './combat-turn.i';\nimport ICombatRound from './combat-round.i';\nimport CombatTurn from './combat-turn';\nimport IGrouping from '../utils/group-by/grouping.i';\nimport { group } from '../utils/group-by/group-by';\nimport CombatRound from './combat-round';\nimport { IRoundEvent } from '../interaction/round-event.i';\nimport { ITurnEvent } from '../interaction/turn-event.i';\nimport ICombatFinalizationSettings from './combat-finalization-settings.i';\nimport ICombatSimulationResult from './combat-simulation-result.i';\n\nexport default abstract class AbstractCombatSimulation extends XethyaObject implements ICombatSimulation {\n  protected readonly _entities: IFactionMemberEntity[];\n  protected readonly _turnResolver: ICombatTurn;\n  protected readonly _challengeResolver: ICombatValidator;\n  protected readonly _roundRequestValidator: ICombatValidator;\n\n  protected _currentRound?: ICombatRound;\n  protected _rounds: ICombatRound[];\n  protected _ended: boolean = false;\n\n  constructor({\n    entities,\n    roundRequestValidator,\n    turnResolver = CombatTurn,\n    challengeResolver = () => true,\n  }: ICombatSimulationSettings) {\n    super();\n\n    this._entities = entities;\n    this._rounds = [];\n    this._turnResolver = turnResolver as ICombatTurn;\n    this._challengeResolver = challengeResolver;\n    this._roundRequestValidator = roundRequestValidator;\n  }\n\n  get entities() {\n    return this._entities;\n  }\n\n  get turnResolver() {\n    return this._turnResolver;\n  }\n\n  get challengeResolver() {\n    return this._challengeResolver;\n  }\n\n  get roundRequestValidator() {\n    return this._roundRequestValidator;\n  }\n\n  get rounds() {\n    return this._rounds;\n  }\n\n  get ended() {\n    return this._ended;\n  }\n\n  get currentRound() {\n    return this._currentRound;\n  }\n\n  challenge(): boolean {\n    return this.challengeResolver.call(null, this);\n  }\n\n  begin(): void {\n    if (!this.challenge()) {\n      this.end({ avoided: true });\n      return;\n    }\n\n    if (this._ended) {\n      return;\n    }\n\n    this.emit('before:combat');\n    this.beginRound();\n  }\n\n  canCombat(): boolean {\n    return this.roundRequestValidator.call(null, this);\n  }\n\n  createRound(): ICombatRound {\n    const round = new CombatRound({\n      entities: this._entities,\n      roundNumber: this._rounds.length + 1,\n      turnType: this.turnResolver,\n    });\n\n    round.on('before:begin', this.onBeforeRoundBegin.bind(this));\n    round.on('begin', this.onRoundBegin.bind(this));\n    round.on('complete', this.onRoundComplete.bind(this));\n    round.on('turn', this.onRoundTurn.bind(this));\n\n    return round;\n  }\n\n  onBeforeRoundBegin({ round }: IRoundEvent<ICombatRound>): void {\n    this.emit('before:begin:round', { round });\n  }\n\n  onRoundBegin({ round }: IRoundEvent<ICombatRound>): void {\n    this.emit('begin:round', { round });\n  }\n\n  onRoundComplete({ round }: IRoundEvent<ICombatRound>): void {\n    this.emit('after:round', { round });\n    this.applyRoundResults(round);\n  }\n\n  onRoundTurn({ turn }: ITurnEvent<ICombatTurn>): void {\n    this.emit('turn:round', { turn });\n  }\n  \n  applyRoundResults(round: ICombatRound): void {\n    this._rounds.push(round);\n    this.beginRound();\n  }\n\n  beginRound(): void {\n    if (!this.canCombat()) {\n      this.end();\n      return;\n    }\n\n    const round: ICombatRound = this.createRound();\n\n    round.begin();\n\n    this._currentRound = round;\n  }\n\n  calculateResults(): ICombatSimulationResult {\n    return {\n      avoided: false,\n    };\n  }\n\n  end(context?: ICombatFinalizationSettings): ICombatSimulationResult | undefined {\n    this._ended = true;\n\n    if (context && context.avoided) {\n      this.emit('end', { avoided: context.avoided });\n      return;\n    }\n\n    const results = this.calculateResults();\n\n    this.emit('end', { results });\n\n    return results;\n  }\n}","import ICombatTurn from './combat-turn.i';\nimport IRound from '../interaction/round.i';\nimport IEntity from '../entity/entity.i';\nimport IFactionMemberEntity from '../entity/faction-member-entity.i';\nimport ICombatRoundSettings from './combat-round-settings.i';\nimport CombatTurn from './combat-turn';\nimport ICombatRound from './combat-round.i';\nimport Round from '../interaction/round';\nimport IFaction from '../relationships/faction.i';\nimport IGrouping from '../utils/group-by/grouping.i';\nimport { group } from '../utils/group-by/group-by';\n\nexport default class CombatRound extends Round implements ICombatRound<ICombatTurn, IFactionMemberEntity> {\n  protected _turnType: ICombatTurn;\n  protected _turns: ICombatTurn[];\n  protected _entities: IFactionMemberEntity[];\n  protected _entitiesByFaction: IGrouping<IFactionMemberEntity>;\n  protected _currentTurn?: ICombatTurn;\n\n  constructor({ entities, roundNumber, turnType }: ICombatRoundSettings) {\n    super({ entities, roundNumber, turnType });\n\n    this._turnType = turnType;\n    this._entities = entities;\n    this._turns = [];\n\n    this._entitiesByFaction = group<IFactionMemberEntity>(\n      entities,\n      (entity) => entity.faction.id\n    );\n  }\n\n  get turnType() {\n    return this._turnType;\n  }\n\n  get turns() {\n    return this._turns;\n  }\n\n  get entities() {\n    return this._entities;\n  }\n\n  get currentTurn() {\n    return this._currentTurn;\n  }\n\n  buildTurnFor(entity: IFactionMemberEntity, turnNumber: number): CombatTurn {\n    const turn = super.buildTurnFor(entity, turnNumber) as CombatTurn;\n\n    turn.validFoes = this.getValidFoesFor(entity);\n\n    return turn;\n  }\n\n  getValidFoesFor(entity: IFactionMemberEntity): IFactionMemberEntity[] {\n    const foes: IFactionMemberEntity[] = [];\n\n    const { faction } = entity;\n    const enemies: IFaction[] = faction.getEnemyFactions() || [];\n    const neutrals: IFaction[] = faction.getNeutralFactions() || [];\n    const factions: IFaction[] = enemies.concat(neutrals);\n\n    factions.forEach((faction) => {\n      foes.push(...this._entitiesByFaction[faction.id]);\n    });\n\n    return foes;\n  }\n}","import AbstractCombatSimulation from './abstract-combat-simulation';\n\nexport default class CombatSimulation extends AbstractCombatSimulation {};","import Turn from '../interaction/turn';\nimport ICombatTurn from './combat-turn.i';\nimport IFactionMemberEntity from '../entity/faction-member-entity.i';\nimport ICombatTurnSettings from './combat-turn-settings.i';\n\nexport default class CombatTurn extends Turn implements ICombatTurn {\n  protected _validFoes: IFactionMemberEntity[];\n\n  constructor(settings: ICombatTurnSettings) {\n    super(settings);\n\n    this._validFoes = settings.validFoes || [];  \n  }\n\n  get validFoes() {\n    return this._validFoes;\n  }\n\n  set validFoes(newValue) {\n    this._validFoes = newValue;\n  }\n}","/**\n * The core class of the package. The Dice class allows to configure a single,\n * positive, integer random throw.\n *\n * By default, the chance throw uses the Blum Blum Shub algorithm contained in\n * `xethya-extension-random-bbs`, which provides a randomizer with an equal chance\n * of rolling numbers in all of the range.\n *\n * You can use the `xethya-extension-random-mtw` package to use the chance throw\n * with the Mersenne-Twister algorithm, which provides an average distribution\n * of 65-35-0 (you'll never get numbers larger than 66).\n *\n * @example\n * ```js\n * // Roll a single d6.\n * const d6 = new Dice();\n * d6.roll(); // A number between 1 and 6.\n *\n * // Roll a single d4.\n * const d4 = new Dice({ faces: 4 });\n * d4.roll();\n *\n * // Alternative, static syntax. Will always use Blum Blum Shub.\n * Dice.rollD(4);\n *\n * // Create a dice, roll it, then change its size.\n * const mutantDice = new Dice({ faces: 10 });\n * mutantDice.roll(); // A number between 1 and 10.\n * mutantDice.faces = 4;\n * mutantDice.roll(); // A number between 1 and 4.\n * ```\n *\n * @class Dice\n * @extends {XethyaObject}\n *\n * @param {Object} settings - A configuration object.\n * @param {Number} [settings.number = 6] - How many faces the dice has, or\n *                 the maximum number the roll can be.\n * @param {Class}  [settings.randomStrategy = BlumBlumShubAlgorithm] - The strategy to use\n *                 to generate the numbers. Must be a class that implements a `generateRandom()`\n *                 method.\n * @param {Object} [settings.randomStrategySettings = {}] - Specific configuration for the\n *                 randomizer. Most strategies should have default settings so you don't need\n *                 to use this, usually.\n *\n * @property {Number} faces - Gets or sets how many faces the dice has. Must be at least 2.\n * @property {Class} randomStrategy - Contains the reference to the pRNG used by the dice.\n * @property {Object} randomStrategySettings - Contains the pRNG's settings.\n *\n * @uses BlumBlumShubAlgorithm\n */\n\nimport Randomizer from '../random/randomizer';\nimport { BlumBlumShubAlgorithm } from '../random/blum-blum-shub';\nimport XethyaObject from '../base/object';\nimport IRandomAlgorithm from '../random/random-algorithm.i';\nimport assert from '../utils/assert/assert';\nimport IConstructableRandomAlgorithm from '../random/constructable-random-algorithm.i';\nimport IConstructable from '../utils/constructable.t';\nimport IRandomSettings from '../random/random-settings.i';\n\nexport interface IDiceSettings extends IRandomSettings {\n  faces: number,\n}\n\nexport class Dice extends XethyaObject {\n  private _faces: number = 6;\n  private _mustPreservePrng: boolean;\n  private _randomStrategy?: IRandomAlgorithm;\n  private _randomizer?: IRandomAlgorithm;\n  private _randomStrategySettings?: object;\n\n  constructor({\n    faces = 6,\n    randomStrategy = BlumBlumShubAlgorithm,\n    randomStrategySettings = {}\n  } = {} as IDiceSettings) {\n    super();\n\n    this.faces = faces;\n    this.setRandomStrategy(randomStrategy as IRandomAlgorithm, randomStrategySettings);\n    this._mustPreservePrng = randomStrategy.recommendsToReinstantiate();\n  }\n\n  /**\n   * Reinitializes the randomizer according to the strategy's recommendation.\n   *\n   * @private\n   * @method _regenerateRandomStrategyIfNeeded\n   */\n  _regenerateRandomStrategyIfNeeded() {\n    if (!this._mustPreservePrng) {\n      this._initializeRandomizer();\n    }\n  }\n\n  /**\n   * Instantiates the randomizer.\n   *\n   * @private\n   * @method _initializeRandomizer\n   */\n  private _initializeRandomizer() {\n    this._randomizer = new Randomizer(this.randomStrategy as IConstructableRandomAlgorithm<IRandomAlgorithm>).create(<object>this.randomStrategySettings);\n  }\n\n  roll(): number {\n    this.emit('before:roll');\n\n    const random: number = (<IRandomAlgorithm>this._randomizer).generateRandom();\n    const result: number = Math.ceil(random * this.faces);\n    this._regenerateRandomStrategyIfNeeded();\n\n    this.emit('roll', result);\n\n    return result;\n  }\n\n  /**\n   * Sets a new random strategy for the dice.\n   *\n   * @public\n   * @method\n   * @param {Class}  randomStrategy - The strategy to use to generate the numbers.\n   *                 Must be a class that implements a `generateRandom()` method.\n   * @param {Object} [randomStrategySettings = {}] - Specific configuration for the\n   *                 randomizer. Most strategies should have default settings so you don't need\n   *                 to use this, usually.\n   */\n  setRandomStrategy(randomStrategy: IRandomAlgorithm, randomStrategySettings = {}) {\n    this.randomStrategy = randomStrategy;\n    this.randomStrategySettings = randomStrategySettings;\n\n    this._initializeRandomizer();\n  }\n\n  get faces() {\n    return this._faces;\n  }\n\n  /**\n   * @throws {Error} if faces isn't a Number or it's less than 2.\n   */\n  set faces(faces) {\n    assert(faces >= 2, 'Dice#setFaces: a dice must have at least two faces');\n\n    this._faces = faces;\n  }\n\n  get randomStrategy() {\n    return this._randomStrategy;\n  }\n\n  set randomStrategy(randomStrategy) {\n    this._randomStrategy = randomStrategy;\n  }\n\n  get randomStrategySettings() {\n    return this._randomStrategySettings;\n  }\n\n  set randomStrategySettings(randomStrategySettings) {\n    this._randomStrategySettings = randomStrategySettings;\n  }\n\n  static rollD(faces: number) {\n    return new Dice({ faces }).roll();\n  }\n}\n","import { Dice } from '../dice';\n\nexport const enum CoinFlipSides {\n  HEADS = 1,\n  TAILS = 2,\n};\n\nexport class CoinFlip extends Dice {\n  constructor() {\n    super({ faces: 2 });\n  }\n}","import DiceThrowResult from './dice-throw-result';\nimport { DiceThrowTypes } from './dice-throw';\n\nconst allowedThrowTypes = [\n  DiceThrowTypes.FAILURE,\n  DiceThrowTypes.SUCCESS,\n  DiceThrowTypes.CRITICAL_SUCCESS\n];\n\nexport default class ChanceThrowResult extends DiceThrowResult {\n  private _throwType?: DiceThrowTypes;\n\n  constructor(throwResult: DiceThrowResult) {\n    super();\n    this.rolls = this.rolls.concat(throwResult.rolls);\n  }\n\n  get throwType() {\n    return this._throwType;\n  }\n\n  set throwType(value) {\n    this._throwType = value;\n  }\n}\n","/**\n * A d100 thrower. Useful for probability calculation. A throw is classified\n * with a roll score map, where the defaults are:\n *\n * - 1-20: Failure\n * - 21-90: Success\n * - 91-100: Critical success\n *\n * You can move around these ranges in order to change the roll's difficulty.\n * For instance, a very difficult throw would be one like this:\n *\n * - 1-80: Failure\n * - 81-98: Success\n * - 99-100: Critical success\n *\n * Notice that the success rate ranges cannot overlap, as the result resolver\n * won't be able to distinguish between rates otherwise.\n *\n * As ChanceThrow is an extension of Dice, it's regulated by the same randomizer\n * rules.\n *\n * @example\n * ```js\n * // Default settings.\n * const d100 = new ChanceThrow();\n * d100.roll();\n *\n * // A very difficult throw.\n * const d100Hard = new ChanceThrow({\n *   rollScores: {\n *     failure: new Range(1, 80),\n *     success: new Range(81, 98),\n *     criticalSuccess: new Range(99, 100),\n *   }\n * });\n * d100Hard.roll();\n *\n * // A chance throw of d66. Useful for capping the success rate\n * // without changing the roll scores map.\n * import { MersenneTwisterAlgorithm } from 'xethya-extension-random-mtw';\n *\n * const d66 = new ChanceThrow({\n *   randomStrategy: MersenneTwisterAlgorithm,\n * });\n * d66.roll();\n * ```\n *\n * @class ChanceThrow\n * @extends DiceThrow\n *\n * @param {Object} [settings] - Configuration object for the throw.\n * @param {Object} [settings.rollScores] - A map of ranges to determine the success rate of\n *                 the chance throw's result.\n * @param {Range}  [settings.rollScores.failure = new Range(1, 20)] - A Range to describe a\n *                 failed throw. This range can be used to apply penalizations to the player.\n * @param {Range}  [settings.rollScores.success = new Range(21, 90)] - A Range to describe a\n *                 success throw. This range can be used to give the player a reward.\n * @param {Range}  [settings.rollScores.criticalSuccess = new Range(91, 100)] - A Range to\n *                 describe a critical success throw. This result means the throw went even\n *                 better than normal, so a major reward can be given.\n * @param {Class}  [settings.randomStrategy = BlumBlumShubAlgorithm] - The strategy to use\n *                 to generate the numbers. Must be a class that implements a `generateRandom()`\n *                 method.\n *\n * @see https://github.com/xethya/xethya-extension-random-bbs/wiki/Blum-Blum-Shub-distributions\n * @see https://github.com/xethya/xethya-extension-random-mtw\n *\n * @uses Range\n * @uses BlumBlumShubAlgorithm\n * @uses ChanceThrowResult\n */\n\nimport Range from '../../utils/range/range';\nimport { BlumBlumShubAlgorithm } from '../../random/blum-blum-shub';\n\nimport { DiceThrow, IDiceThrowSettings, DiceThrowTypes } from './dice-throw';\nimport ChanceThrowResult from './chance-throw-result';\nimport IConstructableRandomAlgorithm from '../../random/constructable-random-algorithm.i';\nimport IRandomSettings from '../../random/random-settings.i';\nimport IRollScoreSettings from './roll-score-settings.i';\nimport assert from '../../utils/assert/assert';\n\nexport interface IChanceThrowSettings extends IDiceThrowSettings {\n  rollScores: IRollScoreSettings,\n}\n\nexport class ChanceThrow extends DiceThrow {\n  settings: IChanceThrowSettings;\n\n  constructor(settings = { randomStrategy: undefined } as IChanceThrowSettings) {\n    super({\n      numberOfDices: 1,\n      maxNumber: 100,\n      randomStrategy: settings.randomStrategy || BlumBlumShubAlgorithm as IConstructableRandomAlgorithm<BlumBlumShubAlgorithm>,\n      randomStrategySettings: {\n        seedNumber: Number(Math.random().toString().replace(/\\./, ''))\n      }\n    });\n\n    const defaults = {\n      rollScores: {\n        failure: new Range(1, 20),\n        success: new Range(21, 90),\n        criticalSuccess: new Range(91, 100)\n      }\n    };\n\n    this.settings = <IChanceThrowSettings>Object.assign({}, settings, defaults);\n  }\n\n  /**\n   * Returns the range for a success rate.\n   *\n   * @private\n   * @function\n   * @param {string} key - The success rate to lookup.\n   * @return {Range}\n   */\n  private _range(key: string) {\n    return this.settings.rollScores[key];\n  }\n\n  /**\n   * Determines the success rate of the throw.\n   *\n   * @private\n   * @function\n   * @param {Number} rollSum - The results of the throw.\n   * @return {String}\n   */\n  private _calculateThrowType(rollSum: number): DiceThrowTypes | undefined {\n    for (let throwType of Object.keys(this.settings.rollScores)) {\n      if (this._range(throwType).includes(rollSum)) {\n        return throwType as DiceThrowTypes;\n      }\n    }\n  }\n\n  /**\n   * Rolls the dice.\n   *\n   * @public\n   * @function roll\n   * @override\n   */\n  roll() {\n    const diceThrow = super.roll();\n    const ctr = new ChanceThrowResult(diceThrow);\n    const rollSum = diceThrow.getRollSum();\n\n    ctr.throwType = this._calculateThrowType(rollSum);\n\n    return ctr;\n  }\n}\n","export default class DiceThrowResult {\n  rolls: number[];\n\n  constructor() {\n    this.rolls = [];\n  }\n\n  getRollSum(): number {\n    return this.rolls.reduce((m, n) => m + n);\n  }\n}\n","/**\n * xethya-dice\n *\n * Copyright © 2016 Joel A. Villarreal Bertoldi. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\nimport { Dice } from '../dice';\nimport DiceThrowResult from './dice-throw-result';\n\nimport { BlumBlumShubAlgorithm } from '../../random/blum-blum-shub';\nimport assert from '../../utils/assert/assert';\nimport IRandomSettings from '../../random/random-settings.i';\nimport IRandomAlgorithm from '../../random/random-algorithm.i';\nimport IConstructableRandomAlgorithm from '../../random/constructable-random-algorithm.i';\n\nexport interface IDiceThrowSettings extends IRandomSettings {\n  numberOfDices?: number,\n  maxNumber?: number,\n}\n\nexport const enum DiceThrowTypes {\n  FAILURE = 'failure',\n  SUCCESS = 'success',\n  CRITICAL_SUCCESS = 'criticalSuccess',\n};\n\nexport class DiceThrow {\n  dices: Dice[];\n\n  constructor({\n    numberOfDices = 2,\n    maxNumber = 6,\n    randomStrategy = BlumBlumShubAlgorithm,\n    randomStrategySettings = {}\n  } = {} as IDiceThrowSettings) {\n    assert(maxNumber >= 2, 'DiceThrow#constructor: expected `maxNumber` to be at least 2.');\n\n    this.dices = [];\n\n    for (let d = 0; d < numberOfDices; d += 1) {\n      this.dices.push(new Dice({\n        faces: maxNumber,\n        randomStrategy: randomStrategy as IConstructableRandomAlgorithm<IRandomAlgorithm>,\n        randomStrategySettings\n      }));\n    }\n  }\n\n  roll() {\n    let dtr = new DiceThrowResult();\n    dtr.rolls = this.dices.map(d => d.roll());\n    return dtr;\n  }\n}\n","import ChanceThrowResult from './chance-throw-result';\n\nexport type SkillThrowResultSettings = {\n  skillValue: number,\n  skillAttributesModifierValue: number,\n  throwResult: ChanceThrowResult,\n};\n\nexport class SkillThrowResult extends ChanceThrowResult {\n  private _skillValue: number;\n  private _skillAttributeModifiersValue: number;\n  private _failureRoll?: ChanceThrowResult;\n\n  constructor({\n    skillValue,\n    skillAttributesModifierValue,\n    throwResult\n  }: SkillThrowResultSettings) {\n    super(throwResult);\n    \n    this._skillValue = skillValue;\n    this._skillAttributeModifiersValue = skillAttributesModifierValue;\n  }\n\n  get skillValue() {\n    return this._skillValue;\n  }\n\n  get skillAttributeModifiersValue() {\n    return this._skillAttributeModifiersValue;\n  }\n\n  get totalRollValue() {\n    return this.skillValue + this.getRollSum() + this.skillAttributeModifiersValue;\n  }\n\n  get failureRoll() {\n    return this._failureRoll;\n  }\n\n  set failureRoll(roll: ChanceThrowResult | undefined) {\n    this._failureRoll = roll;\n  }\n}","import { ChanceThrow } from './chance-throw';\nimport { Skill } from '../../entity/skills/skill';\nimport ChanceThrowResult from './chance-throw-result';\nimport { SkillThrowResult } from './skill-throw-result';\n\nexport default class SkillThrow extends ChanceThrow {\n  private _skill: Skill;\n\n  constructor(skill: Skill) {\n    super();\n\n    this._skill = skill;\n  }\n\n  get skill() {\n    return this._skill;\n  }\n\n  roll(): SkillThrowResult {\n    const result: ChanceThrowResult = super.roll();\n    return new SkillThrowResult({\n      skillValue: this._skill.value,\n      skillAttributesModifierValue: this._skill.modifiers.getSum(),\n      throwResult: result,\n    });\n  }\n}","import Entity from './entity';\nimport { IEntitySettings } from './abstract-entity';\nimport IHasSkills from './skills/has-skills.i';\nimport SkillCollection from './skills/skill-collection';\nimport { Skill } from './skills/skill';\n\nexport interface IAbleEntitySettings extends IEntitySettings {\n  skills: Skill[];\n}\n\nexport class AbleEntity extends Entity implements IHasSkills {\n  protected _skills: SkillCollection;\n\n  constructor(settings: IAbleEntitySettings) {\n    super(settings);\n\n    this._skills = SkillCollection.fromArray(settings.skills);\n  }\n\n  get skills() {\n    return this._skills;\n  }\n}","import assert from '../utils/assert/assert';\nimport XethyaObject from '../base/object';\nimport IEntity from './entity.i';\nimport AttributeCollection from './attributes/attribute-collection';\nimport ModifierCollection from './modifiers/modifier-collection';\nimport { Attribute } from './attributes/attribute';\nimport Modifier from './modifiers/modifier';\n\nexport const enum MoralAlignments {\n  CHAOTIC_GOOD = 'chaotic:good',\n  CHAOTIC_NEUTRAL = 'chaotic:neutral',\n  CHAOTIC_EVIL = 'chaotic:evil',\n  NEUTRAL_GOOD = 'neutral:good',\n  NEUTRAL_NEUTRAL = 'neutral:neutral',\n  NEUTRAL_EVIL = 'neutral:evil',\n  LAWFUL_GOOD = 'lawful:good',\n  LAWFUL_NEUTRAL = 'lawful:neutral',\n  LAWFUL_EVIL = 'lawful:evil',\n};\n\nexport interface IEntitySettings {\n  id: string;\n  name: string;\n  volatile: false;\n  attributes: Attribute[],\n  modifiers: Modifier[],\n};\n\nexport abstract class AbstractEntity extends XethyaObject implements IEntity {\n  protected readonly _id: string;\n  protected _name: string;\n  protected readonly _volatile: boolean;\n  protected readonly _attributes: AttributeCollection;\n  protected readonly _modifiers: ModifierCollection;\n\n  constructor({\n    id,\n    name = 'UnnamedEntity',\n    volatile = false,\n    attributes = [],\n    modifiers = [],\n  } = {} as IEntitySettings) {\n    super();\n\n    this._id = id;\n    this._name = name;\n    this._volatile = volatile;\n    this._attributes = AttributeCollection.fromArray(attributes);\n    this._modifiers = ModifierCollection.fromArray(modifiers);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(newName: string) {\n    this._name = newName;\n  }\n\n  get volatile() {\n    return this._volatile;\n  }\n\n  get attributes() {\n    return this._attributes;\n  }\n\n  get modifiers() {\n    return this._modifiers;\n  }\n}","import Collection from '../../utils/collection/collection';\nimport { Attribute } from './attribute';\n\nexport default class AttributeCollection extends Collection<Attribute> {\n  constructor() {\n    super('id');\n  }\n\n  add(...attributes: Attribute[]) {\n    attributes.forEach(this._bindAttributeEvents.bind(this));\n    super.add(...attributes);\n  }\n\n  remove(id: string): void {\n    this._unbindAttributeEvents(id);\n    super.remove(id);\n  }\n\n  removeAll(): void {\n    this.getAll().forEach(attribute => this.remove(attribute.id));    \n  }\n\n  setValue(id: string, value: number): void {\n    if (this.contains(id)) {\n      const attribute = this.get(id) as Attribute;\n      attribute.rawValue = value;\n    }\n  }\n\n  getModifierSumForAll() {\n    if (this.count === 0) {\n      return 0;\n    }\n    \n    return this.getAll()\n      .map(attribute => attribute.modifiers.getSum())\n      .reduce((leftSum, rightSum) => leftSum + rightSum);\n  }\n  \n  private _bindAttributeEvents(attribute: Attribute): void {\n    attribute.on('change:value', (...args) => {\n      this.emit('change:attribute:value', ...args);\n      this.emit(`change:attribute:${attribute.id}:value`, ...args);\n    });  \n  }\n\n  private _unbindAttributeEvents(id: string): void {\n    this.off(`change:attribute:${id}:value`);    \n  }\n\n  static fromArray(attributes: Attribute[]) : AttributeCollection {\n    const collection: AttributeCollection = new AttributeCollection();\n\n    collection.add(...attributes);\n\n    return collection;\n  }\n}","import assert from '../../utils/assert/assert';\nimport Eventable from '../../base/eventable';\nimport BaseModifier from '../modifiers/base-modifier';\nimport Modifier from '../modifiers/modifier';\nimport ModifierCollection from '../modifiers/modifier-collection';\nimport IHasModifiers from '../modifiers/has-modifiers.i';\nimport Range from '../../utils/range/range';\nimport IRangeable from '../../utils/range/rangeable.i';\n\nexport type AttributeSettings = {\n  id: string,\n  initialValue?: number,\n  valueRange?: Range,\n};\n\nexport class Attribute extends Eventable implements IHasModifiers {\n  modifiers: ModifierCollection;\n  \n  private _valueRange?: Range;\n  private _rawValue: number = 0;\n  private _id: string = '';\n\n  constructor({ \n    id, \n    initialValue = 0, \n    valueRange = undefined \n  }: AttributeSettings) {\n    super();\n    \n    this.modifiers = new ModifierCollection();\n    this.id = id;\n    this._rawValue = initialValue;\n\n    if (valueRange) {\n      this._valueRange = valueRange;\n    }\n\n    this.modifiers.add(new BaseModifier());\n    this._updateBaseModifierValue();\n  }\n\n  private _updateBaseModifierValue(): void {\n    this.modifiers.setValue('base', this._rawValue);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(newId: string) {\n    assert(newId !== '', 'Attribute#set[id]: cannot be an empty String');\n\n    this._id = newId;\n  }\n\n  get rawValue(): number {\n    return this._rawValue;\n  }\n\n  set rawValue(newValue: number) {\n    const range = this._valueRange;\n\n    if (range) {\n      assert(range.includes(newValue),\n        `Attribute#set[value]: value is out of range (must be within ${range.toString()})`);\n    }\n\n    const previousValue = this._rawValue;\n\n    if (previousValue !== newValue) {\n      this.emit('before:change:value', { previousValue, newValue });\n      this._rawValue = newValue;\n      this._updateBaseModifierValue();\n      this.emit('change:value', this);\n    }\n  }\n\n  get value(): number {\n    return this.rawValue + this.modifiers.getSum();\n  }\n\n  get baseModifierValue(): number {\n    const modifier = this.modifiers.get('base') as Modifier;\n    return modifier.value;\n  }\n\n  toString(): string {\n    const modifierSum: number = this.modifiers.getSum();\n    const sign: string = modifierSum >= 0 ? '+' : '';\n    return `${this.rawValue.toString()} (${sign}${modifierSum.toString()})`;\n  }\n}","import { AbstractEntity, IEntitySettings } from \"./abstract-entity\";\n\nexport default class Entity extends AbstractEntity {\n  constructor(settings: IEntitySettings) {\n    super(settings);\n  }\n}","import { AbleEntity, IAbleEntitySettings } from './able-entity';\nimport { Race } from './race/race';\nimport { Attribute } from './attributes/attribute';\nimport Modifier from './modifiers/modifier';\nimport Stat from './stats/stat';\nimport StatCollection from './stats/stat-collection';\nimport IHasStats from './stats/has-stats.i';\nimport { Skill } from './skills/skill';\nimport IFaction from '../relationships/faction.i';\nimport IFactionMemberEntity from './faction-member-entity.i';\n\nexport interface ILivingEntitySettings extends IAbleEntitySettings {\n  race: Race;\n  age: number;\n  height: number;\n  weight: number;\n  stats: Stat[];\n  faction: IFaction;\n}\n\nexport class LivingEntity extends AbleEntity implements IHasStats, IFactionMemberEntity {\n  protected _race: Race;\n  protected _age: number;\n  protected _height: number;\n  protected _weight: number;\n  protected _stats: StatCollection;\n  protected _faction: IFaction;\n\n  constructor(settings: ILivingEntitySettings) {\n    super(settings);\n\n    this._race = settings.race;\n    this._age = settings.age;\n    this._weight = settings.weight;\n    this._height = settings.height;\n    this._faction = settings.faction;\n\n    this._stats = StatCollection.fromArray(settings.stats);\n\n    this._applyRacialTraits();\n  }\n\n  get stats() {\n    return this._stats;\n  }\n\n  get race() {\n    return this._race;\n  }\n\n  get age() {\n    return this._age;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get weight() {\n    return this._weight;\n  }\n\n  get faction() {\n    return this._faction;\n  }\n\n  protected _applyRacialTraits(): void {\n    this._applyRaceAttributes();\n    this._applyRaceStats();\n    this._applyRaceSkills();\n  }\n\n  protected _applyRaceAttributes(): void {\n    this._race.attributes.getAll().forEach((attribute) => {\n      const raceTrait = new Modifier(\n        `${attribute.id}RaceTrait`,\n        attribute.rawValue\n      );\n      (this.attributes.get(attribute.id) as Attribute).modifiers.add(raceTrait);\n    });\n  }\n\n  protected _applyRaceStats(): void {\n    this.race.stats.getAll().forEach((stat) => {\n      const raceTrait = new Modifier(\n        `${stat.id}RaceTrait`,\n        stat.value\n      );\n      (this.stats.get(stat.id) as Stat).modifiers.add(raceTrait);\n    });\n  }\n\n\n  protected _applyRaceSkills(): void {\n    this.race.skills.getAll().forEach((skill) => {\n      const raceTrait = new Modifier(\n        `${skill.id}RaceTrait`,\n        skill.value\n      );\n      (this.skills.get(skill.id) as Skill).modifiers.add(raceTrait);\n    });\n  }  \n}","export function BaseModifierCalculator(value: number) {\n  return Math.floor((value - 10) / 2);\n}\n\nexport type IBaseModifierCalculator = {(value: number): number};","import Modifier from \"./modifier\";\nimport { IBaseModifierCalculator, BaseModifierCalculator } from \"./base-modifier-calculator\";\n\nexport default class BaseModifier extends Modifier {\n  private _calculateValue: IBaseModifierCalculator = BaseModifierCalculator;\n  \n  constructor(calculationMethod: IBaseModifierCalculator = BaseModifierCalculator) {\n    super('base');\n\n    this._calculateValue = calculationMethod;\n  }\n\n  get value() {\n    return super.value;\n  }\n\n  set value(newValue: number) {\n    super.value = this._calculateValue(newValue);\n  }\n}","import Collection from '../../utils/collection/collection';\nimport Modifier from './modifier';\n\nexport default class ModifierCollection extends Collection<Modifier> {\n  constructor() {\n    super('id');\n  }\n\n  add(...modifiers: Modifier[]) {\n    modifiers.forEach(this._bindModifierEvents.bind(this));\n    super.add(...modifiers);\n  }\n\n  remove(id: string): void {\n    this._unbindModifierEvents(id);\n    super.remove(id);\n  }\n\n  removeAll(): void {\n    this.getAll().forEach(modifier => this.remove(modifier.id));\n  }\n\n  setValue(id: string, value: number): void {\n    if (this.contains(id)) {\n      const modifier = this.get(id) as Modifier;\n      modifier.value = value;\n    }\n  }\n\n  activate(id: string): void {\n    if (this.contains(id)) {\n      const modifier = this.get(id) as Modifier;\n      modifier.active = true;\n    }    \n  }\n\n  deactivate(id: string): void {\n    if (this.contains(id)) {\n      const modifier = this.get(id) as Modifier;\n      modifier.active = false;\n    }    \n  }\n\n  getSum(): number {\n    if (this.count === 0) {\n      return 0;\n    }\n\n    return this.where(modifier => modifier.active)\n      .map(modifier => modifier.value)\n      .reduce((leftValue, rightValue) => leftValue + rightValue);\n  }\n\n  private _bindModifierEvents(modifier: Modifier): void {\n    modifier.on('change:value', (...args) => {\n      this.emit('change:modifier:value', ...args);\n      this.emit(`change:modifier:${modifier.id}:value`, ...args);\n    });      \n\n    modifier.on('change:active', (...args) => {\n      this.emit('change:modifier:active', ...args);\n      this.emit(`change:modifier:${modifier.id}:active`, ...args);\n    });\n\n    modifier.on('activate', (...args) => {\n      this.emit('activate:modifier', ...args);\n      this.emit(`activate:modifier:${modifier.id}`, ...args);\n    });\n\n    modifier.on('deactivate', (...args) => {\n      this.emit('deactivate:modifier', ...args);\n      this.emit(`deactivate:modifier:${modifier.id}`, ...args);\n    });  \n  }\n\n  private _unbindModifierEvents(id: string): void {\n    this.off(`change:modifier:${id}:value`);\n    this.off(`change:modifier:${id}:active`);\n    this.off(`activate:modifier:${id}`);\n    this.off(`deactivate:modifier:${id}`);\n  }\n\n  static fromArray(modifiers: Modifier[]) : ModifierCollection {\n    const collection: ModifierCollection = new ModifierCollection();\n\n    collection.add(...modifiers);\n\n    return collection;\n  }  \n}","import assert from '../../utils/assert/assert';\nimport Eventable from '../../base/eventable';\n\nexport default class Modifier extends Eventable {\n  private _id: string = '';\n  private _value: number = 0;\n  private _active: boolean = true;\n  private _source: any;\n\n  constructor(id: string, value: number = 0, source: any = undefined) {\n    super();\n  \n    this.id = id;\n    this.source = source;\n    this._value = value;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(newId: string) {\n    assert(newId !== '', 'Modifier#set[id]: cannot be an empty String');\n\n    this._id = newId;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(newValue: boolean) {\n    if (this._active !== newValue) {\n      this._active = newValue;\n      this.emit(newValue ? 'activate' : 'deactivate', this);\n      this.emit('change:active', this);\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue: number) {\n    if (this._value !== newValue) {\n      const previousValue: number = this._value;\n      this.emit('before:change:value', {\n        previousValue,\n        newValue,\n      });\n      this._value = newValue;\n      this.emit('change:value', this);\n    }\n  }\n\n  get source() {\n    return this._source;\n  }\n\n  set source(newSource) {\n    this._source = newSource;\n  }\n}","import XethyaObject from '../../base/object';\nimport IHasAttributes from '../attributes/has-attributes.i';\nimport { Attribute } from '../attributes/attribute';\nimport AttributeCollection from '../attributes/attribute-collection';\nimport IHasSkills from '../skills/has-skills.i';\nimport { Skill } from '../skills/skill';\nimport SkillCollection from '../skills/skill-collection';\nimport IHasStats from '../stats/has-stats.i';\nimport Stat from '../stats/stat';\nimport StatCollection from '../stats/stat-collection';\nimport Range from '../../utils/range/range';\nimport { MoralAlignments } from '../abstract-entity';\n\nexport type RaceSettings = {\n  id: string;\n  name: string;\n  lifeExpectancy: Range;\n  defaultAlignment: MoralAlignments;\n  heightRange: Range;\n  heritageAttributes: Attribute[];\n  heritageSkills: Skill[];\n  heritageStats: Stat[];\n}\n\nexport class Race extends XethyaObject implements IHasAttributes, IHasSkills, IHasStats {\n  id: string;\n  name: string;\n  attributes: AttributeCollection;\n  skills: SkillCollection;\n  stats: StatCollection;\n  lifeExpectancy: Range;\n  defaultAlignment: MoralAlignments;\n  heightRange: Range;\n\n  constructor({\n    id,\n    name = 'Unnamed Race',\n    lifeExpectancy = Range.fromArray([90, 100]),\n    defaultAlignment = MoralAlignments.NEUTRAL_NEUTRAL,\n    heightRange = Range.fromArray([165, 185]),\n    heritageAttributes = [],\n    heritageSkills = [],\n    heritageStats = []\n  }: RaceSettings) {\n    super();\n\n    this.id = id;\n    this.name = name;\n    this.attributes = AttributeCollection.fromArray(heritageAttributes);\n    this.skills = SkillCollection.fromArray(heritageSkills);\n    this.stats = StatCollection.fromArray(heritageStats);\n    this.lifeExpectancy = lifeExpectancy;\n    this.defaultAlignment = defaultAlignment;\n    this.heightRange = heightRange;\n  }\n}","import { Skill } from './skill';\nimport { SkillThrowResult } from '../../dice/throws/skill-throw-result';\nimport Collection from '../../utils/collection/collection';\nimport assert from '../../utils/assert/assert';\n\nexport default class SkillCollection extends Collection<Skill> {\n  constructor() {\n    super('id');\n  }\n\n  add(...skills: Skill[]) {\n    skills.forEach(skill => this._bindSkillEvents.bind(this));\n    super.add(...skills);\n  }\n\n  remove(id: string): void {\n    this._unbindSkillEvents(id);\n    super.remove(id);\n  }\n\n  removeAll(): void {\n    this.getAll().forEach(skill => this.remove(skill.id));\n  }\n\n  useSkill(id: string): SkillThrowResult {\n    assert(this.contains(id), 'SkillCollection#useSkill: skill does not exist');\n\n    return (this.get(id) as Skill).use();\n  }\n\n  private _bindSkillEvents(skill: Skill): void {\n    skill.on('before:use', (...args) => {\n      this.emit('before:use:skill', ...args);\n      this.emit(`before:use:skill:${skill.id}`, ...args);\n    });\n\n    skill.on('use', (...args) => {\n      this.emit('use:skill', ...args);\n      this.emit(`use:skill:${skill.id}`, ...args);\n    });\n  }\n\n  private _unbindSkillEvents(id: string): void {\n    this.off(`before:use:skill:${id}`);\n    this.off(`use:skill:${id}`);\n  }\n\n  static fromArray(skills: Skill[]): SkillCollection {\n    const collection: SkillCollection = new SkillCollection();\n\n    collection.add(...skills);\n\n    return collection;\n  }\n}","import { Attribute } from '../attributes/attribute';\nimport Modifier from '../modifiers/modifier';\nimport IHasAttributes from '../attributes/has-attributes.i';\nimport AttributeCollection from '../attributes/attribute-collection';\nimport IHasModifiers from '../modifiers/has-modifiers.i';\nimport ModifierCollection from '../modifiers/modifier-collection';\nimport XethyaObject from '../../base/object';\nimport assert from '../../utils/assert/assert';\nimport SkillThrow from '../../dice/throws/skill-throw';\nimport { SkillThrowResult } from '../../dice/throws/skill-throw-result';\nimport { DiceThrowTypes } from '../../dice/throws/dice-throw';\nimport { ChanceThrow } from '../../dice/throws/chance-throw';\n\nexport type SkillSettings = {\n  id: string;\n  owner?: XethyaObject;\n  attributes?: Attribute[],\n  modifiers?: Modifier[],\n  primaryAttribute?: string | Attribute,\n}\n\nexport class Skill extends XethyaObject implements IHasAttributes, IHasModifiers {\n  attributes: AttributeCollection;\n  modifiers: ModifierCollection;\n  \n  protected _id: string;\n  protected _primaryAttribute?: Attribute;\n\n  constructor({\n    id,\n    owner = undefined,\n    attributes = [],\n    modifiers = [],\n    primaryAttribute = ''\n  }: SkillSettings) {\n    super();\n\n    this._id = id;\n    this.attributes = AttributeCollection.fromArray(attributes);\n    this.modifiers = ModifierCollection.fromArray(modifiers);\n\n    if (this.attributes.count > 0) {\n      this._setPrimaryAttribute(primaryAttribute);  \n    }\n  }\n\n  private _setPrimaryAttribute(primaryAttribute: string | Attribute) {\n    const isAttributeID = typeof primaryAttribute === 'string';\n    const attributeID: string = isAttributeID ? primaryAttribute as string : (primaryAttribute as Attribute).id;\n    \n    assert(this.attributes.contains(attributeID),\n      'Skill#constructor: primaryAttribute must be defined in attributes array');\n    \n    this._primaryAttribute = this.attributes.get(attributeID) as Attribute;\n  }\n\n  get primaryAttribute(): Attribute | undefined {\n    return this._primaryAttribute;\n  }\n\n  set primaryAttribute(newPrimaryAttribute: Attribute | undefined) {\n    this._primaryAttribute = newPrimaryAttribute;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get value() {\n    return (this._primaryAttribute as Attribute).value;\n  }\n\n  use(): SkillThrowResult {\n    this.emit('before:use', this);\n\n    const skillThrow = new SkillThrow(this);\n    const result = skillThrow.roll();\n\n    if (result.throwType === DiceThrowTypes.FAILURE) {\n      result.failureRoll = new ChanceThrow().roll();\n    }\n\n    this.emit('use', this);\n\n    return result;\n  }\n}","import Stat from './stat';\nimport Collection from '../../utils/collection/collection';\n\nexport default class StatCollection extends Collection<Stat> {\n  constructor() {\n    super('id');\n  }\n\n  add(...stats: Stat[]) {\n    stats.forEach(stat => this._bindStatEvents.bind(this));\n    super.add(...stats);\n  }\n\n  remove(id: string): void {\n    this._unbindStatEvents(id);\n    super.remove(id);\n  }\n  \n  removeAll(): void {\n    this.getAll().forEach(stat => this.remove(stat.id));    \n  }\n\n  // TODO: This event isn't working, probably to the weird\n  // nature of `stat.value` emitting an event if its value\n  // changes.\n  private _bindStatEvents(stat: Stat): void {\n    stat.on('change:value', (...args) => {\n      this.emit('change:stat:value', ...args);\n      this.emit(`change:stat:${stat.id}:value`, ...args);\n    });  \n  }\n\n  private _unbindStatEvents(id: string): void {\n    this.off(`change:stat:${id}:value`);\n  }\n\n  static fromArray(stats: Stat[]) : StatCollection {\n    const collection: StatCollection = new StatCollection();\n\n    collection.add(...stats);\n\n    return collection;\n  }\n}","import { Attribute } from '../attributes/attribute';\nimport AttributeCollection from '../attributes/attribute-collection';\nimport IHasAttributes from '../attributes/has-attributes.i';\nimport IStatCalculator from './stat-calculator.i';\n\nexport default class Stat extends Attribute implements IHasAttributes {\n  attributes: AttributeCollection;\n\n  private _calculateStat: IStatCalculator;\n  private _lastCalculatedValue: number = 0;\n\n  constructor(id: string, statCalculator: IStatCalculator) {\n    super({ id });\n\n    this.attributes = new AttributeCollection();\n\n    this.modifiers.remove('base');\n    this._calculateStat = statCalculator;\n\n    this.attributes.on('change:attribute:value', this._valueChanged.bind(this));\n  }\n\n  private _valueChanged(): void {\n    this.emit('change:value', {\n      previousValue: this._lastCalculatedValue,\n      newValue: this.value,\n    });\n  }\n\n  get value(): number {\n    const value = this._calculateStat(this);\n\n    if (this._lastCalculatedValue !== value) {\n      this.emit('change:value', {\n        previousValue: this._lastCalculatedValue,\n        newValue: value,\n      });\n      this._lastCalculatedValue = value;\n    }\n\n    return value;\n  } \n}","import XethyaObject from '../base/object';\n\nimport ITurn from './turn.i';\nimport IRound from './round.i';\nimport IEntity from '../entity/entity.i';\nimport ITurnSettings from './turn-settings.i';\nimport IRoundSettings from './round-settings.i';\n\nimport TurnResolver from './turn-resolver';\nimport IConstructableTurn from './constructable-turn.i';\nimport { ITurnEvent } from './turn-event.i';\n\nexport default abstract class AbstractRound extends XethyaObject implements IRound<ITurn> {\n  protected _roundNumber: number;\n  protected _turnType: ITurn;\n  protected _turns: ITurn[];\n  protected _entities: IEntity[];\n  protected _currentTurn?: ITurn;\n\n  constructor({ entities, roundNumber, turnType }: IRoundSettings) {\n    super();\n\n    this._roundNumber = roundNumber;\n    this._turnType = turnType;\n    this._entities = entities;\n\n    this._turns = [];\n  }\n\n  get roundNumber() {\n    return this._roundNumber;\n  }\n\n  get turnType() {\n    return this._turnType;\n  }\n\n  get entities() {\n    return this._entities;\n  }\n\n  get turns() {\n    return this._turns;\n  }\n\n  get currentTurn() {\n    return this._currentTurn;\n  }\n\n  buildTurns(): void {\n    this._entities.forEach((entity, index) => {\n      const turn = this.buildTurnFor(entity, index + 1);\n      this._turns.push(turn);\n    });\n  }\n\n  buildTurnFor(entity: IEntity, turnNumber: number): ITurn {\n    const turnBuilder = new TurnResolver<ITurn, ITurnSettings>(\n      this.turnType as IConstructableTurn<ITurn>\n    );\n    \n    const turn = turnBuilder.create({ owner: entity, turnNumber } as ITurnSettings);\n    \n    turn.on('begin', this.onTurnBegin.bind(this));\n    turn.on('end', this.onTurnEnd.bind(this));\n\n    return turn;\n  }\n\n  onTurnBegin({ turn }: ITurnEvent): void {\n    this.emit('turn', { turn });\n  }\n\n  onTurnEnd({ turn }: ITurnEvent): void {\n    this.updateTurn(turn);\n  }\n\n  begin(): void {\n    this.emit('before:begin', { round: this });\n\n    this.buildTurns();\n    this.announceTurn();\n\n    this.emit('begin', { round: this });\n  }\n  \n  announceTurn(): void {\n    const nextTurn: ITurn = this._turns.find(turn => !turn.isResolved()) as ITurn;\n    this._currentTurn = nextTurn;\n\n    nextTurn.begin();\n  }\n\n  updateTurn(turn: ITurn): void {\n    const previousTurnIndex = turn.turnNumber - 1;\n\n    this._turns[previousTurnIndex].action = turn.action;\n    this.checkIfRoundIsComplete();\n  }\n  \n  checkIfRoundIsComplete(): void {\n    if (this._turns.every(turn => turn.isResolved())) {\n      this.emit('complete', { round: this });\n    } else {\n      this.announceTurn();\n    }\n  }\n}","import { EventEmitter } from 'eventemitter3';\nimport IEntity from '../entity/entity.i';\nimport ITurn from './turn.i';\nimport ITurnSettings from './turn-settings.i';\nimport IAction from './action.i';\n\nexport default abstract class AbstractTurn extends EventEmitter implements ITurn {\n  protected readonly _turnNumber: number;\n  protected readonly _owner: IEntity;\n  protected _action?: IAction;\n  \n  constructor({ turnNumber, owner }: ITurnSettings) {\n    super();\n    \n    this._turnNumber = turnNumber;\n    this._owner = owner;\n  }\n\n  isResolved(): boolean {\n    return this._action !== null && this._action !== undefined;\n  }\n\n  get turnNumber() {\n    return this._turnNumber;\n  }\n\n  get owner() {\n    return this._owner;\n  }\n\n  get action() {\n    return this._action;\n  }\n\n  set action(newAction) {\n    this._action = newAction;\n  }\n\n  begin() {\n    this.emit('begin', { turn: this });\n  }\n\n  end() {\n    this.emit('end', { turn: this });\n  }\n\n  resolve(action: IAction): void {\n    this._action = action;\n  }\n}","import AbstractRound from './abstract-round';\n\nexport default class Round extends AbstractRound {}","import IConstructableTurn from './constructable-turn.i';\n\nexport default class TurnResolver<TurnType, TurnSettingsType> {\n  constructor(private constructorFunction: IConstructableTurn<TurnType>) {}\n\n  create(turnSettings: TurnSettingsType): TurnType {\n    return new this.constructorFunction(turnSettings);\n  }\n}","import AbstractTurn from './abstract-turn';\n\nexport default class Turn extends AbstractTurn {}","import IRandomAlgorithm from \"./random-algorithm.i\";\n\n/**\n * Default constant value for setting up the BBS PRNG.\n * P must be a prime number.\n *\n * @public\n * @type {Number}\n * @const P\n * @static\n */\nexport const P: number = 87566873;\n\n/**\n * Default constant value for setting up the BBS PRNG.\n * Q must be a prime number.\n *\n * @public\n * @const Q\n * @static\n * @type {Number}\n */\nexport const Q: number = 5631179;\n\n/**\n * A list of default seed values, tested to be evenly distributed.\n\n * @public\n * @const DefaultSeeds\n * @static\n * @type {Array.<Number>}\n * @see  http://wiki.fib.upc.es/sim/index.php/Blum_Blum_Shub#Tests\n */\nexport const DefaultSeeds: number[] = [193945, 740191, 191];\n\nexport type BlumBlumShubAlgorithmSettings = {\n  p?: number,\n  q?: number,\n  seedNumber?: number,\n};\n\n/**\n * Instantiates a Blum Blum Shub PRNG.\n *\n * @public\n * @class BlumBlumShubAlgorithm\n */\nexport class BlumBlumShubAlgorithm implements IRandomAlgorithm {\n  readonly seedNumber: number;\n  M: number;\n  P: number;\n  Q: number;\n  randomIndex: number;\n\n  /**\n   * Initializes the generator.\n   *\n   * @param  {Number} p    A prime value (defaults to P).\n   * @param  {Number} q    A prime value (defaults to Q).\n   * @param  {Number} seedNumber A seed number to feed the generator (defaults to any value\n   *                       in DefaultSeeds).\n   * @constructor\n   */\n  constructor(public settings?: BlumBlumShubAlgorithmSettings) {\n    const defaults = {\n      p: P,\n      q: Q,\n      seedNumber: null,\n    };\n\n    this.settings = Object.assign({}, defaults, settings);\n\n    let seedNumber: number = this.settings.seedNumber as number;\n    const p = this.settings.p as number;\n    const q = this.settings.q as number;\n\n    if (seedNumber) {\n      seedNumber = Math.abs(seedNumber);\n    } else {\n      seedNumber = DefaultSeeds[Math.floor(Math.random() * (DefaultSeeds.length))];\n    }\n\n    this.seedNumber = seedNumber;\n    this.randomIndex = seedNumber;\n    this.M = p * q;\n    this.P = p;\n    this.Q = q;\n  }\n\n  /**\n   * Determines if the generator works better by being reinstantiated after\n   * every generated number.\n   *\n   * @public\n   * @static\n   * @function recommendsToReinstantiate\n   * @memberof BlumBlumShubAlgorithm\n   * @return {Boolean}\n   */\n  static recommendsToReinstantiate() {\n    return true;\n  }\n\n  recommendsToReinstantiate() {\n    return BlumBlumShubAlgorithm.recommendsToReinstantiate();\n  }\n\n  /**\n   * Generates a pseudo-random number and updates the seed for a next roll.\n   * Number is always between 0 and 1.\n   *\n   * @public\n   * @function generateRandom\n   * @memberof BlumBlumShubAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandom() {\n    const r = this.randomIndex * this.randomIndex % this.M;\n    this.randomIndex = r;\n    return Math.abs(r / this.M);\n  }\n\n  /**\n   * Same as `generateRandom()`, but converts the number to an Integer.\n   *\n   * @public\n   * @function generateRandomInteger\n   * @memberof BlumBlumShubAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomInteger() {\n    return Number(this.generateRandom().toString().replace(/\\./, ''));\n  }\n}\n","import IRandomAlgorithm from \"./random-algorithm.i\";\nimport assert from '../utils/assert/assert';\n\n/**\n * @ignore\n */\nexport const N: number = 624;\n\n/**\n * @ignore\n */\nexport const M: number = 397;\n\n/**\n * @ignore\n */\nexport const MATRIX_A: number = 0x9908b0df;\n\n/**\n * @ignore\n */\nexport const UPPER_MASK: number = 0x80000000;\n\n/**\n * @ignore\n */\nexport const LOWER_MASK: number = 0x7fffffff;\n\n/**\n * @ignore\n */\nexport const INIT_BY_ARRAY_SEED: number = 19650218;\n\nexport type MersenneTwisterAlgorithmSettings = {\n  seedNumber?: number,\n};\n\nexport class MersenneTwisterAlgorithm implements IRandomAlgorithm {\n  seedNumber: number;\n  MT: number[];\n  MTI: number;\n\n  /**\n   * Instantiates the Mersenne-Twister generator.\n   *\n   * @param  {Object} settings - Configuration for the generator:\n   *         - seedNumber: The number for the seed.\n   */\n  constructor(public settings?: MersenneTwisterAlgorithmSettings) {\n    let seedNumber;\n\n    const defaults = {\n      seedNumber: undefined,\n    };\n\n    this.settings = Object.assign({}, defaults, settings);\n\n    const seed: number = this.settings.seedNumber as number;\n\n    if (seed) {\n      seedNumber = Math.abs(seed);\n    } else {\n      // Try seeding with a custom algorithm.\n      seedNumber = Number(new Date().getTime().toString().split('')\n        .sort(() => 0.5 - Math.random()).join(''));\n    }\n\n    this.MT = new Array(N);\n    this.MTI = N + 1;\n    this.seedNumber = seedNumber;\n\n    this.initializeRandomGenerator(seedNumber);\n  }\n\n  /**\n   * Determines if the generator works better by being reinstantiated after\n   * every generated number.\n   *\n   * @public\n   * @function recommendsToReinstantiate\n   * @memberof MersenneTwisterAlgorithm\n   * @static\n   * @return {Boolean}\n   */\n  static recommendsToReinstantiate() {\n    return false;\n  }\n\n  recommendsToReinstantiate() {\n    return MersenneTwisterAlgorithm.recommendsToReinstantiate();\n  }\n\n  /**\n   * Loads the initialization vector required for the algorithm,\n   * according to a given seed.\n   *\n   * @public\n   * @method initializeRandomGenerator\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @param  {Number} seedNumber - A seed can be any non-negative integer value.\n   */\n  initializeRandomGenerator(seedNumber: number) {\n    let seed = Math.abs(Math.floor(seedNumber));\n\n    this.MT[0] = seed >> 0;\n    for (this.MTI = 1; this.MTI < N; this.MTI += 1) {\n      seed = this.MT[this.MTI - 1] ^ (this.MT[this.MTI - 1] >> 30);\n      this.MT[this.MTI] = ((((seed & 0xffff0000) >> 16) * 1812433253) << 16)\n                        + ((seed & 0x0000ffff) * 1812433253)\n                        + this.MTI;\n      this.MT[this.MTI] = this.MT[this.MTI] >> 0;\n    }\n  }\n\n  /**\n   * An alternative way to load the initialization vector for the algorithm.\n   *\n   * @public\n   * @method initializeByArray\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @param  {Array.<Number>} initKeyArray - A list of non-negative integer values.\n   */\n  initializeByArray(initKeyArray: number[]) {\n    let i = 1;\n    let j = 0;\n    const keyLength = initKeyArray.length;\n\n    assert(keyLength > 0, 'MersenneTwister#initializeByArray: initKeyArray must be an Array of at least one non-negative number.');\n\n    // Ensure positive, integer values.\n    const initKey = initKeyArray.map(v => Math.abs(Math.floor(v)));\n\n    this.initializeRandomGenerator(INIT_BY_ARRAY_SEED);\n\n    let k = N > keyLength ? N : keyLength;\n\n    while (k > 0) {\n      const s = this.MT[i - 1] ^ (this.MT[i - 1] >> 30);\n      this.MT[i] = (this.MT[i] ^ (((((s & 0xffff0000) >> 16) * 1664525) << 16)\n        + ((s & 0x0000ffff) * 1664525)))\n        + initKey[j] + j;\n      this.MT[i] = this.MT[i] >> 0;\n      i += 1;\n      j += 1;\n      if (i >= N) {\n        this.MT[0] = this.MT[N - 1];\n        i = 1;\n      }\n      if (j >= keyLength) {\n        j = 0;\n      }\n      k -= 1;\n    }\n    for (k = N - 1; k > 0; k -= 1) {\n      const s = this.MT[i - 1] ^ (this.MT[i - 1] >> 30);\n      this.MT[i] = (this.MT[i] ^ (((((s & 0xffff0000) >> 16) * 1566083941) << 16)\n        + ((s & 0x0000ffff) * 1566083941))) - i;\n      this.MT[i] = this.MT[i] >> 0;\n      i += 1;\n      if (i >= N) {\n        this.MT[0] = this.MT[N - 1];\n        i = 1;\n      }\n    }\n    this.MT[0] = 0x80000000;\n  }\n\n  /**\n   * Returns a random non-negative integer value.\n   *\n   * @public\n   * @function generateRandomInteger\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomInteger() {\n    let y;\n    const mag01 = [0x0, MATRIX_A];\n\n    if (this.MTI >= N) {\n      let kk;\n      if (this.MTI === N + 1) {\n        this.initializeRandomGenerator(5489);\n      }\n      for (kk = 0; kk < N - M; kk += 1) {\n        y = (this.MT[kk] & UPPER_MASK) | (this.MT[kk + 1] & LOWER_MASK);\n        this.MT[kk] = this.MT[kk + M] ^ (y >> 1) ^ mag01[y & 0x1];\n      }\n      while (kk < N - 1) {\n        y = (this.MT[kk] & UPPER_MASK) | (this.MT[kk + 1] & LOWER_MASK);\n        this.MT[kk] = this.MT[kk + M - N] ^ (y >> 1) ^ mag01[y & 0x1];\n        kk += 1;\n      }\n      y = (this.MT[N - 1] & UPPER_MASK) | (this.MT[0] & LOWER_MASK);\n      this.MT[N - 1] = this.MT[M - 1] ^ (y >> 1) ^ mag01[y & 0x1];\n\n      this.MTI = 0;\n    }\n\n    this.MTI += 1;\n    y = this.MT[this.MTI];\n\n    y ^= (y >> 11);\n    y ^= (y << 7) & 0x9d2c5680;\n    y ^= (y << 15) & 0xefc60000;\n    y ^= (y >> 18);\n\n    return y >> 0;\n  }\n\n  /**\n   * Returns a non-negative random integer value, within\n   * the range of Int31.\n   *\n   * @public\n   * @function generateRandomInteger31\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomInteger31() {\n    return this.generateRandomInteger() >> 1;\n  }\n\n  /**\n   * Returns a non-negative random real number between 0 and 1.\n   *\n   * @public\n   * @function generateRandomReal\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomReal() {\n    return this.generateRandomInteger() * (1.0 / 4294967295.0);\n  }\n\n  /**\n   * Returns a non-negative random number between 0 and 1.\n   *\n   * @public\n   * @function generateRandom\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandom() {\n    return this.generateRandomInteger() * (1.0 / 4294967296.0);\n  }\n\n  /**\n   * Returns a non-negative random real number between 0 and 1.\n   *\n   * @public\n   * @function generateRandomReal3\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomReal3() {\n    return (this.generateRandomInteger() + 0.5) * (1.0 / 4294967296.0);\n  }\n\n  /**\n   * Returns a non-negative random rumber with a resolution\n   * of 53 bits.\n   *\n   * @public\n   * @function generateRandomReal53BitResolution\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomReal53BitResolution() {\n    const a = this.generateRandomInteger() >> 5;\n    const b = this.generateRandomInteger() >> 6;\n    return (a * 671084464.0 + b) * (1.0 / 9007199254740992.0);\n  }\n}","import IConstructableRandomAlgorithm from './constructable-random-algorithm.i';\n\nexport default class Randomizer<Algorithm> {\n  constructor(private constructorFunction: IConstructableRandomAlgorithm<Algorithm>) {}\n  \n  create(randomizerSettings: object): Algorithm {\n    return new this.constructorFunction(randomizerSettings);\n  }\n}","import IFaction from './faction.i';\nimport IFactionSettings from './faction-settings.i';\nimport IFactionRelationship from './faction-relationship.i';\nimport { FactionRelationshipStatus } from './faction-relationship-status';\nimport { groupAndMap } from '../utils/group-by/group-by';\nimport IGrouping from '../utils/group-by/grouping.i';\n\nexport default class AbstractFaction implements IFaction {\n  protected _id: string;\n  protected _name: string;\n  protected _allRelationships: IFactionRelationship[];\n  protected _relationshipsByStatus: IGrouping<IFaction>;\n\n  constructor({ id, name }: IFactionSettings) {\n    this._id = id;\n    this._name = name;\n    \n    this._allRelationships = [];\n    this._relationshipsByStatus = {}; \n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get allRelationships() {\n    return this._allRelationships;\n  }\n\n  set allRelationships(value) {\n    this._allRelationships = value;\n    this._relationshipsByStatus = this.groupRelationshipsByStatus();\n  }\n\n  get relationshipsByStatus() {\n    return this._relationshipsByStatus;\n  }\n\n  groupRelationshipsByStatus(): IGrouping<IFaction> {\n    return groupAndMap<IFactionRelationship, IFaction>(\n      this._allRelationships,\n      (relation) => relation.relationshipStatus,\n      (relation) => relation.faction\n    );\n  }\n\n  getAlliedFactions() {\n    return this._relationshipsByStatus[FactionRelationshipStatus.ALLY];\n  }\n\n  getNeutralFactions() {\n    return this._relationshipsByStatus[FactionRelationshipStatus.NEUTRAL];\n  }\n\n  getEnemyFactions() {\n    return this._relationshipsByStatus[FactionRelationshipStatus.ENEMY];\n  }\n\n  addRelationship(faction: IFaction, status: FactionRelationshipStatus): void {\n    const relationship: IFactionRelationship = {\n      faction,\n      relationshipStatus: status,\n    };\n\n    this._allRelationships.push(relationship);\n    this._relationshipsByStatus = this.groupRelationshipsByStatus();\n  }\n\n  addAlliedRelationship(faction: IFaction): void {\n    this.addRelationship(faction, FactionRelationshipStatus.ALLY);\n  }\n\n  addNeutralRelationship(faction: IFaction): void {\n    this.addRelationship(faction, FactionRelationshipStatus.NEUTRAL);\n  }\n\n  addEnemyRelationship(faction: IFaction): void {\n    this.addRelationship(faction, FactionRelationshipStatus.ENEMY);\n  }\n}","import AbstractFaction from './abstract-faction';\n\nexport default class Faction extends AbstractFaction {}","import AssertionError from './assertion-error';\n\nexport default function assert(condition: boolean, message: string) {\n  if (!condition) {\n    throw new AssertionError(message);\n  }\n}","export default class AssertionError extends Error {\n  constructor(message: string) {\n    super();\n    this.message = `[AssertionError] An assertion has failed${message ? (': ' + message) : ''}`;\n  }\n}\n","import IIndexedByString from './indexed-by-string.i';\nimport Eventable from '../../base/eventable';\nimport ICollection from './collection.i';\nimport IQuery from './query.i';\nimport assert from '../assert/assert';\n\nabstract class AbstractCollection<T extends {[index: string]: any}> extends Eventable implements ICollection<T> {\n  public indexName: string;\n  protected _list: IIndexedByString<T> = {};\n\n  constructor(indexName: string) {\n    super();\n\n    this.indexName = indexName;\n  }\n\n  get count(): number {\n    return Object.keys(this._list).length;\n  }\n\n  get(id: string): T | undefined {\n    return this._list[id];\n  }\n\n  getAll(): T[] {\n    return Object.keys(this._list).map((id: string) => this._list[id]);\n  }\n\n  where(condition: IQuery<T>): T[] {\n    return this.getAll().filter(condition);\n  }\n\n  contains(id: string): boolean {\n    return id in this._list;\n  }\n\n  add(...items: T[]): void {\n    this.emit('before:add', this, ...items);\n\n    items.forEach((item: T) => {\n      const index = item[this.indexName];\n      assert(!this.contains(index), `An item already exists with key: ${index}`);\n\n      this._list[index] = item;\n    });\n\n    this.emit('add', this);\n  }\n\n  remove(id: string): void {\n    if (this.contains(id)) {\n      this.emit('before:remove', this);\n\n      delete this._list[id];\n\n      this.emit('remove');\n    }\n  }\n\n  removeAll(): void {\n    this.emit('before:removeAll', this);\n\n    this._list = {};\n\n    this.emit('removeAll', this);\n  }\n}\n\nexport default AbstractCollection;","import AbstractCollection from './abstract-collection';\n\nexport default class Collection<T> extends AbstractCollection<T> {\n  constructor(public indexName: string) {\n    super(indexName);\n  }\n\n  static fromArrayOf<T>(items: T[], indexName: string) {\n    const collection: Collection<T> = new Collection<T>(indexName);\n    \n    collection.add(...items);\n    \n    return collection;\n  }  \n}","import IIndexedByString from '../collection/indexed-by-string.i';\nimport IGroupCriteria from './group-criteria.i';\nimport IGrouping from './grouping.i';\nimport ITransform from './transform.i';\n\nexport function group<T>(\n  array: T[], \n  criteria: IGroupCriteria<T>,\n): IGrouping<T> {\n  const result: IGrouping<T> = {};\n\n  array.forEach((item) => {\n    const grouping = criteria(item);\n    if (!(grouping in result)) {\n      result[grouping] = [item];\n    } else {\n      result[grouping].push(item);\n    }\n  });\n\n  return result;\n}\n\nexport function groupAndMap<T, R>(\n  array: T[], \n  criteria: IGroupCriteria<T>,\n  transform: ITransform<T, R>,\n): IGrouping<R> {\n  const result: IGrouping<R> = {};\n\n  array.forEach((item) => {\n    const grouping = criteria(item);\n    if (!(grouping in result)) {\n      result[grouping] = [transform(item)];\n    } else {\n      result[grouping].push(transform(item));\n    }\n  });\n\n  return result;\n}","import assert from '../assert/assert';\n\nexport default class Range {\n  lowerBound: number;\n  upperBound: number;\n\n  constructor(lowerBound: number, upperBound: number) {\n    assert(lowerBound !== upperBound, 'Range#constructor: lowerBound and upperBound cannot be equal');\n    \n    this.lowerBound = Math.min(lowerBound, upperBound);\n    this.upperBound = Math.max(lowerBound, upperBound);    \n  }\n\n  /**\n   * Checks if a value is in the defined range.\n   *\n   * @public\n   * @function\n   * @param  {Number} value - Value to compare.\n   * @return {Boolean} true if in range, false otherwise.\n   */\n  includes(value: number): boolean {\n    return this.lowerBound <= value && value <= this.upperBound;\n  }  \n\n  /**\n   * Converts the Range object to a string representation.\n   * \n   * @public\n   * @function\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.lowerBound.toString()} ~ ${this.upperBound.toString()}`;\n  }\n\n  /**\n   * Creates a Range from an array of two numbers.\n   *\n   * @public\n   * @static\n   * @function\n   * @param  {Array.<Number>} values - Boundaries of the range.\n   * @return {Range}\n   */\n  static fromArray(values: number[]): Range {\n    const errorMessage = 'Range#fromArray: values must be an Array of 2 numerical elements';\n\n    assert(values.length === 2, errorMessage);\n\n    return new Range(values[0], values[1]);\n  }\n\n  /**\n   * Creates a Range from a string-based notation.\n   *\n   * @public\n   * @static\n   * @function\n   * @param  {String} notedRange - A string representation of a Range,\n   *                  using delimiters. Accepted formats: x,y x;y x:y x~y.\n   * @return {Range}\n   */\n  static fromNotation(notedRange: string): Range | undefined {\n    const errorMessage = 'Range#fromNotation: notedRange must use one of these formats: x,y x;y x:y x~y';\n\n    assert(notedRange !== undefined, errorMessage);\n    assert(typeof notedRange === 'string', errorMessage);\n\n    let range: Range | undefined;\n    const allowedDelimiters: string[] = [',', ';', ':', '~'];\n\n    assert(allowedDelimiters.some(delimiter => notedRange.includes(delimiter)), errorMessage);\n\n    let delimiterFound = false;\n\n    while (!delimiterFound) {\n      const delimiter: string = allowedDelimiters.shift() as string;\n\n      delimiterFound = notedRange.includes(delimiter);\n\n      if (delimiterFound) {\n        const data = notedRange.split(delimiter).map(d => d.trim());\n\n        assert(data.length === 2, errorMessage);\n\n        range = Range.fromArray(data.map(d => Number(d)));\n      }\n    }\n\n    return range;\n  }  \n}\n","import Eventable from './base/eventable';\nimport XethyaObject from './base/object';\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Base\n */\nexport {\n  Eventable,\n  XethyaObject,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Utils\n */\nimport assert from './utils/assert/assert';\n\nimport Range from './utils/range/range';\nimport IRangeable from './utils/range/rangeable.i';\n\nimport Constructable from './utils/constructable.t';\n\nimport IQuery from './utils/collection/query.i';\nimport IIndexedByString from './utils/collection/indexed-by-string.i';\nimport ICollection from './utils/collection/collection.i';\nimport AbstractCollection from './utils/collection/abstract-collection';\nimport Collection from './utils/collection/collection';\n\nimport IGrouping from './utils/group-by/grouping.i';\nimport ITransform from './utils/group-by/transform.i';\nimport IGroupCriteria from './utils/group-by/group-criteria.i';\nimport { group, groupAndMap } from './utils/group-by/group-by';\n\nexport {\n  assert,\n\n  Range,\n  IRangeable,\n\n  Constructable,\n\n  IQuery,\n  IIndexedByString,\n  ICollection,\n  AbstractCollection,\n  Collection,\n\n  IGrouping,\n  IGroupCriteria,\n  ITransform,\n  group,\n  groupAndMap,\n} \n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Random\n */ \n\nimport * as BlumBlumShub from './random/blum-blum-shub';\nimport * as MersenneTwister from './random/mersenne-twister';\nimport IConstructableRandomAlgorithm from './random/constructable-random-algorithm.i';\nimport IRandomAlgorithm from './random/random-algorithm.i';\nimport IRandomSettings from './random/random-settings.i';\nimport Randomizer from './random/randomizer';\n\nexport {\n  BlumBlumShub,\n  MersenneTwister,\n\n  Randomizer,\n  IRandomAlgorithm,\n  IRandomSettings,\n  IConstructableRandomAlgorithm,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Dice\n */\n\nimport { Dice, IDiceSettings } from './dice/dice';\n\nimport { IDiceThrowSettings, DiceThrowTypes, DiceThrow } from './dice/throws/dice-throw';\nimport DiceThrowResult from './dice/throws/dice-throw-result';\nimport { IChanceThrowSettings, ChanceThrow } from './dice/throws/chance-throw';\nimport ChanceThrowResult from './dice/throws/chance-throw-result';\nimport SkillThrow from './dice/throws/skill-throw';\nimport { SkillThrowResult, SkillThrowResultSettings }from './dice/throws/skill-throw-result';\nimport IRollScoreSettings from './dice/throws/roll-score-settings.i';\n\nimport { CoinFlip, CoinFlipSides } from './dice/presets/coin-flip';\n\nexport {\n  Dice,\n  IDiceSettings,\n\n  IDiceThrowSettings,\n  DiceThrowTypes,\n  DiceThrow,\n  IChanceThrowSettings,\n  ChanceThrow,\n  ChanceThrowResult,\n  SkillThrow,\n  SkillThrowResult,\n  SkillThrowResultSettings,\n  IRollScoreSettings,\n\n  CoinFlipSides,\n  CoinFlip,\n}\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Entity\n */\n\nimport { AbstractEntity, IEntitySettings, MoralAlignments } from './entity/abstract-entity';\nimport Entity from './entity/entity';\nimport IEntity from './entity/entity.i';\nimport { AbleEntity, IAbleEntitySettings } from './entity/able-entity';\nimport { LivingEntity, ILivingEntitySettings } from './entity/living-entity';\nimport { Race, RaceSettings } from './entity/race/race';\n\nexport {\n  IEntitySettings,\n  IEntity,\n  AbstractEntity,\n  Entity,\n  IAbleEntitySettings,\n  AbleEntity,\n  ILivingEntitySettings,\n  LivingEntity,\n  MoralAlignments,\n  RaceSettings,\n  Race,\n}\n\n/**\n * @namespace Modifiers\n */\n\nimport Modifier from './entity/modifiers/modifier';\nimport BaseModifier from './entity/modifiers/base-modifier';\nimport { BaseModifierCalculator, IBaseModifierCalculator } from './entity/modifiers/base-modifier-calculator';\nimport ModifierCollection from './entity/modifiers/modifier-collection';\nimport IHasModifiers from './entity/modifiers/has-modifiers.i';\n\nexport {\n  Modifier,\n  IBaseModifierCalculator,\n  BaseModifierCalculator,\n  BaseModifier,\n  ModifierCollection,\n  IHasModifiers,\n}\n\n/**\n * @namespace Attributes\n */\n\nimport { Attribute, AttributeSettings } from './entity/attributes/attribute';\nimport AttributeCollection from './entity/attributes/attribute-collection';\nimport IHasAttributes from './entity/attributes/has-attributes.i';\n\nexport {\n  AttributeSettings,\n  Attribute,\n  AttributeCollection,\n  IHasAttributes,\n};\n\n/**\n * @namespace Stats\n */\n\nimport IStatCalculator from './entity/stats/stat-calculator.i';\nimport Stat from './entity/stats/stat';\nimport StatCollection from './entity/stats/stat-collection';\nimport IHasStats from './entity/stats/has-stats.i';\n\nexport {\n  IStatCalculator,\n  Stat,\n  StatCollection,\n  IHasStats,\n};\n\n/**\n * @namespace Skills\n */\n\nimport { Skill, SkillSettings } from './entity/skills/skill';\nimport SkillCollection from './entity/skills/skill-collection';\nimport IHasSkills from './entity/skills/has-skills.i';\n\nexport {\n  Skill,\n  SkillSettings,\n  SkillCollection,\n  IHasSkills,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Relationships\n */\n\nimport IFaction from './relationships/faction.i';\nimport IFactionSettings from './relationships/faction-settings.i';\nimport AbstractFaction from './relationships/abstract-faction';\nimport Faction from './relationships/faction';\nimport IFactionRelationship from './relationships/faction-relationship.i';\nimport { FactionRelationshipStatus } from './relationships/faction-relationship-status';\n\nexport {\n  IFaction,\n  IFactionSettings,\n  AbstractFaction,\n  Faction,\n  FactionRelationshipStatus,\n  IFactionRelationship,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Interaction\n */\n\n/**\n * @namespace Turn\n */\n\nimport IAction from './interaction/action.i';\nimport ITurnSettings from './interaction/turn-settings.i';\nimport ITurn from './interaction/turn.i';\nimport { TurnEvent, ITurnEvent } from './interaction/turn-event.i';\nimport IConstructableTurn from './interaction/constructable-turn.i';\nimport TurnResolver from './interaction/turn-resolver';\nimport AbstractTurn from './interaction/abstract-turn';\nimport Turn from './interaction/turn';\n\nexport {\n  IAction,\n  ITurnSettings,\n  ITurn,\n  TurnEvent,\n  ITurnEvent,\n  IConstructableTurn,\n  TurnResolver,\n  AbstractTurn,\n  Turn,\n};\n\n/**\n * @namespace Round\n */\n\nimport IRound from './interaction/round.i';\nimport IRoundSettings from './interaction/round-settings.i';\nimport { RoundEvent, IRoundEvent } from './interaction/round-event.i';\nimport AbstractRound from './interaction/abstract-round';\nimport Round from './interaction/round';\n\nexport {\n  IRound,\n  IRoundSettings,\n  RoundEvent,\n  IRoundEvent,\n  AbstractRound,\n  Round,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Combat\n */\n\nimport ICombatTurn from './combat/combat-turn.i';\nimport ICombatTurnSettings from './combat/combat-turn-settings.i';\nimport CombatTurn from './combat/combat-turn';\nimport IConstructableCombatTurn from './combat/constructable-combat-turn.i';\nimport ICombatRound from './combat/combat-round.i';\nimport ICombatRoundSettings from './combat/combat-round-settings.i';\nimport ICombatValidator from './combat/combat-validator.i';\nimport CombatRound from './combat/combat-round';\nimport ICombatSimulation from './combat/combat-simulation.i';\nimport ICombatSimulationSettings from './combat/combat-simulation-settings.i';\nimport ICombatSimulationResult from './combat/combat-simulation-result.i';\nimport ICombatFinalizationSettings from './combat/combat-finalization-settings.i';\nimport AbstractCombatSimulation from './combat/abstract-combat-simulation';\nimport CombatSimulation from './combat/combat-simulation';\n\nexport {\n  ICombatTurn,\n  ICombatTurnSettings,\n  CombatTurn,\n  IConstructableCombatTurn,\n\n  ICombatRound,\n  ICombatRoundSettings,\n  ICombatValidator,\n  CombatRound,\n\n  ICombatSimulation,\n  ICombatSimulationSettings,\n  ICombatSimulationResult,\n  ICombatFinalizationSettings,\n  AbstractCombatSimulation,\n  CombatSimulation,\n};"],"sourceRoot":""}