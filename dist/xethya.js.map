{"version":3,"sources":["webpack://Xethya/webpack/universalModuleDefinition","webpack://Xethya/webpack/bootstrap","webpack://Xethya/./node_modules/eventemitter3/index.js","webpack://Xethya/./src/base/eventable.ts","webpack://Xethya/./src/base/object.ts","webpack://Xethya/./src/combat/abstract-combat-simulation.ts","webpack://Xethya/./src/combat/combat-round.ts","webpack://Xethya/./src/combat/combat-simulation.ts","webpack://Xethya/./src/combat/combat-turn.ts","webpack://Xethya/./src/dice/dice.ts","webpack://Xethya/./src/dice/presets/coin-flip.ts","webpack://Xethya/./src/dice/throws/chance-throw-result.ts","webpack://Xethya/./src/dice/throws/chance-throw.ts","webpack://Xethya/./src/dice/throws/dice-throw-result.ts","webpack://Xethya/./src/dice/throws/dice-throw.ts","webpack://Xethya/./src/dice/throws/skill-throw-result.ts","webpack://Xethya/./src/dice/throws/skill-throw.ts","webpack://Xethya/./src/entity/able-entity.ts","webpack://Xethya/./src/entity/abstract-entity.ts","webpack://Xethya/./src/entity/attributes/attribute-collection.ts","webpack://Xethya/./src/entity/attributes/attribute.ts","webpack://Xethya/./src/entity/entity.ts","webpack://Xethya/./src/entity/living-entity.ts","webpack://Xethya/./src/entity/modifiers/base-modifier-calculator.ts","webpack://Xethya/./src/entity/modifiers/base-modifier.ts","webpack://Xethya/./src/entity/modifiers/modifier-collection.ts","webpack://Xethya/./src/entity/modifiers/modifier.ts","webpack://Xethya/./src/entity/race/race.ts","webpack://Xethya/./src/entity/skills/skill-collection.ts","webpack://Xethya/./src/entity/skills/skill.ts","webpack://Xethya/./src/entity/stats/stat-collection.ts","webpack://Xethya/./src/entity/stats/stat.ts","webpack://Xethya/./src/interaction/abstract-round.ts","webpack://Xethya/./src/interaction/abstract-turn.ts","webpack://Xethya/./src/interaction/round.ts","webpack://Xethya/./src/interaction/turn-resolver.ts","webpack://Xethya/./src/interaction/turn.ts","webpack://Xethya/./src/random/blum-blum-shub.ts","webpack://Xethya/./src/random/mersenne-twister.ts","webpack://Xethya/./src/random/randomizer.ts","webpack://Xethya/./src/relationships/abstract-faction.ts","webpack://Xethya/./src/relationships/faction.ts","webpack://Xethya/./src/utils/assert/assert.ts","webpack://Xethya/./src/utils/assert/assertion-error.ts","webpack://Xethya/./src/utils/collection/abstract-collection.ts","webpack://Xethya/./src/utils/collection/collection.ts","webpack://Xethya/./src/utils/group-by/group-by.ts","webpack://Xethya/./src/utils/range/range.ts","webpack://Xethya/./src/utils/shuffle/shuffle.ts","webpack://Xethya/./src/xethya.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","has","prefix","Events","addListener","emitter","event","fn","context","once","TypeError","listener","evt","_events","push","_eventsCount","clearEvent","EventEmitter","create","__proto__","eventNames","events","names","slice","getOwnPropertySymbols","concat","listeners","handlers","length","ee","Array","listenerCount","emit","a1","a2","a3","a4","a5","args","len","arguments","removeListener","undefined","apply","j","on","removeAllListeners","off","prefixed","eventemitter3_1","default","[object Object]","super","eventable_1","__importDefault","object_1","combat_turn_1","combat_round_1","entities","roundRequestValidator","turnResolver","challengeResolver","_ended","_entities","_rounds","_turnResolver","_challengeResolver","_roundRequestValidator","rounds","ended","currentRound","_currentRound","challenge","beginRound","end","avoided","round","roundNumber","turnType","onBeforeRoundBegin","bind","onRoundBegin","onRoundComplete","onRoundTurn","applyRoundResults","turn","canCombat","createRound","begin","results","calculateResults","round_1","group_by_1","_turnType","_turns","_entitiesByFaction","group","entity","faction","id","turns","currentTurn","_currentTurn","turnNumber","buildTurnFor","validFoes","getValidFoesFor","foes","enemies","getEnemyFactions","neutrals","getNeutralFactions","forEach","abstract_combat_simulation_1","turn_1","settings","_validFoes","newValue","randomizer_1","blum_blum_shub_1","assert_1","Dice","faces","randomStrategy","BlumBlumShubAlgorithm","randomStrategySettings","_faces","setRandomStrategy","_mustPreservePrng","recommendsToReinstantiate","_initializeRandomizer","_randomizer","random","generateRandom","result","Math","ceil","_regenerateRandomStrategyIfNeeded","_randomStrategy","_randomStrategySettings","roll","dice_1","CoinFlip","dice_throw_result_1","throwResult","rolls","throwType","_throwType","range_1","dice_throw_1","chance_throw_result_1","ChanceThrow","DiceThrow","numberOfDices","maxNumber","seedNumber","Number","toString","replace","defaults","rollScores","failure","success","criticalSuccess","assign","key","rollSum","keys","_range","includes","diceThrow","ctr","getRollSum","_calculateThrowType","reduce","dices","dtr","map","SkillThrowResult","skillValue","skillAttributesModifierValue","_skillValue","_skillAttributeModifiersValue","skillAttributeModifiersValue","totalRollValue","failureRoll","_failureRoll","chance_throw_1","skill_throw_result_1","skill","_skill","modifiers","getSum","entity_1","skill_collection_1","AbleEntity","_skills","fromArray","skills","attribute_collection_1","modifier_collection_1","AbstractEntity","volatile","attributes","_id","_name","_volatile","_attributes","_modifiers","newName","collection_1","AttributeCollection","_bindAttributeEvents","add","_unbindAttributeEvents","remove","getAll","attribute","contains","rawValue","count","leftSum","rightSum","collection","base_modifier_1","Attribute","initialValue","valueRange","_rawValue","_valueRange","_updateBaseModifierValue","setValue","newId","range","previousValue","baseModifierValue","modifierSum","sign","abstract_entity_1","able_entity_1","modifier_1","stat_collection_1","LivingEntity","_race","race","_age","age","_weight","weight","_height","height","_faction","_stats","stats","_applyRacialTraits","_applyRaceAttributes","_applyRaceStats","_applyRaceSkills","raceTrait","stat","BaseModifierCalculator","floor","base_modifier_calculator_1","calculationMethod","_calculateValue","ModifierCollection","_bindModifierEvents","_unbindModifierEvents","modifier","active","where","leftValue","rightValue","source","_value","_active","_source","newSource","Race","lifeExpectancy","defaultAlignment","heightRange","heritageAttributes","heritageSkills","heritageStats","SkillCollection","_bindSkillEvents","_unbindSkillEvents","use","skill_throw_1","Skill","owner","primaryAttribute","_setPrimaryAttribute","attributeID","_primaryAttribute","newPrimaryAttribute","StatCollection","_bindStatEvents","_unbindStatEvents","attribute_1","statCalculator","_lastCalculatedValue","_calculateStat","_valueChanged","turn_resolver_1","_roundNumber","index","onTurnBegin","onTurnEnd","updateTurn","buildTurns","announceTurn","nextTurn","find","isResolved","previousTurnIndex","action","checkIfRoundIsComplete","every","_turnNumber","_owner","_action","newAction","abstract_round_1","constructorFunction","turnSettings","abstract_turn_1","P","Q","DefaultSeeds","q","abs","randomIndex","M","N","MATRIX_A","UPPER_MASK","LOWER_MASK","INIT_BY_ARRAY_SEED","MersenneTwisterAlgorithm","seed","Date","getTime","split","sort","join","MT","MTI","initializeRandomGenerator","initKeyArray","keyLength","initKey","v","k","y","mag01","kk","generateRandomInteger","randomizerSettings","_allRelationships","_relationshipsByStatus","allRelationships","groupRelationshipsByStatus","relationshipsByStatus","groupAndMap","relation","relationshipStatus","status","relationship","addRelationship","abstract_faction_1","assertion_error_1","condition","message","Error","indexName","_list","getAllKeys","filter","items","item","abstract_collection_1","Collection","array","criteria","grouping","transform","Range","lowerBound","upperBound","min","max","values","notedRange","errorMessage","allowedDelimiters","some","delimiter","delimiterFound","shift","data","trim","shuffleArray","list","randomizer","element","shuffleIndex","leftElement","rightElement","shuffledElement","shuffleCollection","shuffledCollection","Base","Eventable","XethyaObject","shuffle_1","Utils","assert","AbstractCollection","Random","BlumBlumShub","__importStar","MersenneTwister","Randomizer","coin_flip_1","Dices","ChanceThrowResult","SkillThrow","Presets","living_entity_1","race_1","stat_1","skill_1","Entities","Entity","Modifier","BaseModifier","Stat","faction_1","Relationships","Factions","AbstractFaction","Faction","combat_simulation_1","Interactions","TurnResolver","AbstractTurn","Turn","AbstractRound","Round","Combat","CombatTurn","CombatRound","AbstractCombatSimulation","CombatSimulation"],"mappings":"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","file":"xethya.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Xethya\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Xethya\"] = factory();\n\telse\n\t\troot[\"Xethya\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/xethya.ts\");\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import { EventEmitter } from 'eventemitter3';\r\n\r\nexport default class Eventable extends EventEmitter {\r\n  constructor() {\r\n    super();\r\n  }\r\n}","import Eventable from './eventable';\r\n\r\nclass XethyaObject extends Eventable {\r\n  constructor() {\r\n    super();\r\n  }\r\n}\r\n\r\nexport default XethyaObject;","import XethyaObject from '../base/object';\r\nimport ICombatSimulation from './combat-simulation.i';\r\nimport IFactionMemberEntity from '../entity/faction-member-entity.i';\r\nimport ICombatSimulationSettings from './combat-simulation-settings.i';\r\nimport ICombatValidator from './combat-validator.i';\r\nimport ICombatTurn from './combat-turn.i';\r\nimport ICombatRound from './combat-round.i';\r\nimport CombatTurn from './combat-turn';\r\nimport IGrouping from '../utils/group-by/grouping.i';\r\nimport { group } from '../utils/group-by/group-by';\r\nimport CombatRound from './combat-round';\r\nimport { IRoundEvent } from '../interaction/round-event.i';\r\nimport { ITurnEvent } from '../interaction/turn-event.i';\r\nimport ICombatFinalizationSettings from './combat-finalization-settings.i';\r\nimport ICombatSimulationResult from './combat-simulation-result.i';\r\n\r\nexport default abstract class AbstractCombatSimulation extends XethyaObject implements ICombatSimulation {\r\n  protected readonly _entities: IFactionMemberEntity[];\r\n  protected readonly _turnResolver: ICombatTurn;\r\n  protected readonly _challengeResolver: ICombatValidator;\r\n  protected readonly _roundRequestValidator: ICombatValidator;\r\n\r\n  protected _currentRound?: ICombatRound;\r\n  protected _rounds: ICombatRound[];\r\n  protected _ended: boolean = false;\r\n\r\n  constructor({\r\n    entities,\r\n    roundRequestValidator,\r\n    turnResolver = CombatTurn,\r\n    challengeResolver = () => true,\r\n  }: ICombatSimulationSettings) {\r\n    super();\r\n\r\n    this._entities = entities;\r\n    this._rounds = [];\r\n    this._turnResolver = turnResolver as ICombatTurn;\r\n    this._challengeResolver = challengeResolver;\r\n    this._roundRequestValidator = roundRequestValidator;\r\n  }\r\n\r\n  get entities() {\r\n    return this._entities;\r\n  }\r\n\r\n  get turnResolver() {\r\n    return this._turnResolver;\r\n  }\r\n\r\n  get challengeResolver() {\r\n    return this._challengeResolver;\r\n  }\r\n\r\n  get roundRequestValidator() {\r\n    return this._roundRequestValidator;\r\n  }\r\n\r\n  get rounds() {\r\n    return this._rounds;\r\n  }\r\n\r\n  get ended() {\r\n    return this._ended;\r\n  }\r\n\r\n  get currentRound() {\r\n    return this._currentRound;\r\n  }\r\n\r\n  challenge(): boolean {\r\n    return this.challengeResolver.call(null, this);\r\n  }\r\n\r\n  begin(): void {\r\n    if (!this.challenge()) {\r\n      this.end({ avoided: true });\r\n      return;\r\n    }\r\n\r\n    if (this._ended) {\r\n      return;\r\n    }\r\n\r\n    this.emit('before:combat');\r\n    this.beginRound();\r\n  }\r\n\r\n  canCombat(): boolean {\r\n    return this.roundRequestValidator.call(null, this);\r\n  }\r\n\r\n  createRound(): ICombatRound {\r\n    const round = new CombatRound({\r\n      entities: this._entities,\r\n      roundNumber: this._rounds.length + 1,\r\n      turnType: this.turnResolver,\r\n    });\r\n\r\n    round.on('before:begin', this.onBeforeRoundBegin.bind(this));\r\n    round.on('begin', this.onRoundBegin.bind(this));\r\n    round.on('complete', this.onRoundComplete.bind(this));\r\n    round.on('turn', this.onRoundTurn.bind(this));\r\n\r\n    return round;\r\n  }\r\n\r\n  onBeforeRoundBegin({ round }: IRoundEvent<ICombatRound>): void {\r\n    this.emit('before:begin:round', { round });\r\n  }\r\n\r\n  onRoundBegin({ round }: IRoundEvent<ICombatRound>): void {\r\n    this.emit('begin:round', { round });\r\n  }\r\n\r\n  onRoundComplete({ round }: IRoundEvent<ICombatRound>): void {\r\n    this.emit('after:round', { round });\r\n    this.applyRoundResults(round);\r\n  }\r\n\r\n  onRoundTurn({ turn }: ITurnEvent<ICombatTurn>): void {\r\n    this.emit('turn:round', { turn });\r\n  }\r\n  \r\n  applyRoundResults(round: ICombatRound): void {\r\n    this._rounds.push(round);\r\n    this.beginRound();\r\n  }\r\n\r\n  beginRound(): void {\r\n    if (!this.canCombat()) {\r\n      this.end();\r\n      return;\r\n    }\r\n\r\n    const round: ICombatRound = this.createRound();\r\n\r\n    round.begin();\r\n\r\n    this._currentRound = round;\r\n  }\r\n\r\n  calculateResults(): ICombatSimulationResult {\r\n    return {\r\n      avoided: false,\r\n    };\r\n  }\r\n\r\n  end(context?: ICombatFinalizationSettings): ICombatSimulationResult | undefined {\r\n    this._ended = true;\r\n\r\n    if (context && context.avoided) {\r\n      this.emit('end', { avoided: context.avoided });\r\n      return;\r\n    }\r\n\r\n    const results = this.calculateResults();\r\n\r\n    this.emit('end', { results });\r\n\r\n    return results;\r\n  }\r\n}","import ICombatTurn from './combat-turn.i';\r\nimport IRound from '../interaction/round.i';\r\nimport IEntity from '../entity/entity.i';\r\nimport IFactionMemberEntity from '../entity/faction-member-entity.i';\r\nimport ICombatRoundSettings from './combat-round-settings.i';\r\nimport CombatTurn from './combat-turn';\r\nimport ICombatRound from './combat-round.i';\r\nimport Round from '../interaction/round';\r\nimport IFaction from '../relationships/faction.i';\r\nimport IGrouping from '../utils/group-by/grouping.i';\r\nimport { group } from '../utils/group-by/group-by';\r\n\r\nexport default class CombatRound extends Round implements ICombatRound<ICombatTurn, IFactionMemberEntity> {\r\n  protected _turnType: ICombatTurn;\r\n  protected _turns: ICombatTurn[];\r\n  protected _entities: IFactionMemberEntity[];\r\n  protected _entitiesByFaction: IGrouping<IFactionMemberEntity>;\r\n  protected _currentTurn?: ICombatTurn;\r\n\r\n  constructor({ entities, roundNumber, turnType }: ICombatRoundSettings) {\r\n    super({ entities, roundNumber, turnType });\r\n\r\n    this._turnType = turnType;\r\n    this._entities = entities;\r\n    this._turns = [];\r\n\r\n    this._entitiesByFaction = group<IFactionMemberEntity>(\r\n      entities,\r\n      (entity) => entity.faction.id\r\n    );\r\n  }\r\n\r\n  get turnType() {\r\n    return this._turnType;\r\n  }\r\n\r\n  get turns() {\r\n    return this._turns;\r\n  }\r\n\r\n  get entities() {\r\n    return this._entities;\r\n  }\r\n\r\n  get currentTurn() {\r\n    return this._currentTurn;\r\n  }\r\n\r\n  buildTurnFor(entity: IFactionMemberEntity, turnNumber: number): CombatTurn {\r\n    const turn = super.buildTurnFor(entity, turnNumber) as CombatTurn;\r\n\r\n    turn.validFoes = this.getValidFoesFor(entity);\r\n\r\n    return turn;\r\n  }\r\n\r\n  getValidFoesFor(entity: IFactionMemberEntity): IFactionMemberEntity[] {\r\n    const foes: IFactionMemberEntity[] = [];\r\n\r\n    const { faction } = entity;\r\n    const enemies: IFaction[] = faction.getEnemyFactions() || [];\r\n    const neutrals: IFaction[] = faction.getNeutralFactions() || [];\r\n    const factions: IFaction[] = enemies.concat(neutrals);\r\n\r\n    factions.forEach((faction) => {\r\n      foes.push(...this._entitiesByFaction[faction.id]);\r\n    });\r\n\r\n    return foes;\r\n  }\r\n}","import AbstractCombatSimulation from './abstract-combat-simulation';\r\n\r\nexport default class CombatSimulation extends AbstractCombatSimulation {};","import Turn from '../interaction/turn';\r\nimport ICombatTurn from './combat-turn.i';\r\nimport IFactionMemberEntity from '../entity/faction-member-entity.i';\r\nimport ICombatTurnSettings from './combat-turn-settings.i';\r\n\r\nexport default class CombatTurn extends Turn implements ICombatTurn {\r\n  protected _validFoes: IFactionMemberEntity[];\r\n\r\n  constructor(settings: ICombatTurnSettings) {\r\n    super(settings);\r\n\r\n    this._validFoes = settings.validFoes || [];  \r\n  }\r\n\r\n  get validFoes() {\r\n    return this._validFoes;\r\n  }\r\n\r\n  set validFoes(newValue) {\r\n    this._validFoes = newValue;\r\n  }\r\n}","/**\n * The core class of the package. The Dice class allows to configure a single,\n * positive, integer random throw.\n *\n * By default, the chance throw uses the Blum Blum Shub algorithm contained in\n * `xethya-extension-random-bbs`, which provides a randomizer with an equal chance\n * of rolling numbers in all of the range.\n *\n * You can use the `xethya-extension-random-mtw` package to use the chance throw\n * with the Mersenne-Twister algorithm, which provides an average distribution\n * of 65-35-0 (you'll never get numbers larger than 66).\n *\n * @example\n * ```js\n * // Roll a single d6.\n * const d6 = new Dice();\n * d6.roll(); // A number between 1 and 6.\n *\n * // Roll a single d4.\n * const d4 = new Dice({ faces: 4 });\n * d4.roll();\n *\n * // Alternative, static syntax. Will always use Blum Blum Shub.\n * Dice.rollD(4);\n *\n * // Create a dice, roll it, then change its size.\n * const mutantDice = new Dice({ faces: 10 });\n * mutantDice.roll(); // A number between 1 and 10.\n * mutantDice.faces = 4;\n * mutantDice.roll(); // A number between 1 and 4.\n * ```\n *\n * @class Dice\n * @extends {XethyaObject}\n *\n * @param {Object} settings - A configuration object.\n * @param {Number} [settings.number = 6] - How many faces the dice has, or\n *                 the maximum number the roll can be.\n * @param {Class}  [settings.randomStrategy = BlumBlumShubAlgorithm] - The strategy to use\n *                 to generate the numbers. Must be a class that implements a `generateRandom()`\n *                 method.\n * @param {Object} [settings.randomStrategySettings = {}] - Specific configuration for the\n *                 randomizer. Most strategies should have default settings so you don't need\n *                 to use this, usually.\n *\n * @property {Number} faces - Gets or sets how many faces the dice has. Must be at least 2.\n * @property {Class} randomStrategy - Contains the reference to the pRNG used by the dice.\n * @property {Object} randomStrategySettings - Contains the pRNG's settings.\n *\n * @uses BlumBlumShubAlgorithm\n */\n\nimport Randomizer from '../random/randomizer';\nimport { BlumBlumShubAlgorithm } from '../random/blum-blum-shub';\nimport XethyaObject from '../base/object';\nimport IRandomAlgorithm from '../random/random-algorithm.i';\nimport assert from '../utils/assert/assert';\nimport IConstructableRandomAlgorithm from '../random/constructable-random-algorithm.i';\nimport IConstructable from '../utils/constructable.t';\nimport IRandomSettings from '../random/random-settings.i';\n\nexport interface IDiceSettings {\n  faces: number;\n  randomStrategy?: IRandomAlgorithm;\n  randomStrategySettings?: object;\n}\n\nexport class Dice extends XethyaObject {\n  private _faces: number = 6;\n  private _mustPreservePrng: boolean;\n  private _randomStrategy?: IRandomAlgorithm;\n  private _randomizer?: IRandomAlgorithm;\n  private _randomStrategySettings?: object;\n\n  constructor({\n    faces = 6,\n    randomStrategy = BlumBlumShubAlgorithm,\n    randomStrategySettings = {}\n  } = {} as IDiceSettings) {\n    super();\n\n    this.faces = faces;\n    this.setRandomStrategy(randomStrategy as IRandomAlgorithm, randomStrategySettings);\n    this._mustPreservePrng = randomStrategy.recommendsToReinstantiate();\n  }\n\n  /**\n   * Reinitializes the randomizer according to the strategy's recommendation.\n   *\n   * @private\n   * @method _regenerateRandomStrategyIfNeeded\n   */\n  _regenerateRandomStrategyIfNeeded() {\n    if (!this._mustPreservePrng) {\n      this._initializeRandomizer();\n    }\n  }\n\n  /**\n   * Instantiates the randomizer.\n   *\n   * @private\n   * @method _initializeRandomizer\n   */\n  private _initializeRandomizer() {\n    this._randomizer = new Randomizer(this.randomStrategy as IConstructableRandomAlgorithm<IRandomAlgorithm>).create(<object>this.randomStrategySettings);\n  }\n\n  roll(): number {\n    this.emit('before:roll');\n\n    const random: number = (<IRandomAlgorithm>this._randomizer).generateRandom();\n    const result: number = Math.ceil(random * this.faces);\n    this._regenerateRandomStrategyIfNeeded();\n\n    this.emit('roll', result);\n\n    return result;\n  }\n\n  /**\n   * Sets a new random strategy for the dice.\n   *\n   * @public\n   * @method\n   * @param {Class}  randomStrategy - The strategy to use to generate the numbers.\n   *                 Must be a class that implements a `generateRandom()` method.\n   * @param {Object} [randomStrategySettings = {}] - Specific configuration for the\n   *                 randomizer. Most strategies should have default settings so you don't need\n   *                 to use this, usually.\n   */\n  setRandomStrategy(randomStrategy: IRandomAlgorithm, randomStrategySettings = {}) {\n    this.randomStrategy = randomStrategy;\n    this.randomStrategySettings = randomStrategySettings;\n\n    this._initializeRandomizer();\n  }\n\n  get faces() {\n    return this._faces;\n  }\n\n  /**\n   * @throws {Error} if faces isn't a Number or it's less than 2.\n   */\n  set faces(faces) {\n    assert(faces >= 2, 'Dice#setFaces: a dice must have at least two faces');\n\n    this._faces = faces;\n  }\n\n  get randomStrategy() {\n    return this._randomStrategy;\n  }\n\n  set randomStrategy(randomStrategy) {\n    this._randomStrategy = randomStrategy;\n  }\n\n  get randomStrategySettings() {\n    return this._randomStrategySettings;\n  }\n\n  set randomStrategySettings(randomStrategySettings) {\n    this._randomStrategySettings = randomStrategySettings;\n  }\n\n  static rollD(faces: number) {\n    return new Dice({ faces }).roll();\n  }\n}\n","import { Dice } from '../dice';\r\n\r\nexport const enum CoinFlipSides {\r\n  HEADS = 1,\r\n  TAILS = 2,\r\n};\r\n\r\nexport class CoinFlip extends Dice {\r\n  constructor() {\r\n    super({ faces: 2 });\r\n  }\r\n}","import DiceThrowResult from './dice-throw-result';\r\nimport { DiceThrowTypes } from './dice-throw';\r\n\r\nconst allowedThrowTypes = [\r\n  DiceThrowTypes.FAILURE,\r\n  DiceThrowTypes.SUCCESS,\r\n  DiceThrowTypes.CRITICAL_SUCCESS\r\n];\r\n\r\nexport default class ChanceThrowResult extends DiceThrowResult {\r\n  private _throwType?: DiceThrowTypes;\r\n\r\n  constructor(throwResult: DiceThrowResult) {\r\n    super();\r\n    this.rolls = this.rolls.concat(throwResult.rolls);\r\n  }\r\n\r\n  get throwType() {\r\n    return this._throwType;\r\n  }\r\n\r\n  set throwType(value) {\r\n    this._throwType = value;\r\n  }\r\n}\r\n","/**\r\n * A d100 thrower. Useful for probability calculation. A throw is classified\r\n * with a roll score map, where the defaults are:\r\n *\r\n * - 1-20: Failure\r\n * - 21-90: Success\r\n * - 91-100: Critical success\r\n *\r\n * You can move around these ranges in order to change the roll's difficulty.\r\n * For instance, a very difficult throw would be one like this:\r\n *\r\n * - 1-80: Failure\r\n * - 81-98: Success\r\n * - 99-100: Critical success\r\n *\r\n * Notice that the success rate ranges cannot overlap, as the result resolver\r\n * won't be able to distinguish between rates otherwise.\r\n *\r\n * As ChanceThrow is an extension of Dice, it's regulated by the same randomizer\r\n * rules.\r\n *\r\n * @example\r\n * ```js\r\n * // Default settings.\r\n * const d100 = new ChanceThrow();\r\n * d100.roll();\r\n *\r\n * // A very difficult throw.\r\n * const d100Hard = new ChanceThrow({\r\n *   rollScores: {\r\n *     failure: new Range(1, 80),\r\n *     success: new Range(81, 98),\r\n *     criticalSuccess: new Range(99, 100),\r\n *   }\r\n * });\r\n * d100Hard.roll();\r\n *\r\n * // A chance throw of d66. Useful for capping the success rate\r\n * // without changing the roll scores map.\r\n * import { MersenneTwisterAlgorithm } from 'xethya-extension-random-mtw';\r\n *\r\n * const d66 = new ChanceThrow({\r\n *   randomStrategy: MersenneTwisterAlgorithm,\r\n * });\r\n * d66.roll();\r\n * ```\r\n *\r\n * @class ChanceThrow\r\n * @extends DiceThrow\r\n *\r\n * @param {Object} [settings] - Configuration object for the throw.\r\n * @param {Object} [settings.rollScores] - A map of ranges to determine the success rate of\r\n *                 the chance throw's result.\r\n * @param {Range}  [settings.rollScores.failure = new Range(1, 20)] - A Range to describe a\r\n *                 failed throw. This range can be used to apply penalizations to the player.\r\n * @param {Range}  [settings.rollScores.success = new Range(21, 90)] - A Range to describe a\r\n *                 success throw. This range can be used to give the player a reward.\r\n * @param {Range}  [settings.rollScores.criticalSuccess = new Range(91, 100)] - A Range to\r\n *                 describe a critical success throw. This result means the throw went even\r\n *                 better than normal, so a major reward can be given.\r\n * @param {Class}  [settings.randomStrategy = BlumBlumShubAlgorithm] - The strategy to use\r\n *                 to generate the numbers. Must be a class that implements a `generateRandom()`\r\n *                 method.\r\n *\r\n * @see https://github.com/xethya/xethya-extension-random-bbs/wiki/Blum-Blum-Shub-distributions\r\n * @see https://github.com/xethya/xethya-extension-random-mtw\r\n *\r\n * @uses Range\r\n * @uses BlumBlumShubAlgorithm\r\n * @uses ChanceThrowResult\r\n */\r\n\r\nimport Range from '../../utils/range/range';\r\nimport { BlumBlumShubAlgorithm } from '../../random/blum-blum-shub';\r\n\r\nimport { DiceThrow, IDiceThrowSettings, DiceThrowTypes } from './dice-throw';\r\nimport ChanceThrowResult from './chance-throw-result';\r\nimport IConstructableRandomAlgorithm from '../../random/constructable-random-algorithm.i';\r\nimport IRandomSettings from '../../random/random-settings.i';\r\nimport IRollScoreSettings from './roll-score-settings.i';\r\nimport assert from '../../utils/assert/assert';\r\n\r\nexport interface IChanceThrowSettings extends IDiceThrowSettings {\r\n  rollScores: IRollScoreSettings,\r\n}\r\n\r\nexport class ChanceThrow extends DiceThrow {\r\n  settings: IChanceThrowSettings;\r\n\r\n  constructor(settings = { randomStrategy: undefined } as IChanceThrowSettings) {\r\n    super({\r\n      numberOfDices: 1,\r\n      maxNumber: 100,\r\n      randomStrategy: settings.randomStrategy || BlumBlumShubAlgorithm as IConstructableRandomAlgorithm<BlumBlumShubAlgorithm>,\r\n      randomStrategySettings: {\r\n        seedNumber: Number(Math.random().toString().replace(/\\./, ''))\r\n      }\r\n    });\r\n\r\n    const defaults = {\r\n      rollScores: {\r\n        failure: new Range(1, 20),\r\n        success: new Range(21, 90),\r\n        criticalSuccess: new Range(91, 100)\r\n      }\r\n    };\r\n\r\n    this.settings = <IChanceThrowSettings>Object.assign({}, settings, defaults);\r\n  }\r\n\r\n  /**\r\n   * Returns the range for a success rate.\r\n   *\r\n   * @private\r\n   * @function\r\n   * @param {string} key - The success rate to lookup.\r\n   * @return {Range}\r\n   */\r\n  private _range(key: string) {\r\n    return this.settings.rollScores[key];\r\n  }\r\n\r\n  /**\r\n   * Determines the success rate of the throw.\r\n   *\r\n   * @private\r\n   * @function\r\n   * @param {Number} rollSum - The results of the throw.\r\n   * @return {String}\r\n   */\r\n  private _calculateThrowType(rollSum: number): DiceThrowTypes | undefined {\r\n    for (let throwType of Object.keys(this.settings.rollScores)) {\r\n      if (this._range(throwType).includes(rollSum)) {\r\n        return throwType as DiceThrowTypes;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rolls the dice.\r\n   *\r\n   * @public\r\n   * @function roll\r\n   * @override\r\n   */\r\n  roll() {\r\n    const diceThrow = super.roll();\r\n    const ctr = new ChanceThrowResult(diceThrow);\r\n    const rollSum = diceThrow.getRollSum();\r\n\r\n    ctr.throwType = this._calculateThrowType(rollSum);\r\n\r\n    return ctr;\r\n  }\r\n}\r\n","export default class DiceThrowResult {\r\n  rolls: number[];\r\n\r\n  constructor() {\r\n    this.rolls = [];\r\n  }\r\n\r\n  getRollSum(): number {\r\n    return this.rolls.reduce((m, n) => m + n);\r\n  }\r\n}\r\n","/**\r\n * xethya-dice\r\n *\r\n * Copyright © 2016 Joel A. Villarreal Bertoldi. All rights reserved.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE.txt file in the root directory of this source tree.\r\n */\r\nimport { Dice } from '../dice';\r\nimport DiceThrowResult from './dice-throw-result';\r\n\r\nimport { BlumBlumShubAlgorithm } from '../../random/blum-blum-shub';\r\nimport assert from '../../utils/assert/assert';\r\nimport IRandomSettings from '../../random/random-settings.i';\r\nimport IRandomAlgorithm from '../../random/random-algorithm.i';\r\nimport IConstructableRandomAlgorithm from '../../random/constructable-random-algorithm.i';\r\n\r\nexport interface IDiceThrowSettings extends IRandomSettings {\r\n  numberOfDices?: number,\r\n  maxNumber?: number,\r\n}\r\n\r\nexport const enum DiceThrowTypes {\r\n  FAILURE = 'failure',\r\n  SUCCESS = 'success',\r\n  CRITICAL_SUCCESS = 'criticalSuccess',\r\n};\r\n\r\nexport class DiceThrow {\r\n  dices: Dice[];\r\n\r\n  constructor({\r\n    numberOfDices = 2,\r\n    maxNumber = 6,\r\n    randomStrategy = BlumBlumShubAlgorithm,\r\n    randomStrategySettings = {}\r\n  } = {} as IDiceThrowSettings) {\r\n    assert(maxNumber >= 2, 'DiceThrow#constructor: expected `maxNumber` to be at least 2.');\r\n\r\n    this.dices = [];\r\n\r\n    for (let d = 0; d < numberOfDices; d += 1) {\r\n      this.dices.push(new Dice({\r\n        faces: maxNumber,\r\n        randomStrategy: randomStrategy as IConstructableRandomAlgorithm<IRandomAlgorithm>,\r\n        randomStrategySettings\r\n      }));\r\n    }\r\n  }\r\n\r\n  roll() {\r\n    let dtr = new DiceThrowResult();\r\n    dtr.rolls = this.dices.map(d => d.roll());\r\n    return dtr;\r\n  }\r\n}\r\n","import ChanceThrowResult from './chance-throw-result';\r\n\r\nexport type SkillThrowResultSettings = {\r\n  skillValue: number,\r\n  skillAttributesModifierValue: number,\r\n  throwResult: ChanceThrowResult,\r\n};\r\n\r\nexport class SkillThrowResult extends ChanceThrowResult {\r\n  private _skillValue: number;\r\n  private _skillAttributeModifiersValue: number;\r\n  private _failureRoll?: ChanceThrowResult;\r\n\r\n  constructor({\r\n    skillValue,\r\n    skillAttributesModifierValue,\r\n    throwResult\r\n  }: SkillThrowResultSettings) {\r\n    super(throwResult);\r\n    \r\n    this._skillValue = skillValue;\r\n    this._skillAttributeModifiersValue = skillAttributesModifierValue;\r\n  }\r\n\r\n  get skillValue() {\r\n    return this._skillValue;\r\n  }\r\n\r\n  get skillAttributeModifiersValue() {\r\n    return this._skillAttributeModifiersValue;\r\n  }\r\n\r\n  get totalRollValue() {\r\n    return this.skillValue + this.getRollSum() + this.skillAttributeModifiersValue;\r\n  }\r\n\r\n  get failureRoll() {\r\n    return this._failureRoll;\r\n  }\r\n\r\n  set failureRoll(roll: ChanceThrowResult | undefined) {\r\n    this._failureRoll = roll;\r\n  }\r\n}","import { ChanceThrow } from './chance-throw';\r\nimport { Skill } from '../../entity/skills/skill';\r\nimport ChanceThrowResult from './chance-throw-result';\r\nimport { SkillThrowResult } from './skill-throw-result';\r\n\r\nexport default class SkillThrow extends ChanceThrow {\r\n  private _skill: Skill;\r\n\r\n  constructor(skill: Skill) {\r\n    super();\r\n\r\n    this._skill = skill;\r\n  }\r\n\r\n  get skill() {\r\n    return this._skill;\r\n  }\r\n\r\n  roll(): SkillThrowResult {\r\n    const result: ChanceThrowResult = super.roll();\r\n    return new SkillThrowResult({\r\n      skillValue: this._skill.value,\r\n      skillAttributesModifierValue: this._skill.modifiers.getSum(),\r\n      throwResult: result,\r\n    });\r\n  }\r\n}","import Entity from './entity';\r\nimport { IEntitySettings } from './abstract-entity';\r\nimport IHasSkills from './skills/has-skills.i';\r\nimport SkillCollection from './skills/skill-collection';\r\nimport { Skill } from './skills/skill';\r\n\r\nexport interface IAbleEntitySettings extends IEntitySettings {\r\n  skills: Skill[];\r\n}\r\n\r\nexport class AbleEntity extends Entity implements IHasSkills {\r\n  protected _skills: SkillCollection;\r\n\r\n  constructor(settings: IAbleEntitySettings) {\r\n    super(settings);\r\n\r\n    this._skills = SkillCollection.fromArray(settings.skills);\r\n  }\r\n\r\n  get skills() {\r\n    return this._skills;\r\n  }\r\n}","import assert from '../utils/assert/assert';\r\nimport XethyaObject from '../base/object';\r\nimport IEntity from './entity.i';\r\nimport AttributeCollection from './attributes/attribute-collection';\r\nimport ModifierCollection from './modifiers/modifier-collection';\r\nimport { Attribute } from './attributes/attribute';\r\nimport Modifier from './modifiers/modifier';\r\n\r\nexport const enum MoralAlignments {\r\n  CHAOTIC_GOOD = 'chaotic:good',\r\n  CHAOTIC_NEUTRAL = 'chaotic:neutral',\r\n  CHAOTIC_EVIL = 'chaotic:evil',\r\n  NEUTRAL_GOOD = 'neutral:good',\r\n  NEUTRAL_NEUTRAL = 'neutral:neutral',\r\n  NEUTRAL_EVIL = 'neutral:evil',\r\n  LAWFUL_GOOD = 'lawful:good',\r\n  LAWFUL_NEUTRAL = 'lawful:neutral',\r\n  LAWFUL_EVIL = 'lawful:evil',\r\n};\r\n\r\nexport interface IEntitySettings {\r\n  id: string;\r\n  name: string;\r\n  volatile: false;\r\n  attributes: Attribute[],\r\n  modifiers: Modifier[],\r\n};\r\n\r\nexport abstract class AbstractEntity extends XethyaObject implements IEntity {\r\n  protected readonly _id: string;\r\n  protected _name: string;\r\n  protected readonly _volatile: boolean;\r\n  protected readonly _attributes: AttributeCollection;\r\n  protected readonly _modifiers: ModifierCollection;\r\n\r\n  constructor({\r\n    id,\r\n    name = 'UnnamedEntity',\r\n    volatile = false,\r\n    attributes = [],\r\n    modifiers = [],\r\n  } = {} as IEntitySettings) {\r\n    super();\r\n\r\n    this._id = id;\r\n    this._name = name;\r\n    this._volatile = volatile;\r\n    this._attributes = AttributeCollection.fromArray(attributes);\r\n    this._modifiers = ModifierCollection.fromArray(modifiers);\r\n  }\r\n\r\n  get id() {\r\n    return this._id;\r\n  }\r\n\r\n  get name() {\r\n    return this._name;\r\n  }\r\n\r\n  set name(newName: string) {\r\n    this._name = newName;\r\n  }\r\n\r\n  get volatile() {\r\n    return this._volatile;\r\n  }\r\n\r\n  get attributes() {\r\n    return this._attributes;\r\n  }\r\n\r\n  get modifiers() {\r\n    return this._modifiers;\r\n  }\r\n}","import Collection from '../../utils/collection/collection';\r\nimport { Attribute } from './attribute';\r\n\r\nexport default class AttributeCollection extends Collection<Attribute> {\r\n  constructor() {\r\n    super('id');\r\n  }\r\n\r\n  add(...attributes: Attribute[]) {\r\n    attributes.forEach(this._bindAttributeEvents.bind(this));\r\n    super.add(...attributes);\r\n  }\r\n\r\n  remove(id: string): void {\r\n    this._unbindAttributeEvents(id);\r\n    super.remove(id);\r\n  }\r\n\r\n  removeAll(): void {\r\n    this.getAll().forEach(attribute => this.remove(attribute.id));    \r\n  }\r\n\r\n  setValue(id: string, value: number): void {\r\n    if (this.contains(id)) {\r\n      const attribute = this.get(id) as Attribute;\r\n      attribute.rawValue = value;\r\n    }\r\n  }\r\n\r\n  getModifierSumForAll() {\r\n    if (this.count === 0) {\r\n      return 0;\r\n    }\r\n    \r\n    return this.getAll()\r\n      .map(attribute => attribute.modifiers.getSum())\r\n      .reduce((leftSum, rightSum) => leftSum + rightSum);\r\n  }\r\n  \r\n  private _bindAttributeEvents(attribute: Attribute): void {\r\n    attribute.on('change:value', (...args) => {\r\n      this.emit('change:attribute:value', ...args);\r\n      this.emit(`change:attribute:${attribute.id}:value`, ...args);\r\n    });  \r\n  }\r\n\r\n  private _unbindAttributeEvents(id: string): void {\r\n    this.off(`change:attribute:${id}:value`);    \r\n  }\r\n\r\n  static fromArray(attributes: Attribute[]) : AttributeCollection {\r\n    const collection: AttributeCollection = new AttributeCollection();\r\n\r\n    collection.add(...attributes);\r\n\r\n    return collection;\r\n  }\r\n}","import assert from '../../utils/assert/assert';\r\nimport Eventable from '../../base/eventable';\r\nimport BaseModifier from '../modifiers/base-modifier';\r\nimport Modifier from '../modifiers/modifier';\r\nimport ModifierCollection from '../modifiers/modifier-collection';\r\nimport IHasModifiers from '../modifiers/has-modifiers.i';\r\nimport Range from '../../utils/range/range';\r\nimport IRangeable from '../../utils/range/rangeable.i';\r\n\r\nexport type AttributeSettings = {\r\n  id: string,\r\n  initialValue?: number,\r\n  valueRange?: Range,\r\n};\r\n\r\nexport class Attribute extends Eventable implements IHasModifiers {\r\n  modifiers: ModifierCollection;\r\n  \r\n  private _valueRange?: Range;\r\n  private _rawValue: number = 0;\r\n  private _id: string = '';\r\n\r\n  constructor({ \r\n    id, \r\n    initialValue = 0, \r\n    valueRange = undefined \r\n  }: AttributeSettings) {\r\n    super();\r\n    \r\n    this.modifiers = new ModifierCollection();\r\n    this.id = id;\r\n    this._rawValue = initialValue;\r\n\r\n    if (valueRange) {\r\n      this._valueRange = valueRange;\r\n    }\r\n\r\n    this.modifiers.add(new BaseModifier());\r\n    this._updateBaseModifierValue();\r\n  }\r\n\r\n  private _updateBaseModifierValue(): void {\r\n    this.modifiers.setValue('base', this._rawValue);\r\n  }\r\n\r\n  get id() {\r\n    return this._id;\r\n  }\r\n\r\n  set id(newId: string) {\r\n    assert(newId !== '', 'Attribute#set[id]: cannot be an empty String');\r\n\r\n    this._id = newId;\r\n  }\r\n\r\n  get rawValue(): number {\r\n    return this._rawValue;\r\n  }\r\n\r\n  set rawValue(newValue: number) {\r\n    const range = this._valueRange;\r\n\r\n    if (range) {\r\n      assert(range.includes(newValue),\r\n        `Attribute#set[value]: value is out of range (must be within ${range.toString()})`);\r\n    }\r\n\r\n    const previousValue = this._rawValue;\r\n\r\n    if (previousValue !== newValue) {\r\n      this.emit('before:change:value', { previousValue, newValue });\r\n      this._rawValue = newValue;\r\n      this._updateBaseModifierValue();\r\n      this.emit('change:value', this);\r\n    }\r\n  }\r\n\r\n  get value(): number {\r\n    return this.rawValue + this.modifiers.getSum();\r\n  }\r\n\r\n  get baseModifierValue(): number {\r\n    const modifier = this.modifiers.get('base') as Modifier;\r\n    return modifier.value;\r\n  }\r\n\r\n  toString(): string {\r\n    const modifierSum: number = this.modifiers.getSum();\r\n    const sign: string = modifierSum >= 0 ? '+' : '';\r\n    return `${this.rawValue.toString()} (${sign}${modifierSum.toString()})`;\r\n  }\r\n}","import { AbstractEntity, IEntitySettings } from \"./abstract-entity\";\r\n\r\nexport default class Entity extends AbstractEntity {\r\n  constructor(settings: IEntitySettings) {\r\n    super(settings);\r\n  }\r\n}","import { AbleEntity, IAbleEntitySettings } from './able-entity';\r\nimport { Race } from './race/race';\r\nimport { Attribute } from './attributes/attribute';\r\nimport Modifier from './modifiers/modifier';\r\nimport Stat from './stats/stat';\r\nimport StatCollection from './stats/stat-collection';\r\nimport IHasStats from './stats/has-stats.i';\r\nimport { Skill } from './skills/skill';\r\nimport IFaction from '../relationships/faction.i';\r\nimport IFactionMemberEntity from './faction-member-entity.i';\r\n\r\nexport interface ILivingEntitySettings extends IAbleEntitySettings {\r\n  race: Race;\r\n  age: number;\r\n  height: number;\r\n  weight: number;\r\n  stats: Stat[];\r\n  faction: IFaction;\r\n}\r\n\r\nexport class LivingEntity extends AbleEntity implements IHasStats, IFactionMemberEntity {\r\n  protected _race: Race;\r\n  protected _age: number;\r\n  protected _height: number;\r\n  protected _weight: number;\r\n  protected _stats: StatCollection;\r\n  protected _faction: IFaction;\r\n\r\n  constructor(settings: ILivingEntitySettings) {\r\n    super(settings);\r\n\r\n    this._race = settings.race;\r\n    this._age = settings.age;\r\n    this._weight = settings.weight;\r\n    this._height = settings.height;\r\n    this._faction = settings.faction;\r\n\r\n    this._stats = StatCollection.fromArray(settings.stats);\r\n\r\n    this._applyRacialTraits();\r\n  }\r\n\r\n  get stats() {\r\n    return this._stats;\r\n  }\r\n\r\n  get race() {\r\n    return this._race;\r\n  }\r\n\r\n  get age() {\r\n    return this._age;\r\n  }\r\n\r\n  get height() {\r\n    return this._height;\r\n  }\r\n\r\n  get weight() {\r\n    return this._weight;\r\n  }\r\n\r\n  get faction() {\r\n    return this._faction;\r\n  }\r\n\r\n  protected _applyRacialTraits(): void {\r\n    this._applyRaceAttributes();\r\n    this._applyRaceStats();\r\n    this._applyRaceSkills();\r\n  }\r\n\r\n  protected _applyRaceAttributes(): void {\r\n    this._race.attributes.getAll().forEach((attribute) => {\r\n      const raceTrait = new Modifier(\r\n        `${attribute.id}RaceTrait`,\r\n        attribute.rawValue\r\n      );\r\n      (this.attributes.get(attribute.id) as Attribute).modifiers.add(raceTrait);\r\n    });\r\n  }\r\n\r\n  protected _applyRaceStats(): void {\r\n    this.race.stats.getAll().forEach((stat) => {\r\n      const raceTrait = new Modifier(\r\n        `${stat.id}RaceTrait`,\r\n        stat.value\r\n      );\r\n      (this.stats.get(stat.id) as Stat).modifiers.add(raceTrait);\r\n    });\r\n  }\r\n\r\n\r\n  protected _applyRaceSkills(): void {\r\n    this.race.skills.getAll().forEach((skill) => {\r\n      const raceTrait = new Modifier(\r\n        `${skill.id}RaceTrait`,\r\n        skill.value\r\n      );\r\n      (this.skills.get(skill.id) as Skill).modifiers.add(raceTrait);\r\n    });\r\n  }  \r\n}","export function BaseModifierCalculator(value: number) {\r\n  return Math.floor((value - 10) / 2);\r\n}\r\n\r\nexport type IBaseModifierCalculator = {(value: number): number};","import Modifier from \"./modifier\";\r\nimport { IBaseModifierCalculator, BaseModifierCalculator } from \"./base-modifier-calculator\";\r\n\r\nexport default class BaseModifier extends Modifier {\r\n  private _calculateValue: IBaseModifierCalculator = BaseModifierCalculator;\r\n  \r\n  constructor(calculationMethod: IBaseModifierCalculator = BaseModifierCalculator) {\r\n    super('base');\r\n\r\n    this._calculateValue = calculationMethod;\r\n  }\r\n\r\n  get value() {\r\n    return super.value;\r\n  }\r\n\r\n  set value(newValue: number) {\r\n    super.value = this._calculateValue(newValue);\r\n  }\r\n}","import Collection from '../../utils/collection/collection';\r\nimport Modifier from './modifier';\r\n\r\nexport default class ModifierCollection extends Collection<Modifier> {\r\n  constructor() {\r\n    super('id');\r\n  }\r\n\r\n  add(...modifiers: Modifier[]) {\r\n    modifiers.forEach(this._bindModifierEvents.bind(this));\r\n    super.add(...modifiers);\r\n  }\r\n\r\n  remove(id: string): void {\r\n    this._unbindModifierEvents(id);\r\n    super.remove(id);\r\n  }\r\n\r\n  removeAll(): void {\r\n    this.getAll().forEach(modifier => this.remove(modifier.id));\r\n  }\r\n\r\n  setValue(id: string, value: number): void {\r\n    if (this.contains(id)) {\r\n      const modifier = this.get(id) as Modifier;\r\n      modifier.value = value;\r\n    }\r\n  }\r\n\r\n  activate(id: string): void {\r\n    if (this.contains(id)) {\r\n      const modifier = this.get(id) as Modifier;\r\n      modifier.active = true;\r\n    }    \r\n  }\r\n\r\n  deactivate(id: string): void {\r\n    if (this.contains(id)) {\r\n      const modifier = this.get(id) as Modifier;\r\n      modifier.active = false;\r\n    }    \r\n  }\r\n\r\n  getSum(): number {\r\n    if (this.count === 0) {\r\n      return 0;\r\n    }\r\n\r\n    return this.where(modifier => modifier.active)\r\n      .map(modifier => modifier.value)\r\n      .reduce((leftValue, rightValue) => leftValue + rightValue);\r\n  }\r\n\r\n  private _bindModifierEvents(modifier: Modifier): void {\r\n    modifier.on('change:value', (...args) => {\r\n      this.emit('change:modifier:value', ...args);\r\n      this.emit(`change:modifier:${modifier.id}:value`, ...args);\r\n    });      \r\n\r\n    modifier.on('change:active', (...args) => {\r\n      this.emit('change:modifier:active', ...args);\r\n      this.emit(`change:modifier:${modifier.id}:active`, ...args);\r\n    });\r\n\r\n    modifier.on('activate', (...args) => {\r\n      this.emit('activate:modifier', ...args);\r\n      this.emit(`activate:modifier:${modifier.id}`, ...args);\r\n    });\r\n\r\n    modifier.on('deactivate', (...args) => {\r\n      this.emit('deactivate:modifier', ...args);\r\n      this.emit(`deactivate:modifier:${modifier.id}`, ...args);\r\n    });  \r\n  }\r\n\r\n  private _unbindModifierEvents(id: string): void {\r\n    this.off(`change:modifier:${id}:value`);\r\n    this.off(`change:modifier:${id}:active`);\r\n    this.off(`activate:modifier:${id}`);\r\n    this.off(`deactivate:modifier:${id}`);\r\n  }\r\n\r\n  static fromArray(modifiers: Modifier[]) : ModifierCollection {\r\n    const collection: ModifierCollection = new ModifierCollection();\r\n\r\n    collection.add(...modifiers);\r\n\r\n    return collection;\r\n  }  \r\n}","import assert from '../../utils/assert/assert';\r\nimport Eventable from '../../base/eventable';\r\n\r\nexport default class Modifier extends Eventable {\r\n  private _id: string = '';\r\n  private _value: number = 0;\r\n  private _active: boolean = true;\r\n  private _source: any;\r\n\r\n  constructor(id: string, value: number = 0, source: any = undefined) {\r\n    super();\r\n  \r\n    this.id = id;\r\n    this.source = source;\r\n    this._value = value;\r\n  }\r\n\r\n  get id() {\r\n    return this._id;\r\n  }\r\n\r\n  set id(newId: string) {\r\n    assert(newId !== '', 'Modifier#set[id]: cannot be an empty String');\r\n\r\n    this._id = newId;\r\n  }\r\n\r\n  get active() {\r\n    return this._active;\r\n  }\r\n\r\n  set active(newValue: boolean) {\r\n    if (this._active !== newValue) {\r\n      this._active = newValue;\r\n      this.emit(newValue ? 'activate' : 'deactivate', this);\r\n      this.emit('change:active', this);\r\n    }\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  set value(newValue: number) {\r\n    if (this._value !== newValue) {\r\n      const previousValue: number = this._value;\r\n      this.emit('before:change:value', {\r\n        previousValue,\r\n        newValue,\r\n      });\r\n      this._value = newValue;\r\n      this.emit('change:value', this);\r\n    }\r\n  }\r\n\r\n  get source() {\r\n    return this._source;\r\n  }\r\n\r\n  set source(newSource) {\r\n    this._source = newSource;\r\n  }\r\n}","import XethyaObject from '../../base/object';\r\nimport IHasAttributes from '../attributes/has-attributes.i';\r\nimport { Attribute } from '../attributes/attribute';\r\nimport AttributeCollection from '../attributes/attribute-collection';\r\nimport IHasSkills from '../skills/has-skills.i';\r\nimport { Skill } from '../skills/skill';\r\nimport SkillCollection from '../skills/skill-collection';\r\nimport IHasStats from '../stats/has-stats.i';\r\nimport Stat from '../stats/stat';\r\nimport StatCollection from '../stats/stat-collection';\r\nimport Range from '../../utils/range/range';\r\nimport { MoralAlignments } from '../abstract-entity';\r\n\r\nexport type RaceSettings = {\r\n  id: string;\r\n  name: string;\r\n  lifeExpectancy: Range;\r\n  defaultAlignment: MoralAlignments;\r\n  heightRange: Range;\r\n  heritageAttributes: Attribute[];\r\n  heritageSkills: Skill[];\r\n  heritageStats: Stat[];\r\n}\r\n\r\nexport class Race extends XethyaObject implements IHasAttributes, IHasSkills, IHasStats {\r\n  id: string;\r\n  name: string;\r\n  attributes: AttributeCollection;\r\n  skills: SkillCollection;\r\n  stats: StatCollection;\r\n  lifeExpectancy: Range;\r\n  defaultAlignment: MoralAlignments;\r\n  heightRange: Range;\r\n\r\n  constructor({\r\n    id,\r\n    name = 'Unnamed Race',\r\n    lifeExpectancy = Range.fromArray([90, 100]),\r\n    defaultAlignment = MoralAlignments.NEUTRAL_NEUTRAL,\r\n    heightRange = Range.fromArray([165, 185]),\r\n    heritageAttributes = [],\r\n    heritageSkills = [],\r\n    heritageStats = []\r\n  }: RaceSettings) {\r\n    super();\r\n\r\n    this.id = id;\r\n    this.name = name;\r\n    this.attributes = AttributeCollection.fromArray(heritageAttributes);\r\n    this.skills = SkillCollection.fromArray(heritageSkills);\r\n    this.stats = StatCollection.fromArray(heritageStats);\r\n    this.lifeExpectancy = lifeExpectancy;\r\n    this.defaultAlignment = defaultAlignment;\r\n    this.heightRange = heightRange;\r\n  }\r\n}","import { Skill } from './skill';\r\nimport { SkillThrowResult } from '../../dice/throws/skill-throw-result';\r\nimport Collection from '../../utils/collection/collection';\r\nimport assert from '../../utils/assert/assert';\r\n\r\nexport default class SkillCollection extends Collection<Skill> {\r\n  constructor() {\r\n    super('id');\r\n  }\r\n\r\n  add(...skills: Skill[]) {\r\n    skills.forEach(skill => this._bindSkillEvents.bind(this));\r\n    super.add(...skills);\r\n  }\r\n\r\n  remove(id: string): void {\r\n    this._unbindSkillEvents(id);\r\n    super.remove(id);\r\n  }\r\n\r\n  removeAll(): void {\r\n    this.getAll().forEach(skill => this.remove(skill.id));\r\n  }\r\n\r\n  useSkill(id: string): SkillThrowResult {\r\n    assert(this.contains(id), 'SkillCollection#useSkill: skill does not exist');\r\n\r\n    return (this.get(id) as Skill).use();\r\n  }\r\n\r\n  private _bindSkillEvents(skill: Skill): void {\r\n    skill.on('before:use', (...args) => {\r\n      this.emit('before:use:skill', ...args);\r\n      this.emit(`before:use:skill:${skill.id}`, ...args);\r\n    });\r\n\r\n    skill.on('use', (...args) => {\r\n      this.emit('use:skill', ...args);\r\n      this.emit(`use:skill:${skill.id}`, ...args);\r\n    });\r\n  }\r\n\r\n  private _unbindSkillEvents(id: string): void {\r\n    this.off(`before:use:skill:${id}`);\r\n    this.off(`use:skill:${id}`);\r\n  }\r\n\r\n  static fromArray(skills: Skill[]): SkillCollection {\r\n    const collection: SkillCollection = new SkillCollection();\r\n\r\n    collection.add(...skills);\r\n\r\n    return collection;\r\n  }\r\n}","import { Attribute } from '../attributes/attribute';\r\nimport Modifier from '../modifiers/modifier';\r\nimport IHasAttributes from '../attributes/has-attributes.i';\r\nimport AttributeCollection from '../attributes/attribute-collection';\r\nimport IHasModifiers from '../modifiers/has-modifiers.i';\r\nimport ModifierCollection from '../modifiers/modifier-collection';\r\nimport XethyaObject from '../../base/object';\r\nimport assert from '../../utils/assert/assert';\r\nimport SkillThrow from '../../dice/throws/skill-throw';\r\nimport { SkillThrowResult } from '../../dice/throws/skill-throw-result';\r\nimport { DiceThrowTypes } from '../../dice/throws/dice-throw';\r\nimport { ChanceThrow } from '../../dice/throws/chance-throw';\r\n\r\nexport type SkillSettings = {\r\n  id: string;\r\n  owner?: XethyaObject;\r\n  attributes?: Attribute[],\r\n  modifiers?: Modifier[],\r\n  primaryAttribute?: string | Attribute,\r\n}\r\n\r\nexport class Skill extends XethyaObject implements IHasAttributes, IHasModifiers {\r\n  attributes: AttributeCollection;\r\n  modifiers: ModifierCollection;\r\n  \r\n  protected _id: string;\r\n  protected _primaryAttribute?: Attribute;\r\n\r\n  constructor({\r\n    id,\r\n    owner = undefined,\r\n    attributes = [],\r\n    modifiers = [],\r\n    primaryAttribute = ''\r\n  }: SkillSettings) {\r\n    super();\r\n\r\n    this._id = id;\r\n    this.attributes = AttributeCollection.fromArray(attributes);\r\n    this.modifiers = ModifierCollection.fromArray(modifiers);\r\n\r\n    if (this.attributes.count > 0) {\r\n      this._setPrimaryAttribute(primaryAttribute);  \r\n    }\r\n  }\r\n\r\n  private _setPrimaryAttribute(primaryAttribute: string | Attribute) {\r\n    const isAttributeID = typeof primaryAttribute === 'string';\r\n    const attributeID: string = isAttributeID ? primaryAttribute as string : (primaryAttribute as Attribute).id;\r\n    \r\n    assert(this.attributes.contains(attributeID),\r\n      'Skill#constructor: primaryAttribute must be defined in attributes array');\r\n    \r\n    this._primaryAttribute = this.attributes.get(attributeID) as Attribute;\r\n  }\r\n\r\n  get primaryAttribute(): Attribute | undefined {\r\n    return this._primaryAttribute;\r\n  }\r\n\r\n  set primaryAttribute(newPrimaryAttribute: Attribute | undefined) {\r\n    this._primaryAttribute = newPrimaryAttribute;\r\n  }\r\n\r\n  get id() {\r\n    return this._id;\r\n  }\r\n\r\n  get value() {\r\n    return (this._primaryAttribute as Attribute).value;\r\n  }\r\n\r\n  use(): SkillThrowResult {\r\n    this.emit('before:use', this);\r\n\r\n    const skillThrow = new SkillThrow(this);\r\n    const result = skillThrow.roll();\r\n\r\n    if (result.throwType === DiceThrowTypes.FAILURE) {\r\n      result.failureRoll = new ChanceThrow().roll();\r\n    }\r\n\r\n    this.emit('use', this);\r\n\r\n    return result;\r\n  }\r\n}","import Stat from './stat';\r\nimport Collection from '../../utils/collection/collection';\r\n\r\nexport default class StatCollection extends Collection<Stat> {\r\n  constructor() {\r\n    super('id');\r\n  }\r\n\r\n  add(...stats: Stat[]) {\r\n    stats.forEach(stat => this._bindStatEvents.bind(this));\r\n    super.add(...stats);\r\n  }\r\n\r\n  remove(id: string): void {\r\n    this._unbindStatEvents(id);\r\n    super.remove(id);\r\n  }\r\n  \r\n  removeAll(): void {\r\n    this.getAll().forEach(stat => this.remove(stat.id));    \r\n  }\r\n\r\n  // TODO: This event isn't working, probably to the weird\r\n  // nature of `stat.value` emitting an event if its value\r\n  // changes.\r\n  private _bindStatEvents(stat: Stat): void {\r\n    stat.on('change:value', (...args) => {\r\n      this.emit('change:stat:value', ...args);\r\n      this.emit(`change:stat:${stat.id}:value`, ...args);\r\n    });  \r\n  }\r\n\r\n  private _unbindStatEvents(id: string): void {\r\n    this.off(`change:stat:${id}:value`);\r\n  }\r\n\r\n  static fromArray(stats: Stat[]) : StatCollection {\r\n    const collection: StatCollection = new StatCollection();\r\n\r\n    collection.add(...stats);\r\n\r\n    return collection;\r\n  }\r\n}","import { Attribute } from '../attributes/attribute';\r\nimport AttributeCollection from '../attributes/attribute-collection';\r\nimport IHasAttributes from '../attributes/has-attributes.i';\r\nimport IStatCalculator from './stat-calculator.i';\r\n\r\nexport default class Stat extends Attribute implements IHasAttributes {\r\n  attributes: AttributeCollection;\r\n\r\n  private _calculateStat: IStatCalculator;\r\n  private _lastCalculatedValue: number = 0;\r\n\r\n  constructor(id: string, statCalculator: IStatCalculator) {\r\n    super({ id });\r\n\r\n    this.attributes = new AttributeCollection();\r\n\r\n    this.modifiers.remove('base');\r\n    this._calculateStat = statCalculator;\r\n\r\n    this.attributes.on('change:attribute:value', this._valueChanged.bind(this));\r\n  }\r\n\r\n  private _valueChanged(): void {\r\n    this.emit('change:value', {\r\n      previousValue: this._lastCalculatedValue,\r\n      newValue: this.value,\r\n    });\r\n  }\r\n\r\n  get value(): number {\r\n    const value = this._calculateStat(this);\r\n\r\n    if (this._lastCalculatedValue !== value) {\r\n      this.emit('change:value', {\r\n        previousValue: this._lastCalculatedValue,\r\n        newValue: value,\r\n      });\r\n      this._lastCalculatedValue = value;\r\n    }\r\n\r\n    return value;\r\n  } \r\n}","import XethyaObject from '../base/object';\r\n\r\nimport ITurn from './turn.i';\r\nimport IRound from './round.i';\r\nimport IEntity from '../entity/entity.i';\r\nimport ITurnSettings from './turn-settings.i';\r\nimport IRoundSettings from './round-settings.i';\r\n\r\nimport TurnResolver from './turn-resolver';\r\nimport IConstructableTurn from './constructable-turn.i';\r\nimport { ITurnEvent } from './turn-event.i';\r\n\r\nexport default abstract class AbstractRound extends XethyaObject implements IRound<ITurn> {\r\n  protected _roundNumber: number;\r\n  protected _turnType: ITurn;\r\n  protected _turns: ITurn[];\r\n  protected _entities: IEntity[];\r\n  protected _currentTurn?: ITurn;\r\n\r\n  constructor({ entities, roundNumber, turnType }: IRoundSettings) {\r\n    super();\r\n\r\n    this._roundNumber = roundNumber;\r\n    this._turnType = turnType;\r\n    this._entities = entities;\r\n\r\n    this._turns = [];\r\n  }\r\n\r\n  get roundNumber() {\r\n    return this._roundNumber;\r\n  }\r\n\r\n  get turnType() {\r\n    return this._turnType;\r\n  }\r\n\r\n  get entities() {\r\n    return this._entities;\r\n  }\r\n\r\n  get turns() {\r\n    return this._turns;\r\n  }\r\n\r\n  get currentTurn() {\r\n    return this._currentTurn;\r\n  }\r\n\r\n  buildTurns(): void {\r\n    this._entities.forEach((entity, index) => {\r\n      const turn = this.buildTurnFor(entity, index + 1);\r\n      this._turns.push(turn);\r\n    });\r\n  }\r\n\r\n  buildTurnFor(entity: IEntity, turnNumber: number): ITurn {\r\n    const turnBuilder = new TurnResolver<ITurn, ITurnSettings>(\r\n      this.turnType as IConstructableTurn<ITurn>\r\n    );\r\n    \r\n    const turn = turnBuilder.create({ owner: entity, turnNumber } as ITurnSettings);\r\n    \r\n    turn.on('begin', this.onTurnBegin.bind(this));\r\n    turn.on('end', this.onTurnEnd.bind(this));\r\n\r\n    return turn;\r\n  }\r\n\r\n  onTurnBegin({ turn }: ITurnEvent): void {\r\n    this.emit('turn', { turn });\r\n  }\r\n\r\n  onTurnEnd({ turn }: ITurnEvent): void {\r\n    this.updateTurn(turn);\r\n  }\r\n\r\n  begin(): void {\r\n    this.emit('before:begin', { round: this });\r\n\r\n    this.buildTurns();\r\n    this.announceTurn();\r\n\r\n    this.emit('begin', { round: this });\r\n  }\r\n  \r\n  announceTurn(): void {\r\n    const nextTurn: ITurn = this._turns.find(turn => !turn.isResolved()) as ITurn;\r\n    this._currentTurn = nextTurn;\r\n\r\n    nextTurn.begin();\r\n  }\r\n\r\n  updateTurn(turn: ITurn): void {\r\n    const previousTurnIndex = turn.turnNumber - 1;\r\n\r\n    this._turns[previousTurnIndex].action = turn.action;\r\n    this.checkIfRoundIsComplete();\r\n  }\r\n  \r\n  checkIfRoundIsComplete(): void {\r\n    if (this._turns.every(turn => turn.isResolved())) {\r\n      this.emit('complete', { round: this });\r\n    } else {\r\n      this.announceTurn();\r\n    }\r\n  }\r\n}","import { EventEmitter } from 'eventemitter3';\r\nimport IEntity from '../entity/entity.i';\r\nimport ITurn from './turn.i';\r\nimport ITurnSettings from './turn-settings.i';\r\nimport IAction from './action.i';\r\n\r\nexport default abstract class AbstractTurn extends EventEmitter implements ITurn {\r\n  protected readonly _turnNumber: number;\r\n  protected readonly _owner: IEntity;\r\n  protected _action?: IAction;\r\n  \r\n  constructor({ turnNumber, owner }: ITurnSettings) {\r\n    super();\r\n    \r\n    this._turnNumber = turnNumber;\r\n    this._owner = owner;\r\n  }\r\n\r\n  isResolved(): boolean {\r\n    return this._action !== null && this._action !== undefined;\r\n  }\r\n\r\n  get turnNumber() {\r\n    return this._turnNumber;\r\n  }\r\n\r\n  get owner() {\r\n    return this._owner;\r\n  }\r\n\r\n  get action() {\r\n    return this._action;\r\n  }\r\n\r\n  set action(newAction) {\r\n    this._action = newAction;\r\n  }\r\n\r\n  begin() {\r\n    this.emit('begin', { turn: this });\r\n  }\r\n\r\n  end() {\r\n    this.emit('end', { turn: this });\r\n  }\r\n\r\n  resolve(action: IAction): void {\r\n    this._action = action;\r\n  }\r\n}","import AbstractRound from './abstract-round';\r\n\r\nexport default class Round extends AbstractRound {}","import IConstructableTurn from './constructable-turn.i';\r\n\r\nexport default class TurnResolver<TurnType, TurnSettingsType> {\r\n  constructor(private constructorFunction: IConstructableTurn<TurnType>) {}\r\n\r\n  create(turnSettings: TurnSettingsType): TurnType {\r\n    return new this.constructorFunction(turnSettings);\r\n  }\r\n}","import AbstractTurn from './abstract-turn';\r\n\r\nexport default class Turn extends AbstractTurn {}","import IRandomAlgorithm from \"./random-algorithm.i\";\r\n\r\n/**\r\n * Default constant value for setting up the BBS PRNG.\r\n * P must be a prime number.\r\n *\r\n * @public\r\n * @type {Number}\r\n * @const P\r\n * @static\r\n */\r\nexport const P: number = 87566873;\r\n\r\n/**\r\n * Default constant value for setting up the BBS PRNG.\r\n * Q must be a prime number.\r\n *\r\n * @public\r\n * @const Q\r\n * @static\r\n * @type {Number}\r\n */\r\nexport const Q: number = 5631179;\r\n\r\n/**\r\n * A list of default seed values, tested to be evenly distributed.\r\n\r\n * @public\r\n * @const DefaultSeeds\r\n * @static\r\n * @type {Array.<Number>}\r\n * @see  http://wiki.fib.upc.es/sim/index.php/Blum_Blum_Shub#Tests\r\n */\r\nexport const DefaultSeeds: number[] = [193945, 740191, 191];\r\n\r\nexport type BlumBlumShubAlgorithmSettings = {\r\n  p?: number,\r\n  q?: number,\r\n  seedNumber?: number,\r\n};\r\n\r\n/**\r\n * Instantiates a Blum Blum Shub PRNG.\r\n *\r\n * @public\r\n * @class BlumBlumShubAlgorithm\r\n */\r\nexport class BlumBlumShubAlgorithm implements IRandomAlgorithm {\r\n  readonly seedNumber: number;\r\n  M: number;\r\n  P: number;\r\n  Q: number;\r\n  randomIndex: number;\r\n\r\n  /**\r\n   * Initializes the generator.\r\n   *\r\n   * @param  {Number} p    A prime value (defaults to P).\r\n   * @param  {Number} q    A prime value (defaults to Q).\r\n   * @param  {Number} seedNumber A seed number to feed the generator (defaults to any value\r\n   *                       in DefaultSeeds).\r\n   * @constructor\r\n   */\r\n  constructor(public settings?: BlumBlumShubAlgorithmSettings) {\r\n    const defaults = {\r\n      p: P,\r\n      q: Q,\r\n      seedNumber: null,\r\n    };\r\n\r\n    this.settings = Object.assign({}, defaults, settings);\r\n\r\n    let seedNumber: number = this.settings.seedNumber as number;\r\n    const p = this.settings.p as number;\r\n    const q = this.settings.q as number;\r\n\r\n    if (seedNumber) {\r\n      seedNumber = Math.abs(seedNumber);\r\n    } else {\r\n      seedNumber = DefaultSeeds[Math.floor(Math.random() * (DefaultSeeds.length))];\r\n    }\r\n\r\n    this.seedNumber = seedNumber;\r\n    this.randomIndex = seedNumber;\r\n    this.M = p * q;\r\n    this.P = p;\r\n    this.Q = q;\r\n  }\r\n\r\n  /**\r\n   * Determines if the generator works better by being reinstantiated after\r\n   * every generated number.\r\n   *\r\n   * @public\r\n   * @static\r\n   * @function recommendsToReinstantiate\r\n   * @memberof BlumBlumShubAlgorithm\r\n   * @return {Boolean}\r\n   */\r\n  static recommendsToReinstantiate() {\r\n    return true;\r\n  }\r\n\r\n  recommendsToReinstantiate() {\r\n    return BlumBlumShubAlgorithm.recommendsToReinstantiate();\r\n  }\r\n\r\n  /**\r\n   * Generates a pseudo-random number and updates the seed for a next roll.\r\n   * Number is always between 0 and 1.\r\n   *\r\n   * @public\r\n   * @function generateRandom\r\n   * @memberof BlumBlumShubAlgorithm\r\n   * @instance\r\n   * @return {Number}\r\n   */\r\n  generateRandom() {\r\n    const r = this.randomIndex * this.randomIndex % this.M;\r\n    this.randomIndex = r;\r\n    return Math.abs(r / this.M);\r\n  }\r\n\r\n  /**\r\n   * Same as `generateRandom()`, but converts the number to an Integer.\r\n   *\r\n   * @public\r\n   * @function generateRandomInteger\r\n   * @memberof BlumBlumShubAlgorithm\r\n   * @instance\r\n   * @return {Number}\r\n   */\r\n  generateRandomInteger() {\r\n    return Number(this.generateRandom().toString().replace(/\\./, ''));\r\n  }\r\n}\r\n","import IRandomAlgorithm from \"./random-algorithm.i\";\r\nimport assert from '../utils/assert/assert';\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const N: number = 624;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const M: number = 397;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const MATRIX_A: number = 0x9908b0df;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const UPPER_MASK: number = 0x80000000;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const LOWER_MASK: number = 0x7fffffff;\r\n\r\n/**\r\n * @ignore\r\n */\r\nexport const INIT_BY_ARRAY_SEED: number = 19650218;\r\n\r\nexport type MersenneTwisterAlgorithmSettings = {\r\n  seedNumber?: number,\r\n};\r\n\r\nexport class MersenneTwisterAlgorithm implements IRandomAlgorithm {\r\n  seedNumber: number;\r\n  MT: number[];\r\n  MTI: number;\r\n\r\n  /**\r\n   * Instantiates the Mersenne-Twister generator.\r\n   *\r\n   * @param  {Object} settings - Configuration for the generator:\r\n   *         - seedNumber: The number for the seed.\r\n   */\r\n  constructor(public settings?: MersenneTwisterAlgorithmSettings) {\r\n    let seedNumber;\r\n\r\n    const defaults = {\r\n      seedNumber: undefined,\r\n    };\r\n\r\n    this.settings = Object.assign({}, defaults, settings);\r\n\r\n    const seed: number = this.settings.seedNumber as number;\r\n\r\n    if (seed) {\r\n      seedNumber = Math.abs(seed);\r\n    } else {\r\n      // Try seeding with a custom algorithm.\r\n      seedNumber = Number(new Date().getTime().toString().split('')\r\n        .sort(() => 0.5 - Math.random()).join(''));\r\n    }\r\n\r\n    this.MT = new Array(N);\r\n    this.MTI = N + 1;\r\n    this.seedNumber = seedNumber;\r\n\r\n    this.initializeRandomGenerator(seedNumber);\r\n  }\r\n\r\n  /**\r\n   * Determines if the generator works better by being reinstantiated after\r\n   * every generated number.\r\n   *\r\n   * @public\r\n   * @function recommendsToReinstantiate\r\n   * @memberof MersenneTwisterAlgorithm\r\n   * @static\r\n   * @return {Boolean}\r\n   */\r\n  static recommendsToReinstantiate() {\r\n    return false;\r\n  }\r\n\r\n  recommendsToReinstantiate() {\r\n    return MersenneTwisterAlgorithm.recommendsToReinstantiate();\r\n  }\r\n\r\n  /**\r\n   * Loads the initialization vector required for the algorithm,\r\n   * according to a given seed.\r\n   *\r\n   * @public\r\n   * @method initializeRandomGenerator\r\n   * @memberof MersenneTwisterAlgorithm\r\n   * @instance\r\n   * @param  {Number} seedNumber - A seed can be any non-negative integer value.\r\n   */\r\n  initializeRandomGenerator(seedNumber: number) {\r\n    let seed = Math.abs(Math.floor(seedNumber));\r\n\r\n    this.MT[0] = seed >> 0;\r\n    for (this.MTI = 1; this.MTI < N; this.MTI += 1) {\r\n      seed = this.MT[this.MTI - 1] ^ (this.MT[this.MTI - 1] >> 30);\r\n      this.MT[this.MTI] = ((((seed & 0xffff0000) >> 16) * 1812433253) << 16)\r\n                        + ((seed & 0x0000ffff) * 1812433253)\r\n                        + this.MTI;\r\n      this.MT[this.MTI] = this.MT[this.MTI] >> 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * An alternative way to load the initialization vector for the algorithm.\r\n   *\r\n   * @public\r\n   * @method initializeByArray\r\n   * @memberof MersenneTwisterAlgorithm\r\n   * @instance\r\n   * @param  {Array.<Number>} initKeyArray - A list of non-negative integer values.\r\n   */\r\n  initializeByArray(initKeyArray: number[]) {\r\n    let i = 1;\r\n    let j = 0;\r\n    const keyLength = initKeyArray.length;\r\n\r\n    assert(keyLength > 0, 'MersenneTwister#initializeByArray: initKeyArray must be an Array of at least one non-negative number.');\r\n\r\n    // Ensure positive, integer values.\r\n    const initKey = initKeyArray.map(v => Math.abs(Math.floor(v)));\r\n\r\n    this.initializeRandomGenerator(INIT_BY_ARRAY_SEED);\r\n\r\n    let k = N > keyLength ? N : keyLength;\r\n\r\n    while (k > 0) {\r\n      const s = this.MT[i - 1] ^ (this.MT[i - 1] >> 30);\r\n      this.MT[i] = (this.MT[i] ^ (((((s & 0xffff0000) >> 16) * 1664525) << 16)\r\n        + ((s & 0x0000ffff) * 1664525)))\r\n        + initKey[j] + j;\r\n      this.MT[i] = this.MT[i] >> 0;\r\n      i += 1;\r\n      j += 1;\r\n      if (i >= N) {\r\n        this.MT[0] = this.MT[N - 1];\r\n        i = 1;\r\n      }\r\n      if (j >= keyLength) {\r\n        j = 0;\r\n      }\r\n      k -= 1;\r\n    }\r\n    for (k = N - 1; k > 0; k -= 1) {\r\n      const s = this.MT[i - 1] ^ (this.MT[i - 1] >> 30);\r\n      this.MT[i] = (this.MT[i] ^ (((((s & 0xffff0000) >> 16) * 1566083941) << 16)\r\n        + ((s & 0x0000ffff) * 1566083941))) - i;\r\n      this.MT[i] = this.MT[i] >> 0;\r\n      i += 1;\r\n      if (i >= N) {\r\n        this.MT[0] = this.MT[N - 1];\r\n        i = 1;\r\n      }\r\n    }\r\n    this.MT[0] = 0x80000000;\r\n  }\r\n\r\n  /**\r\n   * Returns a random non-negative integer value.\r\n   *\r\n   * @public\r\n   * @function generateRandomInteger\r\n   * @memberof MersenneTwisterAlgorithm\r\n   * @instance\r\n   * @return {Number}\r\n   */\r\n  generateRandomInteger() {\r\n    let y;\r\n    const mag01 = [0x0, MATRIX_A];\r\n\r\n    if (this.MTI >= N) {\r\n      let kk;\r\n      if (this.MTI === N + 1) {\r\n        this.initializeRandomGenerator(5489);\r\n      }\r\n      for (kk = 0; kk < N - M; kk += 1) {\r\n        y = (this.MT[kk] & UPPER_MASK) | (this.MT[kk + 1] & LOWER_MASK);\r\n        this.MT[kk] = this.MT[kk + M] ^ (y >> 1) ^ mag01[y & 0x1];\r\n      }\r\n      while (kk < N - 1) {\r\n        y = (this.MT[kk] & UPPER_MASK) | (this.MT[kk + 1] & LOWER_MASK);\r\n        this.MT[kk] = this.MT[kk + M - N] ^ (y >> 1) ^ mag01[y & 0x1];\r\n        kk += 1;\r\n      }\r\n      y = (this.MT[N - 1] & UPPER_MASK) | (this.MT[0] & LOWER_MASK);\r\n      this.MT[N - 1] = this.MT[M - 1] ^ (y >> 1) ^ mag01[y & 0x1];\r\n\r\n      this.MTI = 0;\r\n    }\r\n\r\n    this.MTI += 1;\r\n    y = this.MT[this.MTI];\r\n\r\n    y ^= (y >> 11);\r\n    y ^= (y << 7) & 0x9d2c5680;\r\n    y ^= (y << 15) & 0xefc60000;\r\n    y ^= (y >> 18);\r\n\r\n    return y >> 0;\r\n  }\r\n\r\n  /**\r\n   * Returns a non-negative random integer value, within\r\n   * the range of Int31.\r\n   *\r\n   * @public\r\n   * @function generateRandomInteger31\r\n   * @memberof MersenneTwisterAlgorithm\r\n   * @instance\r\n   * @return {Number}\r\n   */\r\n  generateRandomInteger31() {\r\n    return this.generateRandomInteger() >> 1;\r\n  }\r\n\r\n  /**\r\n   * Returns a non-negative random real number between 0 and 1.\r\n   *\r\n   * @public\r\n   * @function generateRandomReal\r\n   * @memberof MersenneTwisterAlgorithm\r\n   * @instance\r\n   * @return {Number}\r\n   */\r\n  generateRandomReal() {\r\n    return this.generateRandomInteger() * (1.0 / 4294967295.0);\r\n  }\r\n\r\n  /**\r\n   * Returns a non-negative random number between 0 and 1.\r\n   *\r\n   * @public\r\n   * @function generateRandom\r\n   * @memberof MersenneTwisterAlgorithm\r\n   * @instance\r\n   * @return {Number}\r\n   */\r\n  generateRandom() {\r\n    return this.generateRandomInteger() * (1.0 / 4294967296.0);\r\n  }\r\n\r\n  /**\r\n   * Returns a non-negative random real number between 0 and 1.\r\n   *\r\n   * @public\r\n   * @function generateRandomReal3\r\n   * @memberof MersenneTwisterAlgorithm\r\n   * @instance\r\n   * @return {Number}\r\n   */\r\n  generateRandomReal3() {\r\n    return (this.generateRandomInteger() + 0.5) * (1.0 / 4294967296.0);\r\n  }\r\n\r\n  /**\r\n   * Returns a non-negative random rumber with a resolution\r\n   * of 53 bits.\r\n   *\r\n   * @public\r\n   * @function generateRandomReal53BitResolution\r\n   * @memberof MersenneTwisterAlgorithm\r\n   * @instance\r\n   * @return {Number}\r\n   */\r\n  generateRandomReal53BitResolution() {\r\n    const a = this.generateRandomInteger() >> 5;\r\n    const b = this.generateRandomInteger() >> 6;\r\n    return (a * 671084464.0 + b) * (1.0 / 9007199254740992.0);\r\n  }\r\n}","import IConstructableRandomAlgorithm from './constructable-random-algorithm.i';\r\n\r\nexport default class Randomizer<Algorithm> {\r\n  constructor(private constructorFunction: IConstructableRandomAlgorithm<Algorithm>) {}\r\n  \r\n  create(randomizerSettings: object): Algorithm {\r\n    return new this.constructorFunction(randomizerSettings);\r\n  }\r\n}","import IFaction from './faction.i';\nimport IFactionSettings from './faction-settings.i';\nimport IFactionRelationship from './faction-relationship.i';\nimport { FactionRelationshipStatus } from './faction-relationship-status';\nimport { groupAndMap } from '../utils/group-by/group-by';\nimport IGrouping from '../utils/group-by/grouping.i';\n\nexport default abstract class AbstractFaction implements IFaction {\n  protected _id: string;\n  protected _name: string;\n  protected _allRelationships: IFactionRelationship[];\n  protected _relationshipsByStatus: IGrouping<IFaction>;\n\n  constructor({ id, name }: IFactionSettings) {\n    this._id = id;\n    this._name = name;\n    \n    this._allRelationships = [];\n    this._relationshipsByStatus = {}; \n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get allRelationships() {\n    return this._allRelationships;\n  }\n\n  set allRelationships(value) {\n    this._allRelationships = value;\n    this._relationshipsByStatus = this.groupRelationshipsByStatus();\n  }\n\n  get relationshipsByStatus() {\n    return this._relationshipsByStatus;\n  }\n\n  groupRelationshipsByStatus(): IGrouping<IFaction> {\n    return groupAndMap<IFactionRelationship, IFaction>(\n      this._allRelationships,\n      (relation) => relation.relationshipStatus,\n      (relation) => relation.faction\n    );\n  }\n\n  getAlliedFactions() {\n    return this._relationshipsByStatus[FactionRelationshipStatus.ALLY];\n  }\n\n  getNeutralFactions() {\n    return this._relationshipsByStatus[FactionRelationshipStatus.NEUTRAL];\n  }\n\n  getEnemyFactions() {\n    return this._relationshipsByStatus[FactionRelationshipStatus.ENEMY];\n  }\n\n  addRelationship(faction: IFaction, status: FactionRelationshipStatus): void {\n    const relationship: IFactionRelationship = {\n      faction,\n      relationshipStatus: status,\n    };\n\n    this._allRelationships.push(relationship);\n    this._relationshipsByStatus = this.groupRelationshipsByStatus();\n  }\n\n  addAlliedRelationship(faction: IFaction): void {\n    this.addRelationship(faction, FactionRelationshipStatus.ALLY);\n  }\n\n  addNeutralRelationship(faction: IFaction): void {\n    this.addRelationship(faction, FactionRelationshipStatus.NEUTRAL);\n  }\n\n  addEnemyRelationship(faction: IFaction): void {\n    this.addRelationship(faction, FactionRelationshipStatus.ENEMY);\n  }\n}","import AbstractFaction from './abstract-faction';\r\n\r\nexport default class Faction extends AbstractFaction {}","import AssertionError from './assertion-error';\r\n\r\nexport default function assert(condition: boolean, message: string) {\r\n  if (!condition) {\r\n    throw new AssertionError(message);\r\n  }\r\n}","export default class AssertionError extends Error {\r\n  constructor(message: string) {\r\n    super();\r\n    this.message = `[AssertionError] An assertion has failed${message ? (': ' + message) : ''}`;\r\n  }\r\n}\r\n","import IIndexedByString from './indexed-by-string.i';\r\nimport Eventable from '../../base/eventable';\r\nimport ICollection from './collection.i';\r\nimport IQuery from './query.i';\r\nimport assert from '../assert/assert';\r\n\r\nabstract class AbstractCollection<T extends {[index: string]: any}> extends Eventable implements ICollection<T> {\r\n  public indexName: string;\r\n  protected _list: IIndexedByString<T> = {};\r\n\r\n  constructor(indexName: string) {\r\n    super();\r\n\r\n    this.indexName = indexName;\r\n  }\r\n\r\n  get count(): number {\r\n    return this.getAllKeys().length;\r\n  }\r\n\r\n  get(id: string): T | undefined {\r\n    return this._list[id];\r\n  }\r\n\r\n  getAll(): T[] {\r\n    return this.getAllKeys().map((id: string) => this._list[id]);\r\n  }\r\n\r\n  getAllKeys(): string[] {\r\n    return Object.keys(this._list);\r\n  }\r\n\r\n  where(condition: IQuery<T>): T[] {\r\n    return this.getAll().filter(condition);\r\n  }\r\n\r\n  contains(id: string): boolean {\r\n    return id in this._list;\r\n  }\r\n\r\n  add(...items: T[]): void {\r\n    this.emit('before:add', this, ...items);\r\n\r\n    items.forEach((item: T) => {\r\n      const index = item[this.indexName];\r\n      assert(!this.contains(index), `An item already exists with key: ${index}`);\r\n\r\n      this._list[index] = item;\r\n    });\r\n\r\n    this.emit('add', this);\r\n  }\r\n\r\n  remove(id: string): void {\r\n    if (this.contains(id)) {\r\n      this.emit('before:remove', this);\r\n\r\n      delete this._list[id];\r\n\r\n      this.emit('remove');\r\n    }\r\n  }\r\n\r\n  removeAll(): void {\r\n    this.emit('before:removeAll', this);\r\n\r\n    this._list = {};\r\n\r\n    this.emit('removeAll', this);\r\n  }\r\n}\r\n\r\nexport default AbstractCollection;","import AbstractCollection from './abstract-collection';\r\n\r\nexport default class Collection<T> extends AbstractCollection<T> {\r\n  constructor(public indexName: string) {\r\n    super(indexName);\r\n  }\r\n\r\n  static fromArrayOf<T>(items: T[], indexName: string) {\r\n    const collection: Collection<T> = new Collection<T>(indexName);\r\n    \r\n    collection.add(...items);\r\n    \r\n    return collection;\r\n  }  \r\n}","import IIndexedByString from '../collection/indexed-by-string.i';\r\nimport IGroupCriteria from './group-criteria.i';\r\nimport IGrouping from './grouping.i';\r\nimport ITransform from './transform.i';\r\n\r\nexport function group<T>(\r\n  array: T[], \r\n  criteria: IGroupCriteria<T>,\r\n): IGrouping<T> {\r\n  const result: IGrouping<T> = {};\r\n\r\n  array.forEach((item) => {\r\n    const grouping = criteria(item);\r\n    if (!(grouping in result)) {\r\n      result[grouping] = [item];\r\n    } else {\r\n      result[grouping].push(item);\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport function groupAndMap<T, R>(\r\n  array: T[], \r\n  criteria: IGroupCriteria<T>,\r\n  transform: ITransform<T, R>,\r\n): IGrouping<R> {\r\n  const result: IGrouping<R> = {};\r\n\r\n  array.forEach((item) => {\r\n    const grouping = criteria(item);\r\n    if (!(grouping in result)) {\r\n      result[grouping] = [transform(item)];\r\n    } else {\r\n      result[grouping].push(transform(item));\r\n    }\r\n  });\r\n\r\n  return result;\r\n}","import assert from '../assert/assert';\r\n\r\nexport default class Range {\r\n  lowerBound: number;\r\n  upperBound: number;\r\n\r\n  constructor(lowerBound: number, upperBound: number) {\r\n    assert(lowerBound !== upperBound, 'Range#constructor: lowerBound and upperBound cannot be equal');\r\n    \r\n    this.lowerBound = Math.min(lowerBound, upperBound);\r\n    this.upperBound = Math.max(lowerBound, upperBound);    \r\n  }\r\n\r\n  /**\r\n   * Checks if a value is in the defined range.\r\n   *\r\n   * @public\r\n   * @function\r\n   * @param  {Number} value - Value to compare.\r\n   * @return {Boolean} true if in range, false otherwise.\r\n   */\r\n  includes(value: number): boolean {\r\n    return this.lowerBound <= value && value <= this.upperBound;\r\n  }  \r\n\r\n  /**\r\n   * Converts the Range object to a string representation.\r\n   * \r\n   * @public\r\n   * @function\r\n   * @return {String}\r\n   */\r\n  toString(): string {\r\n    return `${this.lowerBound.toString()} ~ ${this.upperBound.toString()}`;\r\n  }\r\n\r\n  /**\r\n   * Creates a Range from an array of two numbers.\r\n   *\r\n   * @public\r\n   * @static\r\n   * @function\r\n   * @param  {Array.<Number>} values - Boundaries of the range.\r\n   * @return {Range}\r\n   */\r\n  static fromArray(values: number[]): Range {\r\n    const errorMessage = 'Range#fromArray: values must be an Array of 2 numerical elements';\r\n\r\n    assert(values.length === 2, errorMessage);\r\n\r\n    return new Range(values[0], values[1]);\r\n  }\r\n\r\n  /**\r\n   * Creates a Range from a string-based notation.\r\n   *\r\n   * @public\r\n   * @static\r\n   * @function\r\n   * @param  {String} notedRange - A string representation of a Range,\r\n   *                  using delimiters. Accepted formats: x,y x;y x:y x~y.\r\n   * @return {Range}\r\n   */\r\n  static fromNotation(notedRange: string): Range | undefined {\r\n    const errorMessage = 'Range#fromNotation: notedRange must use one of these formats: x,y x;y x:y x~y';\r\n\r\n    assert(notedRange !== undefined, errorMessage);\r\n    assert(typeof notedRange === 'string', errorMessage);\r\n\r\n    let range: Range | undefined;\r\n    const allowedDelimiters: string[] = [',', ';', ':', '~'];\r\n\r\n    assert(allowedDelimiters.some(delimiter => notedRange.includes(delimiter)), errorMessage);\r\n\r\n    let delimiterFound = false;\r\n\r\n    while (!delimiterFound) {\r\n      const delimiter: string = allowedDelimiters.shift() as string;\r\n\r\n      delimiterFound = notedRange.includes(delimiter);\r\n\r\n      if (delimiterFound) {\r\n        const data = notedRange.split(delimiter).map(d => d.trim());\r\n\r\n        assert(data.length === 2, errorMessage);\r\n\r\n        range = Range.fromArray(data.map(d => Number(d)));\r\n      }\r\n    }\r\n\r\n    return range;\r\n  }  \r\n}\r\n","import Collection from \"../collection/collection\";\r\nimport { BlumBlumShubAlgorithm } from \"../../random/blum-blum-shub\";\r\nimport IShuffledElement from \"./shuffled-element.i\";\r\n\r\nconst shuffleArray = <T>(list: T[]): T[] => {\r\n  const randomizer = new BlumBlumShubAlgorithm();\r\n  \r\n  return list.map((element) => {\r\n    return {\r\n      element,\r\n      shuffleIndex: randomizer.generateRandom(),\r\n    } as IShuffledElement<T>;\r\n  }).sort((leftElement: IShuffledElement<T>, rightElement: IShuffledElement<T>) => {\r\n    if (leftElement.shuffleIndex < rightElement.shuffleIndex) {\r\n      return 1;\r\n    }\r\n\r\n    if (leftElement.shuffleIndex > rightElement.shuffleIndex) {\r\n      return -1;\r\n    }\r\n\r\n    return 0;\r\n  }).map((shuffledElement) => shuffledElement.element);\r\n};\r\n\r\nconst shuffleCollection = <T>(collection: Collection<T>): Collection<T> => {\r\n  const shuffledCollection = new Collection<T>(collection.indexName);\r\n  \r\n  shuffledCollection.add(...shuffleArray(collection.getAll()));\r\n  \r\n  return shuffledCollection;\r\n};\r\n\r\nexport {\r\n  shuffleArray,\r\n  shuffleCollection,\r\n};","import Eventable from './base/eventable';\nimport XethyaObject from './base/object';\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Base\n */\nconst Base = {\n  Eventable,\n  XethyaObject,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Utils\n */\nimport assert from './utils/assert/assert';\nimport Range from './utils/range/range';\nimport AbstractCollection from './utils/collection/abstract-collection';\nimport Collection from './utils/collection/collection';\nimport { group, groupAndMap } from './utils/group-by/group-by';\nimport { shuffleArray, shuffleCollection } from './utils/shuffle/shuffle';\n\nconst Utils = {\n  assert,\n\n  Range,\n  AbstractCollection,\n  Collection,\n\n  group,\n  groupAndMap,\n\n  shuffleArray,\n  shuffleCollection,\n} \n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Random\n */ \n\nimport * as BlumBlumShub from './random/blum-blum-shub';\nimport * as MersenneTwister from './random/mersenne-twister';\nimport Randomizer from './random/randomizer';\n\nconst Random = {\n  BlumBlumShub,\n  MersenneTwister,\n  Randomizer,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Dice\n */\n\nimport { Dice } from './dice/dice';\n\nimport { DiceThrow } from './dice/throws/dice-throw';\nimport DiceThrowResult from './dice/throws/dice-throw-result';\nimport { ChanceThrow } from './dice/throws/chance-throw';\nimport ChanceThrowResult from './dice/throws/chance-throw-result';\nimport SkillThrow from './dice/throws/skill-throw';\nimport { SkillThrowResult } from './dice/throws/skill-throw-result';\n\nimport { CoinFlip, CoinFlipSides } from './dice/presets/coin-flip';\n\nconst Dices = {\n  Dice,\n  DiceThrow,\n  ChanceThrow,\n  ChanceThrowResult,\n  SkillThrow,\n  SkillThrowResult,\n  Presets: {\n    CoinFlip,\n  },\n}\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Entities\n */\n\nimport { AbstractEntity } from './entity/abstract-entity';\nimport Entity from './entity/entity';\nimport { AbleEntity } from './entity/able-entity';\nimport { LivingEntity } from './entity/living-entity';\nimport { Race } from './entity/race/race';\nimport Modifier from './entity/modifiers/modifier';\nimport BaseModifier from './entity/modifiers/base-modifier';\nimport { BaseModifierCalculator } from './entity/modifiers/base-modifier-calculator';\nimport ModifierCollection from './entity/modifiers/modifier-collection';\nimport { Attribute } from './entity/attributes/attribute';\nimport AttributeCollection from './entity/attributes/attribute-collection';\nimport Stat from './entity/stats/stat';\nimport StatCollection from './entity/stats/stat-collection';\nimport { Skill, SkillSettings } from './entity/skills/skill';\nimport SkillCollection from './entity/skills/skill-collection';\n\nconst Entities = {\n  AbstractEntity,\n  Entity,\n  AbleEntity,\n  LivingEntity,\n  Race,\n  Modifier,\n  BaseModifierCalculator,\n  BaseModifier,\n  ModifierCollection,\n  Attribute,\n  AttributeCollection,\n  Stat,\n  StatCollection,\n  Skill,\n  SkillCollection,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Relationships\n */\n\nimport AbstractFaction from './relationships/abstract-faction';\nimport Faction from './relationships/faction';\n\nconst Relationships = {\n  Factions: {\n    AbstractFaction,\n    Faction,\n  }\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Interactions\n */\n\nimport TurnResolver from './interaction/turn-resolver';\nimport AbstractTurn from './interaction/abstract-turn';\nimport Turn from './interaction/turn';\nimport AbstractRound from './interaction/abstract-round';\nimport Round from './interaction/round';\nimport CombatTurn from './combat/combat-turn';\nimport CombatRound from './combat/combat-round';\nimport AbstractCombatSimulation from './combat/abstract-combat-simulation';\nimport CombatSimulation from './combat/combat-simulation';\nimport IStatCalculator from './entity/stats/stat-calculator.i';\n\nconst Interactions = {\n  TurnResolver,\n  AbstractTurn,\n  Turn,\n  AbstractRound,\n  Round,\n  Combat: {\n    CombatTurn,\n    CombatRound,\n    AbstractCombatSimulation,\n    CombatSimulation,\n  }\n};\n\nexport {\n  Base,\n  Utils,\n  Dices,\n  Random,\n  Entities,\n  Relationships,\n  Interactions,\n  \n  IStatCalculator,\n};"],"sourceRoot":""}