{"version":3,"sources":["webpack://xethya/webpack/bootstrap","webpack://xethya/./src/utils/assert/assert.ts","webpack://xethya/./src/entity/attributes/attribute-collection.ts","webpack://xethya/./src/utils/collection/collection.ts","webpack://xethya/./src/base/object.ts","webpack://xethya/./src/base/eventable.ts","webpack://xethya/./src/entity/modifiers/modifier-collection.ts","webpack://xethya/./src/random/blum-blum-shub.ts","webpack://xethya/./src/entity/stats/stat-collection.ts","webpack://xethya/./src/entity/modifiers/modifier.ts","webpack://xethya/./src/entity/skills/skill-collection.ts","webpack://xethya/./src/dice/throws/chance-throw-result.ts","webpack://xethya/./src/dice/throws/chance-throw.ts","webpack://xethya/./src/dice/dice.ts","webpack://xethya/./src/utils/range/range.ts","webpack://xethya/./src/entity/attributes/attribute.ts","webpack://xethya/./src/entity/modifiers/base-modifier-calculator.ts","webpack://xethya/./src/entity/modifiers/base-modifier.ts","webpack://xethya/./src/entity/able-entity.ts","webpack://xethya/./src/entity/entity.ts","webpack://xethya/./src/entity/abstract-entity.ts","webpack://xethya/./src/dice/throws/skill-throw-result.ts","webpack://xethya/./src/dice/throws/skill-throw.ts","webpack://xethya/./src/dice/throws/dice-throw-result.ts","webpack://xethya/./src/dice/throws/dice-throw.ts","webpack://xethya/./src/random/randomizer.ts","webpack://xethya/./src/utils/collection/abstract-collection.ts","webpack://xethya/./src/entity/skills/skill.ts","webpack://xethya/./src/entity/stats/stat.ts","webpack://xethya/./src/entity/race/race.ts","webpack://xethya/./src/entity/living-entity.ts","webpack://xethya/./src/dice/presets/coin-flip.ts","webpack://xethya/./src/random/mersenne-twister.ts","webpack://xethya/./src/utils/assert/assertion-error.ts","webpack://xethya/./node_modules/eventemitter3/index.js","webpack://xethya/./src/xethya.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","assertion_error_1","__importDefault","default","condition","message","collection_1","AttributeCollection","[object Object]","super","attributes","forEach","this","_bindAttributeEvents","bind","add","id","_unbindAttributeEvents","remove","getAll","attribute","contains","rawValue","count","map","modifiers","getSum","reduce","leftSum","rightSum","on","args","emit","off","collection","abstract_collection_1","Collection","indexName","items","eventable_1","eventemitter3_1","EventEmitter","ModifierCollection","_bindModifierEvents","_unbindModifierEvents","modifier","active","where","leftValue","rightValue","P","Q","DefaultSeeds","BlumBlumShubAlgorithm","settings","defaults","q","seedNumber","assign","Math","abs","floor","random","randomIndex","M","recommendsToReinstantiate","Number","generateRandom","toString","replace","StatCollection","stats","stat","_bindStatEvents","_unbindStatEvents","assert_1","source","_id","_value","_active","newId","newValue","previousValue","_source","newSource","SkillCollection","skills","skill","_bindSkillEvents","_unbindSkillEvents","use","dice_throw_result_1","throwResult","rolls","concat","throwType","_throwType","range_1","blum_blum_shub_1","dice_throw_1","chance_throw_result_1","ChanceThrow","DiceThrow","randomStrategy","undefined","numberOfDices","maxNumber","randomStrategySettings","rollScores","failure","success","criticalSuccess","key","rollSum","keys","_range","includes","diceThrow","roll","ctr","getRollSum","_calculateThrowType","randomizer_1","object_1","Dice","faces","_faces","setRandomStrategy","_mustPreservePrng","_initializeRandomizer","_randomizer","create","result","ceil","_regenerateRandomStrategyIfNeeded","_randomStrategy","_randomStrategySettings","Range","lowerBound","upperBound","min","max","values","length","notedRange","errorMessage","range","allowedDelimiters","some","delimiter","delimiterFound","shift","data","split","trim","fromArray","base_modifier_1","modifier_collection_1","Attribute","initialValue","valueRange","_rawValue","_valueRange","_updateBaseModifierValue","setValue","baseModifierValue","modifierSum","sign","BaseModifierCalculator","modifier_1","base_modifier_calculator_1","calculationMethod","_calculateValue","entity_1","skill_collection_1","AbleEntity","_skills","abstract_entity_1","AbstractEntity","attribute_collection_1","volatile","_name","_volatile","_attributes","_modifiers","newName","SkillThrowResult","skillValue","skillAttributesModifierValue","_skillValue","_skillAttributeModifiersValue","skillAttributeModifiersValue","totalRollValue","failureRoll","_failureRoll","chance_throw_1","skill_throw_result_1","_skill","dice_1","dices","push","dtr","constructorFunction","randomizerSettings","_list","filter","item","index","skill_throw_1","Skill","owner","primaryAttribute","_setPrimaryAttribute","attributeID","_primaryAttribute","newPrimaryAttribute","attribute_1","statCalculator","_lastCalculatedValue","_calculateStat","_valueChanged","stat_collection_1","Race","lifeExpectancy","defaultAlignment","heightRange","heritageAttributes","heritageSkills","heritageStats","able_entity_1","LivingEntity","_race","race","_age","age","_weight","weight","_height","height","_stats","_applyRacialTraits","_applyRaceAttributes","_applyRaceStats","_applyRaceSkills","raceTrait","CoinFlip","N","MATRIX_A","UPPER_MASK","LOWER_MASK","INIT_BY_ARRAY_SEED","MersenneTwisterAlgorithm","seed","Date","getTime","sort","join","MT","Array","MTI","initializeRandomGenerator","initKeyArray","j","keyLength","initKey","v","k","y","mag01","kk","generateRandomInteger","Error","has","prefix","Events","addListener","emitter","event","fn","context","once","TypeError","listener","evt","_events","_eventsCount","clearEvent","__proto__","eventNames","events","names","slice","getOwnPropertySymbols","listeners","handlers","ee","listenerCount","a1","a2","a3","a4","a5","len","arguments","removeListener","apply","removeAllListeners","prefixed","Eventable","XethyaObject","assert","AbstractCollection","BlumBlumShub","__importStar","MersenneTwister","Randomizer","ChanceThrowResult","SkillThrow","coin_flip_1","Entity","living_entity_1","race_1","Modifier","BaseModifier","stat_1","Stat","skill_1"],"mappings":"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","file":"xethya.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 34);\n","import AssertionError from './assertion-error';\n\nexport default function assert(condition: boolean, message: string) {\n  if (!condition) {\n    throw new AssertionError(message);\n  }\n}","import Collection from '../../utils/collection/collection';\nimport { Attribute } from './attribute';\n\nexport default class AttributeCollection extends Collection<Attribute> {\n  constructor() {\n    super('id');\n  }\n\n  add(...attributes: Attribute[]) {\n    attributes.forEach(this._bindAttributeEvents.bind(this));\n    super.add(...attributes);\n  }\n\n  remove(id: string): void {\n    this._unbindAttributeEvents(id);\n    super.remove(id);\n  }\n\n  removeAll(): void {\n    this.getAll().forEach(attribute => this.remove(attribute.id));    \n  }\n\n  setValue(id: string, value: number): void {\n    if (this.contains(id)) {\n      const attribute = this.get(id) as Attribute;\n      attribute.rawValue = value;\n    }\n  }\n\n  getModifierSumForAll() {\n    if (this.count === 0) {\n      return 0;\n    }\n    \n    return this.getAll()\n      .map(attribute => attribute.modifiers.getSum())\n      .reduce((leftSum, rightSum) => leftSum + rightSum);\n  }\n  \n  private _bindAttributeEvents(attribute: Attribute): void {\n    attribute.on('change:value', (...args) => {\n      this.emit('change:attribute:value', ...args);\n      this.emit(`change:attribute:${attribute.id}:value`, ...args);\n    });  \n  }\n\n  private _unbindAttributeEvents(id: string): void {\n    this.off(`change:attribute:${id}:value`);    \n  }\n\n  static fromArray(attributes: Attribute[]) : AttributeCollection {\n    const collection: AttributeCollection = new AttributeCollection();\n\n    collection.add(...attributes);\n\n    return collection;\n  }\n}","import AbstractCollection from './abstract-collection';\n\nexport default class Collection<T> extends AbstractCollection<T> {\n  constructor(public indexName: string) {\n    super(indexName);\n  }\n\n  static fromArrayOf<T>(items: T[], indexName: string) {\n    const collection: Collection<T> = new Collection<T>(indexName);\n    \n    collection.add(...items);\n    \n    return collection;\n  }  \n}","import Eventable from './eventable';\n\nclass XethyaObject extends Eventable {\n  constructor() {\n    super();\n  }\n}\n\nexport default XethyaObject;","import { EventEmitter } from 'eventemitter3';\n\nexport default class Eventable extends EventEmitter {\n  constructor() {\n    super();\n  }\n}","import Collection from '../../utils/collection/collection';\nimport Modifier from './modifier';\n\nexport default class ModifierCollection extends Collection<Modifier> {\n  constructor() {\n    super('id');\n  }\n\n  add(...modifiers: Modifier[]) {\n    modifiers.forEach(this._bindModifierEvents.bind(this));\n    super.add(...modifiers);\n  }\n\n  remove(id: string): void {\n    this._unbindModifierEvents(id);\n    super.remove(id);\n  }\n\n  removeAll(): void {\n    this.getAll().forEach(modifier => this.remove(modifier.id));\n  }\n\n  setValue(id: string, value: number): void {\n    if (this.contains(id)) {\n      const modifier = this.get(id) as Modifier;\n      modifier.value = value;\n    }\n  }\n\n  activate(id: string): void {\n    if (this.contains(id)) {\n      const modifier = this.get(id) as Modifier;\n      modifier.active = true;\n    }    \n  }\n\n  deactivate(id: string): void {\n    if (this.contains(id)) {\n      const modifier = this.get(id) as Modifier;\n      modifier.active = false;\n    }    \n  }\n\n  getSum(): number {\n    if (this.count === 0) {\n      return 0;\n    }\n\n    return this.where(modifier => modifier.active)\n      .map(modifier => modifier.value)\n      .reduce((leftValue, rightValue) => leftValue + rightValue);\n  }\n\n  private _bindModifierEvents(modifier: Modifier): void {\n    modifier.on('change:value', (...args) => {\n      this.emit('change:modifier:value', ...args);\n      this.emit(`change:modifier:${modifier.id}:value`, ...args);\n    });      \n\n    modifier.on('change:active', (...args) => {\n      this.emit('change:modifier:active', ...args);\n      this.emit(`change:modifier:${modifier.id}:active`, ...args);\n    });\n\n    modifier.on('activate', (...args) => {\n      this.emit('activate:modifier', ...args);\n      this.emit(`activate:modifier:${modifier.id}`, ...args);\n    });\n\n    modifier.on('deactivate', (...args) => {\n      this.emit('deactivate:modifier', ...args);\n      this.emit(`deactivate:modifier:${modifier.id}`, ...args);\n    });  \n  }\n\n  private _unbindModifierEvents(id: string): void {\n    this.off(`change:modifier:${id}:value`);\n    this.off(`change:modifier:${id}:active`);\n    this.off(`activate:modifier:${id}`);\n    this.off(`deactivate:modifier:${id}`);\n  }\n\n  static fromArray(modifiers: Modifier[]) : ModifierCollection {\n    const collection: ModifierCollection = new ModifierCollection();\n\n    collection.add(...modifiers);\n\n    return collection;\n  }  \n}","import IRandomAlgorithm from \"./random-algorithm.i\";\n\n/**\n * Default constant value for setting up the BBS PRNG.\n * P must be a prime number.\n *\n * @public\n * @type {Number}\n * @const P\n * @static\n */\nexport const P: number = 87566873;\n\n/**\n * Default constant value for setting up the BBS PRNG.\n * Q must be a prime number.\n *\n * @public\n * @const Q\n * @static\n * @type {Number}\n */\nexport const Q: number = 5631179;\n\n/**\n * A list of default seed values, tested to be evenly distributed.\n\n * @public\n * @const DefaultSeeds\n * @static\n * @type {Array.<Number>}\n * @see  http://wiki.fib.upc.es/sim/index.php/Blum_Blum_Shub#Tests\n */\nexport const DefaultSeeds: number[] = [193945, 740191, 191];\n\nexport type BlumBlumShubAlgorithmSettings = {\n  p?: number,\n  q?: number,\n  seedNumber?: number,\n};\n\n/**\n * Instantiates a Blum Blum Shub PRNG.\n *\n * @public\n * @class BlumBlumShubAlgorithm\n */\nexport class BlumBlumShubAlgorithm implements IRandomAlgorithm {\n  readonly seedNumber: number;\n  M: number;\n  P: number;\n  Q: number;\n  randomIndex: number;\n\n  /**\n   * Initializes the generator.\n   *\n   * @param  {Number} p    A prime value (defaults to P).\n   * @param  {Number} q    A prime value (defaults to Q).\n   * @param  {Number} seedNumber A seed number to feed the generator (defaults to any value\n   *                       in DefaultSeeds).\n   * @constructor\n   */\n  constructor(public settings?: BlumBlumShubAlgorithmSettings) {\n    const defaults = {\n      p: P,\n      q: Q,\n      seedNumber: null,\n    };\n\n    this.settings = Object.assign({}, defaults, settings);\n\n    let seedNumber: number = this.settings.seedNumber as number;\n    const p = this.settings.p as number;\n    const q = this.settings.q as number;\n\n    if (seedNumber) {\n      seedNumber = Math.abs(seedNumber);\n    } else {\n      seedNumber = DefaultSeeds[Math.floor(Math.random() * (DefaultSeeds.length))];\n    }\n\n    this.seedNumber = seedNumber;\n    this.randomIndex = seedNumber;\n    this.M = p * q;\n    this.P = p;\n    this.Q = q;\n  }\n\n  /**\n   * Determines if the generator works better by being reinstantiated after\n   * every generated number.\n   *\n   * @public\n   * @static\n   * @function recommendsToReinstantiate\n   * @memberof BlumBlumShubAlgorithm\n   * @return {Boolean}\n   */\n  static recommendsToReinstantiate() {\n    return true;\n  }\n\n  recommendsToReinstantiate() {\n    return BlumBlumShubAlgorithm.recommendsToReinstantiate();\n  }\n\n  /**\n   * Generates a pseudo-random number and updates the seed for a next roll.\n   * Number is always between 0 and 1.\n   *\n   * @public\n   * @function generateRandom\n   * @memberof BlumBlumShubAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandom() {\n    const r = this.randomIndex * this.randomIndex % this.M;\n    this.randomIndex = r;\n    return Math.abs(r / this.M);\n  }\n\n  /**\n   * Same as `generateRandom()`, but converts the number to an Integer.\n   *\n   * @public\n   * @function generateRandomInteger\n   * @memberof BlumBlumShubAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomInteger() {\n    return Number(this.generateRandom().toString().replace(/\\./, ''));\n  }\n}\n","import Stat from './stat';\nimport Collection from '../../utils/collection/collection';\n\nexport default class StatCollection extends Collection<Stat> {\n  constructor() {\n    super('id');\n  }\n\n  add(...stats: Stat[]) {\n    stats.forEach(stat => this._bindStatEvents.bind(this));\n    super.add(...stats);\n  }\n\n  remove(id: string): void {\n    this._unbindStatEvents(id);\n    super.remove(id);\n  }\n  \n  removeAll(): void {\n    this.getAll().forEach(stat => this.remove(stat.id));    \n  }\n\n  // TODO: This event isn't working, probably to the weird\n  // nature of `stat.value` emitting an event if its value\n  // changes.\n  private _bindStatEvents(stat: Stat): void {\n    stat.on('change:value', (...args) => {\n      this.emit('change:stat:value', ...args);\n      this.emit(`change:stat:${stat.id}:value`, ...args);\n    });  \n  }\n\n  private _unbindStatEvents(id: string): void {\n    this.off(`change:stat:${id}:value`);\n  }\n\n  static fromArray(stats: Stat[]) : StatCollection {\n    const collection: StatCollection = new StatCollection();\n\n    collection.add(...stats);\n\n    return collection;\n  }\n}","import assert from '../../utils/assert/assert';\nimport Eventable from '../../base/eventable';\n\nexport default class Modifier extends Eventable {\n  private _id: string = '';\n  private _value: number = 0;\n  private _active: boolean = true;\n  private _source: any;\n\n  constructor(id: string, value: number = 0, source: any = undefined) {\n    super();\n  \n    this.id = id;\n    this.source = source;\n    this._value = value;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(newId: string) {\n    assert(newId !== '', 'Modifier#set[id]: cannot be an empty String');\n\n    this._id = newId;\n  }\n\n  get active() {\n    return this._active;\n  }\n\n  set active(newValue: boolean) {\n    if (this._active !== newValue) {\n      this._active = newValue;\n      this.emit(newValue ? 'activate' : 'deactivate', this);\n      this.emit('change:active', this);\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  set value(newValue: number) {\n    if (this._value !== newValue) {\n      const previousValue: number = this._value;\n      this.emit('before:change:value', {\n        previousValue,\n        newValue,\n      });\n      this._value = newValue;\n      this.emit('change:value', this);\n    }\n  }\n\n  get source() {\n    return this._source;\n  }\n\n  set source(newSource) {\n    this._source = newSource;\n  }\n}","import { Skill } from './skill';\nimport { SkillThrowResult } from '../../dice/throws/skill-throw-result';\nimport Collection from '../../utils/collection/collection';\nimport assert from '../../utils/assert/assert';\n\nexport default class SkillCollection extends Collection<Skill> {\n  constructor() {\n    super('id');\n  }\n\n  add(...skills: Skill[]) {\n    skills.forEach(skill => this._bindSkillEvents.bind(this));\n    super.add(...skills);\n  }\n\n  remove(id: string): void {\n    this._unbindSkillEvents(id);\n    super.remove(id);\n  }\n\n  removeAll(): void {\n    this.getAll().forEach(skill => this.remove(skill.id));\n  }\n\n  useSkill(id: string): SkillThrowResult {\n    assert(this.contains(id), 'SkillCollection#useSkill: skill does not exist');\n\n    return (this.get(id) as Skill).use();\n  }\n\n  private _bindSkillEvents(skill: Skill): void {\n    skill.on('before:use', (...args) => {\n      this.emit('before:use:skill', ...args);\n      this.emit(`before:use:skill:${skill.id}`, ...args);\n    });\n\n    skill.on('use', (...args) => {\n      this.emit('use:skill', ...args);\n      this.emit(`use:skill:${skill.id}`, ...args);\n    });\n  }\n\n  private _unbindSkillEvents(id: string): void {\n    this.off(`before:use:skill:${id}`);\n    this.off(`use:skill:${id}`);\n  }\n\n  static fromArray(skills: Skill[]): SkillCollection {\n    const collection: SkillCollection = new SkillCollection();\n\n    collection.add(...skills);\n\n    return collection;\n  }\n}","import DiceThrowResult from './dice-throw-result';\nimport { DiceThrowTypes } from './dice-throw';\n\nconst allowedThrowTypes = [\n  DiceThrowTypes.FAILURE,\n  DiceThrowTypes.SUCCESS,\n  DiceThrowTypes.CRITICAL_SUCCESS\n];\n\nexport default class ChanceThrowResult extends DiceThrowResult {\n  private _throwType?: DiceThrowTypes;\n\n  constructor(throwResult: DiceThrowResult) {\n    super();\n    this.rolls = this.rolls.concat(throwResult.rolls);\n  }\n\n  get throwType() {\n    return this._throwType;\n  }\n\n  set throwType(value) {\n    this._throwType = value;\n  }\n}\n","/**\n * A d100 thrower. Useful for probability calculation. A throw is classified\n * with a roll score map, where the defaults are:\n *\n * - 1-20: Failure\n * - 21-90: Success\n * - 91-100: Critical success\n *\n * You can move around these ranges in order to change the roll's difficulty.\n * For instance, a very difficult throw would be one like this:\n *\n * - 1-80: Failure\n * - 81-98: Success\n * - 99-100: Critical success\n *\n * Notice that the success rate ranges cannot overlap, as the result resolver\n * won't be able to distinguish between rates otherwise.\n *\n * As ChanceThrow is an extension of Dice, it's regulated by the same randomizer\n * rules.\n *\n * @example\n * ```js\n * // Default settings.\n * const d100 = new ChanceThrow();\n * d100.roll();\n *\n * // A very difficult throw.\n * const d100Hard = new ChanceThrow({\n *   rollScores: {\n *     failure: new Range(1, 80),\n *     success: new Range(81, 98),\n *     criticalSuccess: new Range(99, 100),\n *   }\n * });\n * d100Hard.roll();\n *\n * // A chance throw of d66. Useful for capping the success rate\n * // without changing the roll scores map.\n * import { MersenneTwisterAlgorithm } from 'xethya-extension-random-mtw';\n *\n * const d66 = new ChanceThrow({\n *   randomStrategy: MersenneTwisterAlgorithm,\n * });\n * d66.roll();\n * ```\n *\n * @class ChanceThrow\n * @extends DiceThrow\n *\n * @param {Object} [settings] - Configuration object for the throw.\n * @param {Object} [settings.rollScores] - A map of ranges to determine the success rate of\n *                 the chance throw's result.\n * @param {Range}  [settings.rollScores.failure = new Range(1, 20)] - A Range to describe a\n *                 failed throw. This range can be used to apply penalizations to the player.\n * @param {Range}  [settings.rollScores.success = new Range(21, 90)] - A Range to describe a\n *                 success throw. This range can be used to give the player a reward.\n * @param {Range}  [settings.rollScores.criticalSuccess = new Range(91, 100)] - A Range to\n *                 describe a critical success throw. This result means the throw went even\n *                 better than normal, so a major reward can be given.\n * @param {Class}  [settings.randomStrategy = BlumBlumShubAlgorithm] - The strategy to use\n *                 to generate the numbers. Must be a class that implements a `generateRandom()`\n *                 method.\n *\n * @see https://github.com/xethya/xethya-extension-random-bbs/wiki/Blum-Blum-Shub-distributions\n * @see https://github.com/xethya/xethya-extension-random-mtw\n *\n * @uses Range\n * @uses BlumBlumShubAlgorithm\n * @uses ChanceThrowResult\n */\n\nimport Range from '../../utils/range/range';\nimport { BlumBlumShubAlgorithm } from '../../random/blum-blum-shub';\n\nimport { DiceThrow, IDiceThrowSettings, DiceThrowTypes } from './dice-throw';\nimport ChanceThrowResult from './chance-throw-result';\nimport IConstructableRandomAlgorithm from '../../random/constructable-random-algorithm.i';\nimport IRandomSettings from '../../random/random-settings.i';\nimport IRollScoreSettings from './roll-score-settings.i';\nimport assert from '../../utils/assert/assert';\n\nexport interface IChanceThrowSettings extends IDiceThrowSettings {\n  rollScores: IRollScoreSettings,\n}\n\nexport class ChanceThrow extends DiceThrow {\n  settings: IChanceThrowSettings;\n\n  constructor(settings = { randomStrategy: undefined } as IChanceThrowSettings) {\n    super({\n      numberOfDices: 1,\n      maxNumber: 100,\n      randomStrategy: settings.randomStrategy || BlumBlumShubAlgorithm as IConstructableRandomAlgorithm<BlumBlumShubAlgorithm>,\n      randomStrategySettings: {\n        seedNumber: Number(Math.random().toString().replace(/\\./, ''))\n      }\n    });\n\n    const defaults = {\n      rollScores: {\n        failure: new Range(1, 20),\n        success: new Range(21, 90),\n        criticalSuccess: new Range(91, 100)\n      }\n    };\n\n    this.settings = <IChanceThrowSettings>Object.assign({}, settings, defaults);\n  }\n\n  /**\n   * Returns the range for a success rate.\n   *\n   * @private\n   * @function\n   * @param {string} key - The success rate to lookup.\n   * @return {Range}\n   */\n  private _range(key: string) {\n    return this.settings.rollScores[key];\n  }\n\n  /**\n   * Determines the success rate of the throw.\n   *\n   * @private\n   * @function\n   * @param {Number} rollSum - The results of the throw.\n   * @return {String}\n   */\n  private _calculateThrowType(rollSum: number): DiceThrowTypes | undefined {\n    for (let throwType of Object.keys(this.settings.rollScores)) {\n      if (this._range(throwType).includes(rollSum)) {\n        return throwType as DiceThrowTypes;\n      }\n    }\n  }\n\n  /**\n   * Rolls the dice.\n   *\n   * @public\n   * @function roll\n   * @override\n   */\n  roll() {\n    const diceThrow = super.roll();\n    const ctr = new ChanceThrowResult(diceThrow);\n    const rollSum = diceThrow.getRollSum();\n\n    ctr.throwType = this._calculateThrowType(rollSum);\n\n    return ctr;\n  }\n}\n","/**\n * The core class of the package. The Dice class allows to configure a single,\n * positive, integer random throw.\n *\n * By default, the chance throw uses the Blum Blum Shub algorithm contained in\n * `xethya-extension-random-bbs`, which provides a randomizer with an equal chance\n * of rolling numbers in all of the range.\n *\n * You can use the `xethya-extension-random-mtw` package to use the chance throw\n * with the Mersenne-Twister algorithm, which provides an average distribution\n * of 65-35-0 (you'll never get numbers larger than 66).\n *\n * @example\n * ```js\n * // Roll a single d6.\n * const d6 = new Dice();\n * d6.roll(); // A number between 1 and 6.\n *\n * // Roll a single d4.\n * const d4 = new Dice({ faces: 4 });\n * d4.roll();\n *\n * // Alternative, static syntax. Will always use Blum Blum Shub.\n * Dice.rollD(4);\n *\n * // Create a dice, roll it, then change its size.\n * const mutantDice = new Dice({ faces: 10 });\n * mutantDice.roll(); // A number between 1 and 10.\n * mutantDice.faces = 4;\n * mutantDice.roll(); // A number between 1 and 4.\n * ```\n *\n * @class Dice\n * @extends {XethyaObject}\n *\n * @param {Object} settings - A configuration object.\n * @param {Number} [settings.number = 6] - How many faces the dice has, or\n *                 the maximum number the roll can be.\n * @param {Class}  [settings.randomStrategy = BlumBlumShubAlgorithm] - The strategy to use\n *                 to generate the numbers. Must be a class that implements a `generateRandom()`\n *                 method.\n * @param {Object} [settings.randomStrategySettings = {}] - Specific configuration for the\n *                 randomizer. Most strategies should have default settings so you don't need\n *                 to use this, usually.\n *\n * @property {Number} faces - Gets or sets how many faces the dice has. Must be at least 2.\n * @property {Class} randomStrategy - Contains the reference to the pRNG used by the dice.\n * @property {Object} randomStrategySettings - Contains the pRNG's settings.\n *\n * @uses BlumBlumShubAlgorithm\n */\n\nimport Randomizer from '../random/randomizer';\nimport { BlumBlumShubAlgorithm } from '../random/blum-blum-shub';\nimport XethyaObject from '../base/object';\nimport IRandomAlgorithm from '../random/random-algorithm.i';\nimport assert from '../utils/assert/assert';\nimport IConstructableRandomAlgorithm from '../random/constructable-random-algorithm.i';\nimport IConstructable from '../utils/constructable.t';\nimport IRandomSettings from '../random/random-settings.i';\n\nexport interface IDiceSettings extends IRandomSettings {\n  faces: number,\n}\n\nexport class Dice extends XethyaObject {\n  private _faces: number = 6;\n  private _mustPreservePrng: boolean;\n  private _randomStrategy?: IRandomAlgorithm;\n  private _randomizer?: IRandomAlgorithm;\n  private _randomStrategySettings?: object;\n\n  constructor({\n    faces = 6,\n    randomStrategy = BlumBlumShubAlgorithm,\n    randomStrategySettings = {}\n  } = {} as IDiceSettings) {\n    super();\n\n    this.faces = faces;\n    this.setRandomStrategy(randomStrategy as IRandomAlgorithm, randomStrategySettings);\n    this._mustPreservePrng = randomStrategy.recommendsToReinstantiate();\n  }\n\n  /**\n   * Reinitializes the randomizer according to the strategy's recommendation.\n   *\n   * @private\n   * @method _regenerateRandomStrategyIfNeeded\n   */\n  _regenerateRandomStrategyIfNeeded() {\n    if (!this._mustPreservePrng) {\n      this._initializeRandomizer();\n    }\n  }\n\n  /**\n   * Instantiates the randomizer.\n   *\n   * @private\n   * @method _initializeRandomizer\n   */\n  private _initializeRandomizer() {\n    this._randomizer = new Randomizer(this.randomStrategy as IConstructableRandomAlgorithm<IRandomAlgorithm>).create(<object>this.randomStrategySettings);\n  }\n\n  roll(): number {\n    this.emit('before:roll');\n\n    const random: number = (<IRandomAlgorithm>this._randomizer).generateRandom();\n    const result: number = Math.ceil(random * this.faces);\n    this._regenerateRandomStrategyIfNeeded();\n\n    this.emit('roll', result);\n\n    return result;\n  }\n\n  /**\n   * Sets a new random strategy for the dice.\n   *\n   * @public\n   * @method\n   * @param {Class}  randomStrategy - The strategy to use to generate the numbers.\n   *                 Must be a class that implements a `generateRandom()` method.\n   * @param {Object} [randomStrategySettings = {}] - Specific configuration for the\n   *                 randomizer. Most strategies should have default settings so you don't need\n   *                 to use this, usually.\n   */\n  setRandomStrategy(randomStrategy: IRandomAlgorithm, randomStrategySettings = {}) {\n    this.randomStrategy = randomStrategy;\n    this.randomStrategySettings = randomStrategySettings;\n\n    this._initializeRandomizer();\n  }\n\n  get faces() {\n    return this._faces;\n  }\n\n  /**\n   * @throws {Error} if faces isn't a Number or it's less than 2.\n   */\n  set faces(faces) {\n    assert(faces >= 2, 'Dice#setFaces: a dice must have at least two faces');\n\n    this._faces = faces;\n  }\n\n  get randomStrategy() {\n    return this._randomStrategy;\n  }\n\n  set randomStrategy(randomStrategy) {\n    this._randomStrategy = randomStrategy;\n  }\n\n  get randomStrategySettings() {\n    return this._randomStrategySettings;\n  }\n\n  set randomStrategySettings(randomStrategySettings) {\n    this._randomStrategySettings = randomStrategySettings;\n  }\n\n  static rollD(faces: number) {\n    return new Dice({ faces }).roll();\n  }\n}\n","import assert from '../assert/assert';\n\nexport default class Range {\n  lowerBound: number;\n  upperBound: number;\n\n  constructor(lowerBound: number, upperBound: number) {\n    assert(lowerBound !== upperBound, 'Range#constructor: lowerBound and upperBound cannot be equal');\n    \n    this.lowerBound = Math.min(lowerBound, upperBound);\n    this.upperBound = Math.max(lowerBound, upperBound);    \n  }\n\n  /**\n   * Checks if a value is in the defined range.\n   *\n   * @public\n   * @function\n   * @param  {Number} value - Value to compare.\n   * @return {Boolean} true if in range, false otherwise.\n   */\n  includes(value: number): boolean {\n    return this.lowerBound <= value && value <= this.upperBound;\n  }  \n\n  /**\n   * Converts the Range object to a string representation.\n   * \n   * @public\n   * @function\n   * @return {String}\n   */\n  toString(): string {\n    return `${this.lowerBound.toString()} ~ ${this.upperBound.toString()}`;\n  }\n\n  /**\n   * Creates a Range from an array of two numbers.\n   *\n   * @public\n   * @static\n   * @function\n   * @param  {Array.<Number>} values - Boundaries of the range.\n   * @return {Range}\n   */\n  static fromArray(values: number[]): Range {\n    const errorMessage = 'Range#fromArray: values must be an Array of 2 numerical elements';\n\n    assert(values.length === 2, errorMessage);\n\n    return new Range(values[0], values[1]);\n  }\n\n  /**\n   * Creates a Range from a string-based notation.\n   *\n   * @public\n   * @static\n   * @function\n   * @param  {String} notedRange - A string representation of a Range,\n   *                  using delimiters. Accepted formats: x,y x;y x:y x~y.\n   * @return {Range}\n   */\n  static fromNotation(notedRange: string): Range | undefined {\n    const errorMessage = 'Range#fromNotation: notedRange must use one of these formats: x,y x;y x:y x~y';\n\n    assert(notedRange !== undefined, errorMessage);\n    assert(typeof notedRange === 'string', errorMessage);\n\n    let range: Range | undefined;\n    const allowedDelimiters: string[] = [',', ';', ':', '~'];\n\n    assert(allowedDelimiters.some(delimiter => notedRange.includes(delimiter)), errorMessage);\n\n    let delimiterFound = false;\n\n    while (!delimiterFound) {\n      const delimiter: string = allowedDelimiters.shift() as string;\n\n      delimiterFound = notedRange.includes(delimiter);\n\n      if (delimiterFound) {\n        const data = notedRange.split(delimiter).map(d => d.trim());\n\n        assert(data.length === 2, errorMessage);\n\n        range = Range.fromArray(data.map(d => Number(d)));\n      }\n    }\n\n    return range;\n  }  \n}\n","import assert from '../../utils/assert/assert';\nimport Eventable from '../../base/eventable';\nimport BaseModifier from '../modifiers/base-modifier';\nimport Modifier from '../modifiers/modifier';\nimport ModifierCollection from '../modifiers/modifier-collection';\nimport IHasModifiers from '../modifiers/has-modifiers.i';\nimport Range from '../../utils/range/range';\nimport IRangeable from '../../utils/range/rangeable.i';\n\nexport type AttributeSettings = {\n  id: string,\n  initialValue?: number,\n  valueRange?: Range,\n};\n\nexport class Attribute extends Eventable implements IHasModifiers {\n  modifiers: ModifierCollection;\n  \n  private _valueRange?: Range;\n  private _rawValue: number = 0;\n  private _id: string = '';\n\n  constructor({ \n    id, \n    initialValue = 0, \n    valueRange = undefined \n  }: AttributeSettings) {\n    super();\n    \n    this.modifiers = new ModifierCollection();\n    this.id = id;\n    this._rawValue = initialValue;\n\n    if (valueRange) {\n      this._valueRange = valueRange;\n    }\n\n    this.modifiers.add(new BaseModifier());\n    this._updateBaseModifierValue();\n  }\n\n  private _updateBaseModifierValue(): void {\n    this.modifiers.setValue('base', this._rawValue);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  set id(newId: string) {\n    assert(newId !== '', 'Attribute#set[id]: cannot be an empty String');\n\n    this._id = newId;\n  }\n\n  get rawValue(): number {\n    return this._rawValue;\n  }\n\n  set rawValue(newValue: number) {\n    const range = this._valueRange;\n\n    if (range) {\n      assert(range.includes(newValue),\n        `Attribute#set[value]: value is out of range (must be within ${range.toString()})`);\n    }\n\n    const previousValue = this._rawValue;\n\n    if (previousValue !== newValue) {\n      this.emit('before:change:value', { previousValue, newValue });\n      this._rawValue = newValue;\n      this._updateBaseModifierValue();\n      this.emit('change:value', this);\n    }\n  }\n\n  get value(): number {\n    return this.rawValue + this.modifiers.getSum();\n  }\n\n  get baseModifierValue(): number {\n    const modifier = this.modifiers.get('base') as Modifier;\n    return modifier.value;\n  }\n\n  toString(): string {\n    const modifierSum: number = this.modifiers.getSum();\n    const sign: string = modifierSum >= 0 ? '+' : '';\n    return `${this.rawValue.toString()} (${sign}${modifierSum.toString()})`;\n  }\n}","export function BaseModifierCalculator(value: number) {\n  return Math.floor((value - 10) / 2);\n}\n\nexport type IBaseModifierCalculator = {(value: number): number};","import Modifier from \"./modifier\";\nimport { IBaseModifierCalculator, BaseModifierCalculator } from \"./base-modifier-calculator\";\n\nexport default class BaseModifier extends Modifier {\n  private _calculateValue: IBaseModifierCalculator = BaseModifierCalculator;\n  \n  constructor(calculationMethod: IBaseModifierCalculator = BaseModifierCalculator) {\n    super('base');\n\n    this._calculateValue = calculationMethod;\n  }\n\n  get value() {\n    return super.value;\n  }\n\n  set value(newValue: number) {\n    super.value = this._calculateValue(newValue);\n  }\n}","import Entity from './entity';\nimport { IEntitySettings } from './abstract-entity';\nimport IHasSkills from './skills/has-skills.i';\nimport SkillCollection from './skills/skill-collection';\nimport { Skill } from './skills/skill';\n\nexport interface IAbleEntitySettings extends IEntitySettings {\n  skills: Skill[];\n}\n\nexport class AbleEntity extends Entity implements IHasSkills {\n  protected _skills: SkillCollection;\n\n  constructor(settings: IAbleEntitySettings) {\n    super(settings);\n\n    this._skills = SkillCollection.fromArray(settings.skills);\n  }\n\n  get skills() {\n    return this._skills;\n  }\n}","import { AbstractEntity, IEntitySettings } from \"./abstract-entity\";\n\nexport default class Entity extends AbstractEntity {\n  constructor(settings: IEntitySettings) {\n    super(settings);\n  }\n}","import assert from '../utils/assert/assert';\nimport XethyaObject from '../base/object';\nimport IEntity from './entity.i';\nimport AttributeCollection from './attributes/attribute-collection';\nimport ModifierCollection from './modifiers/modifier-collection';\nimport { Attribute } from './attributes/attribute';\nimport Modifier from './modifiers/modifier';\n\nexport const enum MoralAlignments {\n  CHAOTIC_GOOD = 'chaotic:good',\n  CHAOTIC_NEUTRAL = 'chaotic:neutral',\n  CHAOTIC_EVIL = 'chaotic:evil',\n  NEUTRAL_GOOD = 'neutral:good',\n  NEUTRAL_NEUTRAL = 'neutral:neutral',\n  NEUTRAL_EVIL = 'neutral:evil',\n  LAWFUL_GOOD = 'lawful:good',\n  LAWFUL_NEUTRAL = 'lawful:neutral',\n  LAWFUL_EVIL = 'lawful:evil',\n};\n\nexport interface IEntitySettings {\n  id: string;\n  name: string;\n  volatile: false;\n  attributes: Attribute[],\n  modifiers: Modifier[],\n};\n\nexport abstract class AbstractEntity extends XethyaObject implements IEntity {\n  protected readonly _id: string;\n  protected _name: string;\n  protected readonly _volatile: boolean;\n  protected readonly _attributes: AttributeCollection;\n  protected readonly _modifiers: ModifierCollection;\n\n  constructor({\n    id,\n    name = 'UnnamedEntity',\n    volatile = false,\n    attributes = [],\n    modifiers = [],\n  } = {} as IEntitySettings) {\n    super();\n\n    this._id = id;\n    this._name = name;\n    this._volatile = volatile;\n    this._attributes = AttributeCollection.fromArray(attributes);\n    this._modifiers = ModifierCollection.fromArray(modifiers);\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  set name(newName: string) {\n    this._name = newName;\n  }\n\n  get volatile() {\n    return this._volatile;\n  }\n\n  get attributes() {\n    return this._attributes;\n  }\n\n  get modifiers() {\n    return this._modifiers;\n  }\n}","import ChanceThrowResult from './chance-throw-result';\n\nexport type SkillThrowResultSettings = {\n  skillValue: number,\n  skillAttributesModifierValue: number,\n  throwResult: ChanceThrowResult,\n};\n\nexport class SkillThrowResult extends ChanceThrowResult {\n  private _skillValue: number;\n  private _skillAttributeModifiersValue: number;\n  private _failureRoll?: ChanceThrowResult;\n\n  constructor({\n    skillValue,\n    skillAttributesModifierValue,\n    throwResult\n  }: SkillThrowResultSettings) {\n    super(throwResult);\n    \n    this._skillValue = skillValue;\n    this._skillAttributeModifiersValue = skillAttributesModifierValue;\n  }\n\n  get skillValue() {\n    return this._skillValue;\n  }\n\n  get skillAttributeModifiersValue() {\n    return this._skillAttributeModifiersValue;\n  }\n\n  get totalRollValue() {\n    return this.skillValue + this.getRollSum() + this.skillAttributeModifiersValue;\n  }\n\n  get failureRoll() {\n    return this._failureRoll;\n  }\n\n  set failureRoll(roll: ChanceThrowResult | undefined) {\n    this._failureRoll = roll;\n  }\n}","import { ChanceThrow } from './chance-throw';\nimport { Skill } from '../../entity/skills/skill';\nimport ChanceThrowResult from './chance-throw-result';\nimport { SkillThrowResult } from './skill-throw-result';\n\nexport default class SkillThrow extends ChanceThrow {\n  private _skill: Skill;\n\n  constructor(skill: Skill) {\n    super();\n\n    this._skill = skill;\n  }\n\n  get skill() {\n    return this._skill;\n  }\n\n  roll(): SkillThrowResult {\n    const result: ChanceThrowResult = super.roll();\n    return new SkillThrowResult({\n      skillValue: this._skill.value,\n      skillAttributesModifierValue: this._skill.modifiers.getSum(),\n      throwResult: result,\n    });\n  }\n}","export default class DiceThrowResult {\n  rolls: number[];\n\n  constructor() {\n    this.rolls = [];\n  }\n\n  getRollSum(): number {\n    return this.rolls.reduce((m, n) => m + n);\n  }\n}\n","/**\n * xethya-dice\n *\n * Copyright © 2016 Joel A. Villarreal Bertoldi. All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.txt file in the root directory of this source tree.\n */\nimport { Dice } from '../dice';\nimport DiceThrowResult from './dice-throw-result';\n\nimport { BlumBlumShubAlgorithm } from '../../random/blum-blum-shub';\nimport assert from '../../utils/assert/assert';\nimport IRandomSettings from '../../random/random-settings.i';\nimport IRandomAlgorithm from '../../random/random-algorithm.i';\nimport IConstructableRandomAlgorithm from '../../random/constructable-random-algorithm.i';\n\nexport interface IDiceThrowSettings extends IRandomSettings {\n  numberOfDices?: number,\n  maxNumber?: number,\n}\n\nexport const enum DiceThrowTypes {\n  FAILURE = 'failure',\n  SUCCESS = 'success',\n  CRITICAL_SUCCESS = 'criticalSuccess',\n};\n\nexport class DiceThrow {\n  dices: Dice[];\n\n  constructor({\n    numberOfDices = 2,\n    maxNumber = 6,\n    randomStrategy = BlumBlumShubAlgorithm,\n    randomStrategySettings = {}\n  } = {} as IDiceThrowSettings) {\n    assert(maxNumber >= 2, 'DiceThrow#constructor: expected `maxNumber` to be at least 2.');\n\n    this.dices = [];\n\n    for (let d = 0; d < numberOfDices; d += 1) {\n      this.dices.push(new Dice({\n        faces: maxNumber,\n        randomStrategy: randomStrategy as IConstructableRandomAlgorithm<IRandomAlgorithm>,\n        randomStrategySettings\n      }));\n    }\n  }\n\n  roll() {\n    let dtr = new DiceThrowResult();\n    dtr.rolls = this.dices.map(d => d.roll());\n    return dtr;\n  }\n}\n","import IConstructableRandomAlgorithm from './constructable-random-algorithm.i';\n\nexport default class Randomizer<Algorithm> {\n  constructor(private constructorFunction: IConstructableRandomAlgorithm<Algorithm>) {}\n  \n  create(randomizerSettings: object): Algorithm {\n    return new this.constructorFunction(randomizerSettings);\n  }\n}","import IIndexedByString from './indexed-by-string.i';\nimport Eventable from '../../base/eventable';\nimport ICollection from './collection.i';\nimport IQuery from './query.i';\nimport assert from '../assert/assert';\n\nabstract class AbstractCollection<T extends {[index: string]: any}> extends Eventable implements ICollection<T> {\n  public indexName: string;\n  protected _list: IIndexedByString<T> = {};\n\n  constructor(indexName: string) {\n    super();\n\n    this.indexName = indexName;\n  }\n\n  get count(): number {\n    return Object.keys(this._list).length;\n  }\n\n  get(id: string): T | undefined {\n    return this._list[id];\n  }\n\n  getAll(): T[] {\n    return Object.keys(this._list).map((id: string) => this._list[id]);\n  }\n\n  where(condition: IQuery<T>): T[] {\n    return this.getAll().filter(condition);\n  }\n\n  contains(id: string): boolean {\n    return id in this._list;\n  }\n\n  add(...items: T[]): void {\n    this.emit('before:add', this, ...items);\n\n    items.forEach((item: T) => {\n      const index = item[this.indexName];\n      assert(!this.contains(index), `An item already exists with key: ${index}`);\n\n      this._list[index] = item;\n    });\n\n    this.emit('add', this);\n  }\n\n  remove(id: string): void {\n    if (this.contains(id)) {\n      this.emit('before:remove', this);\n\n      delete this._list[id];\n\n      this.emit('remove');\n    }\n  }\n\n  removeAll(): void {\n    this.emit('before:removeAll', this);\n\n    this._list = {};\n\n    this.emit('removeAll', this);\n  }\n}\n\nexport default AbstractCollection;","import { Attribute } from '../attributes/attribute';\nimport Modifier from '../modifiers/modifier';\nimport IHasAttributes from '../attributes/has-attributes.i';\nimport AttributeCollection from '../attributes/attribute-collection';\nimport IHasModifiers from '../modifiers/has-modifiers.i';\nimport ModifierCollection from '../modifiers/modifier-collection';\nimport XethyaObject from '../../base/object';\nimport assert from '../../utils/assert/assert';\nimport SkillThrow from '../../dice/throws/skill-throw';\nimport { SkillThrowResult } from '../../dice/throws/skill-throw-result';\nimport { DiceThrowTypes } from '../../dice/throws/dice-throw';\nimport { ChanceThrow } from '../../dice/throws/chance-throw';\n\nexport type SkillSettings = {\n  id: string;\n  owner?: XethyaObject;\n  attributes?: Attribute[],\n  modifiers?: Modifier[],\n  primaryAttribute?: string | Attribute,\n}\n\nexport class Skill extends XethyaObject implements IHasAttributes, IHasModifiers {\n  attributes: AttributeCollection;\n  modifiers: ModifierCollection;\n  \n  protected _id: string;\n  protected _primaryAttribute?: Attribute;\n\n  constructor({\n    id,\n    owner = undefined,\n    attributes = [],\n    modifiers = [],\n    primaryAttribute = ''\n  }: SkillSettings) {\n    super();\n\n    this._id = id;\n    this.attributes = AttributeCollection.fromArray(attributes);\n    this.modifiers = ModifierCollection.fromArray(modifiers);\n\n    if (this.attributes.count > 0) {\n      this._setPrimaryAttribute(primaryAttribute);  \n    }\n  }\n\n  private _setPrimaryAttribute(primaryAttribute: string | Attribute) {\n    const isAttributeID = typeof primaryAttribute === 'string';\n    const attributeID: string = isAttributeID ? primaryAttribute as string : (primaryAttribute as Attribute).id;\n    \n    assert(this.attributes.contains(attributeID),\n      'Skill#constructor: primaryAttribute must be defined in attributes array');\n    \n    this._primaryAttribute = this.attributes.get(attributeID) as Attribute;\n  }\n\n  get primaryAttribute(): Attribute | undefined {\n    return this._primaryAttribute;\n  }\n\n  set primaryAttribute(newPrimaryAttribute: Attribute | undefined) {\n    this._primaryAttribute = newPrimaryAttribute;\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get value() {\n    return (this._primaryAttribute as Attribute).value;\n  }\n\n  use(): SkillThrowResult {\n    this.emit('before:use', this);\n\n    const skillThrow = new SkillThrow(this);\n    const result = skillThrow.roll();\n\n    if (result.throwType === DiceThrowTypes.FAILURE) {\n      result.failureRoll = new ChanceThrow().roll();\n    }\n\n    this.emit('use', this);\n\n    return result;\n  }\n}","import { Attribute } from '../attributes/attribute';\nimport AttributeCollection from '../attributes/attribute-collection';\nimport IHasAttributes from '../attributes/has-attributes.i';\nimport IStatCalculator from './stat-calculator.i';\n\nexport default class Stat extends Attribute implements IHasAttributes {\n  attributes: AttributeCollection;\n\n  private _calculateStat: IStatCalculator;\n  private _lastCalculatedValue: number = 0;\n\n  constructor(id: string, statCalculator: IStatCalculator) {\n    super({ id });\n\n    this.attributes = new AttributeCollection();\n\n    this.modifiers.remove('base');\n    this._calculateStat = statCalculator;\n\n    this.attributes.on('change:attribute:value', this._valueChanged.bind(this));\n  }\n\n  private _valueChanged(): void {\n    this.emit('change:value', {\n      previousValue: this._lastCalculatedValue,\n      newValue: this.value,\n    });\n  }\n\n  get value(): number {\n    const value = this._calculateStat(this);\n\n    if (this._lastCalculatedValue !== value) {\n      this.emit('change:value', {\n        previousValue: this._lastCalculatedValue,\n        newValue: value,\n      });\n      this._lastCalculatedValue = value;\n    }\n\n    return value;\n  } \n}","import XethyaObject from '../../base/object';\nimport IHasAttributes from '../attributes/has-attributes.i';\nimport { Attribute } from '../attributes/attribute';\nimport AttributeCollection from '../attributes/attribute-collection';\nimport IHasSkills from '../skills/has-skills.i';\nimport { Skill } from '../skills/skill';\nimport SkillCollection from '../skills/skill-collection';\nimport IHasStats from '../stats/has-stats.i';\nimport Stat from '../stats/stat';\nimport StatCollection from '../stats/stat-collection';\nimport Range from '../../utils/range/range';\nimport { MoralAlignments } from '../abstract-entity';\n\nexport type RaceSettings = {\n  id: string;\n  name: string;\n  lifeExpectancy: Range;\n  defaultAlignment: MoralAlignments;\n  heightRange: Range;\n  heritageAttributes: Attribute[];\n  heritageSkills: Skill[];\n  heritageStats: Stat[];\n}\n\nexport class Race extends XethyaObject implements IHasAttributes, IHasSkills, IHasStats {\n  id: string;\n  name: string;\n  attributes: AttributeCollection;\n  skills: SkillCollection;\n  stats: StatCollection;\n  lifeExpectancy: Range;\n  defaultAlignment: MoralAlignments;\n  heightRange: Range;\n\n  constructor({\n    id,\n    name = 'Unnamed Race',\n    lifeExpectancy = Range.fromArray([90, 100]),\n    defaultAlignment = MoralAlignments.NEUTRAL_NEUTRAL,\n    heightRange = Range.fromArray([165, 185]),\n    heritageAttributes = [],\n    heritageSkills = [],\n    heritageStats = []\n  }: RaceSettings) {\n    super();\n\n    this.id = id;\n    this.name = name;\n    this.attributes = AttributeCollection.fromArray(heritageAttributes);\n    this.skills = SkillCollection.fromArray(heritageSkills);\n    this.stats = StatCollection.fromArray(heritageStats);\n    this.lifeExpectancy = lifeExpectancy;\n    this.defaultAlignment = defaultAlignment;\n    this.heightRange = heightRange;\n  }\n}","import { AbleEntity, IAbleEntitySettings } from './able-entity';\nimport { Race } from './race/race';\nimport { Attribute } from './attributes/attribute';\nimport Modifier from './modifiers/modifier';\nimport Stat from './stats/stat';\nimport StatCollection from './stats/stat-collection';\nimport IHasStats from './stats/has-stats.i';\nimport { Skill } from './skills/skill';\n\nexport interface ILivingEntitySettings extends IAbleEntitySettings {\n  race: Race;\n  age: number;\n  height: number;\n  weight: number;\n  stats: Stat[];\n}\n\nexport class LivingEntity extends AbleEntity implements IHasStats {\n  protected _race: Race;\n  protected _age: number;\n  protected _height: number;\n  protected _weight: number;\n  protected _stats: StatCollection;\n\n  constructor(settings: ILivingEntitySettings) {\n    super(settings);\n\n    this._race = settings.race;\n    this._age = settings.age;\n    this._weight = settings.weight;\n    this._height = settings.height;\n\n    this._stats = StatCollection.fromArray(settings.stats);\n\n    this._applyRacialTraits();\n  }\n\n  get stats() {\n    return this._stats;\n  }\n\n  get race() {\n    return this._race;\n  }\n\n  get age() {\n    return this._age;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get weight() {\n    return this._weight;\n  }\n\n  protected _applyRacialTraits(): void {\n    this._applyRaceAttributes();\n    this._applyRaceStats();\n    this._applyRaceSkills();\n  }\n\n  protected _applyRaceAttributes(): void {\n    this._race.attributes.getAll().forEach((attribute) => {\n      const raceTrait = new Modifier(\n        `${attribute.id}RaceTrait`,\n        attribute.rawValue\n      );\n      (this.attributes.get(attribute.id) as Attribute).modifiers.add(raceTrait);\n    });\n  }\n\n  protected _applyRaceStats(): void {\n    this.race.stats.getAll().forEach((stat) => {\n      const raceTrait = new Modifier(\n        `${stat.id}RaceTrait`,\n        stat.value\n      );\n      (this.stats.get(stat.id) as Stat).modifiers.add(raceTrait);\n    });\n  }\n\n\n  protected _applyRaceSkills(): void {\n    this.race.skills.getAll().forEach((skill) => {\n      const raceTrait = new Modifier(\n        `${skill.id}RaceTrait`,\n        skill.value\n      );\n      (this.skills.get(skill.id) as Skill).modifiers.add(raceTrait);\n    });\n  }  \n}","import { Dice } from '../dice';\n\nexport const enum CoinFlipSides {\n  HEADS = 1,\n  TAILS = 2,\n};\n\nexport class CoinFlip extends Dice {\n  constructor() {\n    super({ faces: 2 });\n  }\n}","import IRandomAlgorithm from \"./random-algorithm.i\";\nimport assert from '../utils/assert/assert';\n\n/**\n * @ignore\n */\nexport const N: number = 624;\n\n/**\n * @ignore\n */\nexport const M: number = 397;\n\n/**\n * @ignore\n */\nexport const MATRIX_A: number = 0x9908b0df;\n\n/**\n * @ignore\n */\nexport const UPPER_MASK: number = 0x80000000;\n\n/**\n * @ignore\n */\nexport const LOWER_MASK: number = 0x7fffffff;\n\n/**\n * @ignore\n */\nexport const INIT_BY_ARRAY_SEED: number = 19650218;\n\nexport type MersenneTwisterAlgorithmSettings = {\n  seedNumber?: number,\n};\n\nexport class MersenneTwisterAlgorithm implements IRandomAlgorithm {\n  seedNumber: number;\n  MT: number[];\n  MTI: number;\n\n  /**\n   * Instantiates the Mersenne-Twister generator.\n   *\n   * @param  {Object} settings - Configuration for the generator:\n   *         - seedNumber: The number for the seed.\n   */\n  constructor(public settings?: MersenneTwisterAlgorithmSettings) {\n    let seedNumber;\n\n    const defaults = {\n      seedNumber: undefined,\n    };\n\n    this.settings = Object.assign({}, defaults, settings);\n\n    const seed: number = this.settings.seedNumber as number;\n\n    if (seed) {\n      seedNumber = Math.abs(seed);\n    } else {\n      // Try seeding with a custom algorithm.\n      seedNumber = Number(new Date().getTime().toString().split('')\n        .sort(() => 0.5 - Math.random()).join(''));\n    }\n\n    this.MT = new Array(N);\n    this.MTI = N + 1;\n    this.seedNumber = seedNumber;\n\n    this.initializeRandomGenerator(seedNumber);\n  }\n\n  /**\n   * Determines if the generator works better by being reinstantiated after\n   * every generated number.\n   *\n   * @public\n   * @function recommendsToReinstantiate\n   * @memberof MersenneTwisterAlgorithm\n   * @static\n   * @return {Boolean}\n   */\n  static recommendsToReinstantiate() {\n    return false;\n  }\n\n  recommendsToReinstantiate() {\n    return MersenneTwisterAlgorithm.recommendsToReinstantiate();\n  }\n\n  /**\n   * Loads the initialization vector required for the algorithm,\n   * according to a given seed.\n   *\n   * @public\n   * @method initializeRandomGenerator\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @param  {Number} seedNumber - A seed can be any non-negative integer value.\n   */\n  initializeRandomGenerator(seedNumber: number) {\n    let seed = Math.abs(Math.floor(seedNumber));\n\n    this.MT[0] = seed >> 0;\n    for (this.MTI = 1; this.MTI < N; this.MTI += 1) {\n      seed = this.MT[this.MTI - 1] ^ (this.MT[this.MTI - 1] >> 30);\n      this.MT[this.MTI] = ((((seed & 0xffff0000) >> 16) * 1812433253) << 16)\n                        + ((seed & 0x0000ffff) * 1812433253)\n                        + this.MTI;\n      this.MT[this.MTI] = this.MT[this.MTI] >> 0;\n    }\n  }\n\n  /**\n   * An alternative way to load the initialization vector for the algorithm.\n   *\n   * @public\n   * @method initializeByArray\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @param  {Array.<Number>} initKeyArray - A list of non-negative integer values.\n   */\n  initializeByArray(initKeyArray: number[]) {\n    let i = 1;\n    let j = 0;\n    const keyLength = initKeyArray.length;\n\n    assert(keyLength > 0, 'MersenneTwister#initializeByArray: initKeyArray must be an Array of at least one non-negative number.');\n\n    // Ensure positive, integer values.\n    const initKey = initKeyArray.map(v => Math.abs(Math.floor(v)));\n\n    this.initializeRandomGenerator(INIT_BY_ARRAY_SEED);\n\n    let k = N > keyLength ? N : keyLength;\n\n    while (k > 0) {\n      const s = this.MT[i - 1] ^ (this.MT[i - 1] >> 30);\n      this.MT[i] = (this.MT[i] ^ (((((s & 0xffff0000) >> 16) * 1664525) << 16)\n        + ((s & 0x0000ffff) * 1664525)))\n        + initKey[j] + j;\n      this.MT[i] = this.MT[i] >> 0;\n      i += 1;\n      j += 1;\n      if (i >= N) {\n        this.MT[0] = this.MT[N - 1];\n        i = 1;\n      }\n      if (j >= keyLength) {\n        j = 0;\n      }\n      k -= 1;\n    }\n    for (k = N - 1; k > 0; k -= 1) {\n      const s = this.MT[i - 1] ^ (this.MT[i - 1] >> 30);\n      this.MT[i] = (this.MT[i] ^ (((((s & 0xffff0000) >> 16) * 1566083941) << 16)\n        + ((s & 0x0000ffff) * 1566083941))) - i;\n      this.MT[i] = this.MT[i] >> 0;\n      i += 1;\n      if (i >= N) {\n        this.MT[0] = this.MT[N - 1];\n        i = 1;\n      }\n    }\n    this.MT[0] = 0x80000000;\n  }\n\n  /**\n   * Returns a random non-negative integer value.\n   *\n   * @public\n   * @function generateRandomInteger\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomInteger() {\n    let y;\n    const mag01 = [0x0, MATRIX_A];\n\n    if (this.MTI >= N) {\n      let kk;\n      if (this.MTI === N + 1) {\n        this.initializeRandomGenerator(5489);\n      }\n      for (kk = 0; kk < N - M; kk += 1) {\n        y = (this.MT[kk] & UPPER_MASK) | (this.MT[kk + 1] & LOWER_MASK);\n        this.MT[kk] = this.MT[kk + M] ^ (y >> 1) ^ mag01[y & 0x1];\n      }\n      while (kk < N - 1) {\n        y = (this.MT[kk] & UPPER_MASK) | (this.MT[kk + 1] & LOWER_MASK);\n        this.MT[kk] = this.MT[kk + M - N] ^ (y >> 1) ^ mag01[y & 0x1];\n        kk += 1;\n      }\n      y = (this.MT[N - 1] & UPPER_MASK) | (this.MT[0] & LOWER_MASK);\n      this.MT[N - 1] = this.MT[M - 1] ^ (y >> 1) ^ mag01[y & 0x1];\n\n      this.MTI = 0;\n    }\n\n    this.MTI += 1;\n    y = this.MT[this.MTI];\n\n    y ^= (y >> 11);\n    y ^= (y << 7) & 0x9d2c5680;\n    y ^= (y << 15) & 0xefc60000;\n    y ^= (y >> 18);\n\n    return y >> 0;\n  }\n\n  /**\n   * Returns a non-negative random integer value, within\n   * the range of Int31.\n   *\n   * @public\n   * @function generateRandomInteger31\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomInteger31() {\n    return this.generateRandomInteger() >> 1;\n  }\n\n  /**\n   * Returns a non-negative random real number between 0 and 1.\n   *\n   * @public\n   * @function generateRandomReal\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomReal() {\n    return this.generateRandomInteger() * (1.0 / 4294967295.0);\n  }\n\n  /**\n   * Returns a non-negative random number between 0 and 1.\n   *\n   * @public\n   * @function generateRandom\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandom() {\n    return this.generateRandomInteger() * (1.0 / 4294967296.0);\n  }\n\n  /**\n   * Returns a non-negative random real number between 0 and 1.\n   *\n   * @public\n   * @function generateRandomReal3\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomReal3() {\n    return (this.generateRandomInteger() + 0.5) * (1.0 / 4294967296.0);\n  }\n\n  /**\n   * Returns a non-negative random rumber with a resolution\n   * of 53 bits.\n   *\n   * @public\n   * @function generateRandomReal53BitResolution\n   * @memberof MersenneTwisterAlgorithm\n   * @instance\n   * @return {Number}\n   */\n  generateRandomReal53BitResolution() {\n    const a = this.generateRandomInteger() >> 5;\n    const b = this.generateRandomInteger() >> 6;\n    return (a * 671084464.0 + b) * (1.0 / 9007199254740992.0);\n  }\n}","export default class AssertionError extends Error {\n  constructor(message: string) {\n    super();\n    this.message = `[AssertionError] An assertion has failed${message ? (': ' + message) : ''}`;\n  }\n}\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import Eventable from './base/eventable';\nimport XethyaObject from './base/object';\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Base\n */\nexport {\n  Eventable,\n  XethyaObject,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Utils\n */\nimport assert from './utils/assert/assert';\n\nimport Range from './utils/range/range';\nimport IRangeable from './utils/range/rangeable.i';\n\nimport Constructable from './utils/constructable.t';\n\nimport IQuery from './utils/collection/query.i';\nimport IIndexedByString from './utils/collection/indexed-by-string.i';\nimport ICollection from './utils/collection/collection.i';\nimport AbstractCollection from './utils/collection/abstract-collection';\nimport Collection from './utils/collection/collection';\n\nexport {\n  assert,\n\n  Range,\n  IRangeable,\n\n  Constructable,\n\n  IQuery,\n  IIndexedByString,\n  ICollection,\n  AbstractCollection,\n  Collection,\n} \n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Random\n */ \n\nimport * as BlumBlumShub from './random/blum-blum-shub';\nimport * as MersenneTwister from './random/mersenne-twister';\nimport IConstructableRandomAlgorithm from './random/constructable-random-algorithm.i';\nimport IRandomAlgorithm from './random/random-algorithm.i';\nimport IRandomSettings from './random/random-settings.i';\nimport Randomizer from './random/randomizer';\n\nexport {\n  BlumBlumShub,\n  MersenneTwister,\n\n  Randomizer,\n  IRandomAlgorithm,\n  IRandomSettings,\n  IConstructableRandomAlgorithm,\n};\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Dice\n */\n\nimport { Dice, IDiceSettings } from './dice/dice';\n\nimport { IDiceThrowSettings, DiceThrowTypes, DiceThrow } from './dice/throws/dice-throw';\nimport DiceThrowResult from './dice/throws/dice-throw-result';\nimport { IChanceThrowSettings, ChanceThrow } from './dice/throws/chance-throw';\nimport ChanceThrowResult from './dice/throws/chance-throw-result';\nimport SkillThrow from './dice/throws/skill-throw';\nimport { SkillThrowResult, SkillThrowResultSettings }from './dice/throws/skill-throw-result';\nimport IRollScoreSettings from './dice/throws/roll-score-settings.i';\n\nimport { CoinFlip, CoinFlipSides } from './dice/presets/coin-flip';\n\nexport {\n  Dice,\n  IDiceSettings,\n\n  IDiceThrowSettings,\n  DiceThrowTypes,\n  DiceThrow,\n  IChanceThrowSettings,\n  ChanceThrow,\n  ChanceThrowResult,\n  SkillThrow,\n  SkillThrowResult,\n  SkillThrowResultSettings,\n  IRollScoreSettings,\n\n  CoinFlipSides,\n  CoinFlip,\n}\n\n// ----------------------------------------------------------------------------\n\n/**\n * @package Entity\n */\n\nimport { AbstractEntity, IEntitySettings, MoralAlignments } from './entity/abstract-entity';\nimport Entity from './entity/entity';\nimport IEntity from './entity/entity.i';\nimport { AbleEntity, IAbleEntitySettings } from './entity/able-entity';\nimport { LivingEntity, ILivingEntitySettings } from './entity/living-entity';\nimport { Race, RaceSettings } from './entity/race/race';\n\nexport {\n  IEntitySettings,\n  IEntity,\n  AbstractEntity,\n  Entity,\n  IAbleEntitySettings,\n  AbleEntity,\n  ILivingEntitySettings,\n  LivingEntity,\n  MoralAlignments,\n  RaceSettings,\n  Race,\n}\n\n/**\n * @namespace Modifiers\n */\n\nimport Modifier from './entity/modifiers/modifier';\nimport BaseModifier from './entity/modifiers/base-modifier';\nimport { BaseModifierCalculator, IBaseModifierCalculator } from './entity/modifiers/base-modifier-calculator';\nimport ModifierCollection from './entity/modifiers/modifier-collection';\nimport IHasModifiers from './entity/modifiers/has-modifiers.i';\n\nexport {\n  Modifier,\n  IBaseModifierCalculator,\n  BaseModifierCalculator,\n  BaseModifier,\n  ModifierCollection,\n  IHasModifiers,\n}\n\n/**\n * @namespace Attributes\n */\n\nimport { Attribute, AttributeSettings } from './entity/attributes/attribute';\nimport AttributeCollection from './entity/attributes/attribute-collection';\nimport IHasAttributes from './entity/attributes/has-attributes.i';\n\nexport {\n  AttributeSettings,\n  Attribute,\n  AttributeCollection,\n  IHasAttributes,\n};\n\n/**\n * @namespace Stats\n */\n\nimport IStatCalculator from './entity/stats/stat-calculator.i';\nimport Stat from './entity/stats/stat';\nimport StatCollection from './entity/stats/stat-collection';\nimport IHasStats from './entity/stats/has-stats.i';\n\nexport {\n  IStatCalculator,\n  Stat,\n  StatCollection,\n  IHasStats,\n};\n\n/**\n * @namespace Skills\n */\n\nimport { Skill, SkillSettings } from './entity/skills/skill';\nimport SkillCollection from './entity/skills/skill-collection';\nimport IHasSkills from './entity/skills/has-skills.i';\n\nexport {\n  Skill,\n  SkillSettings,\n  SkillCollection,\n  IHasSkills,\n};"],"sourceRoot":""}